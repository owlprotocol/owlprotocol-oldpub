{
  "address": "0xCcCD9B334Abc083533fD7380116BcAF12E881f60",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct AssetERC721",
          "name": "asset",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "currTokenIdsLen",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredTokenIdsLen",
          "type": "uint256"
        }
      ],
      "name": "InvalidERC721TokenIds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredAmount",
          "type": "uint256"
        }
      ],
      "name": "InvalidOutputableAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interfaceHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canImplementInterfaceForAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "basketIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256[][]",
          "name": "erc721TokenIdsTransfer",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "erc721TokenIdsMint",
          "type": "uint256[][]"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "basketIdx",
          "type": "uint256"
        }
      ],
      "name": "getBasket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "outputableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetERC20[]",
              "name": "erc20Transfer",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetERC20[]",
              "name": "erc20Mint",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721Transfer",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721Mint",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721MintAutoId",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC1155[]",
              "name": "erc1155Transfer",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC1155[]",
              "name": "erc1155Mint",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct AssetBasketOutput",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_initContractURI",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "outputableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetERC20[]",
              "name": "erc20Transfer",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetERC20[]",
              "name": "erc20Mint",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721Transfer",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721Mint",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721MintAutoId",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC1155[]",
              "name": "erc1155Transfer",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC1155[]",
              "name": "erc1155Mint",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct AssetBasketOutput[]",
          "name": "_outputBaskets",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "_routers",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "basketIdx",
          "type": "uint256"
        }
      ],
      "name": "output",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_initContractURI",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "outputableAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetERC20[]",
              "name": "erc20Transfer",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetERC20[]",
              "name": "erc20Mint",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721Transfer",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721Mint",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721MintAutoId",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC1155[]",
              "name": "erc1155Transfer",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC1155[]",
              "name": "erc1155Mint",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct AssetBasketOutput[]",
          "name": "_outputBaskets",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "_routers",
          "type": "address[]"
        }
      ],
      "name": "proxyInitialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "basketIdx",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "2fe98e12c0031ec2a7dec3df9237bffc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currTokenIdsLen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredTokenIdsLen\",\"type\":\"uint256\"}],\"name\":\"InvalidERC721TokenIds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredAmount\",\"type\":\"uint256\"}],\"name\":\"InvalidOutputableAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canImplementInterfaceForAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basketIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256[][]\",\"name\":\"erc721TokenIdsTransfer\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"erc721TokenIdsMint\",\"type\":\"uint256[][]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"basketIdx\",\"type\":\"uint256\"}],\"name\":\"getBasket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"outputableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetERC20[]\",\"name\":\"erc20Transfer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetERC20[]\",\"name\":\"erc20Mint\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721Transfer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721Mint\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721MintAutoId\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC1155[]\",\"name\":\"erc1155Transfer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC1155[]\",\"name\":\"erc1155Mint\",\"type\":\"tuple[]\"}],\"internalType\":\"struct AssetBasketOutput\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_initContractURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"outputableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetERC20[]\",\"name\":\"erc20Transfer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetERC20[]\",\"name\":\"erc20Mint\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721Transfer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721Mint\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721MintAutoId\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC1155[]\",\"name\":\"erc1155Transfer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC1155[]\",\"name\":\"erc1155Mint\",\"type\":\"tuple[]\"}],\"internalType\":\"struct AssetBasketOutput[]\",\"name\":\"_outputBaskets\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"_routers\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basketIdx\",\"type\":\"uint256\"}],\"name\":\"output\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_initContractURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"outputableAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetERC20[]\",\"name\":\"erc20Transfer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetERC20[]\",\"name\":\"erc20Mint\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721Transfer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721Mint\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721MintAutoId\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC1155[]\",\"name\":\"erc1155Transfer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC1155[]\",\"name\":\"erc1155Mint\",\"type\":\"tuple[]\"}],\"internalType\":\"struct AssetBasketOutput[]\",\"name\":\"_outputBaskets\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"_routers\",\"type\":\"address[]\"}],\"name\":\"proxyInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basketIdx\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Abstract contract with types and utilities that will be used by many (if not all) Plugins contracts\",\"kind\":\"dev\",\"methods\":{\"canImplementInterfaceForAddress(bytes32,address)\":{\"details\":\"See {IERC1820Implementer-canImplementInterfaceForAddress}.\"},\"contractURI()\":{\"details\":\"Returns collection-wide URI-accessible metadata\"},\"deposit(uint256,uint256,uint256[][],uint256[][])\":{\"details\":\"Used to deposit configuration outputs.\",\"params\":{\"amount\":\"How many more times the configuration should be craftable\",\"erc721TokenIdsMint\":\"2D-array mint ERC721s ```\",\"erc721TokenIdsTransfer\":\"2D-array transfers ERC721s\"}},\"getBasket(uint256)\":{\"details\":\"Returns all inputs\",\"params\":{\"basketIdx\":\"Index of selected input basket\"}},\"getImplementation()\":{\"details\":\"Returns the implementation address.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,string,(uint256,(address,uint256)[],(address,uint256)[],(address,uint256[])[],(address,uint256[])[],(address,uint256[])[],(address,uint256[],uint256[])[],(address,uint256[],uint256[])[])[],address[])\":{\"details\":\"Initializes contract (replaces constructor in proxy pattern)\",\"params\":{\"_admin\":\"owner, can control outputs on contract\",\"_initContractURI\":\"contract uri\",\"_outputBaskets\":\"outputs for configuration\",\"_routers\":\"trusted routers that can call the output function\"}},\"isTrustedForwarder(address)\":{\"details\":\"Determine is an address a GSN trusted forwarder.\",\"params\":{\"forwarder\":\"address to query\"},\"returns\":{\"_0\":\"OpenGSN trusted forwarder status\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"output(address,uint256,uint256)\":{\"details\":\"Outputs assets.\",\"params\":{\"amount\":\"How many times to craft\",\"basketIdx\":\"Index of selected output basket\",\"to\":\"Receiver\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"proxyInitialize(address,string,(uint256,(address,uint256)[],(address,uint256)[],(address,uint256[])[],(address,uint256[])[],(address,uint256[])[],(address,uint256[],uint256[])[],(address,uint256[],uint256[])[])[],address[])\":{\"details\":\"See initialize. Uses onlyInitializing modifier, enabling running while initializing.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setContractURI(string)\":{\"details\":\"Set contract uri\"},\"supportsInterface(bytes4)\":{\"details\":\"ERC165 Support\",\"params\":{\"interfaceId\":\"XOR of the external functions of the interface\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"version()\":{\"details\":\"OwlProtocol contract version. Used to determine compatibility interoperable with other Owl contracts.\"},\"versionRecipient()\":{\"details\":\"Returns OpenGSN contract version (used for compatibility checks)\"},\"withdraw(uint256,uint256)\":{\"details\":\"Used to withdraw configuration outputs out of contract to the caller. Will also decrease `craftableAmount`\",\"params\":{\"amount\":\"How many sets of outputs should be withdrawn\",\"basketIdx\":\"Index of selected output basket\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,uint256,uint256[][],uint256[][])\":{\"notice\":\"Must be `DEFAULT_ADMIN_ROLE`. Automatically sends from `_msgSender()`\"},\"output(address,uint256,uint256)\":{\"notice\":\"Output `amount`\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Must be `DEFAULT_ADMIN_ROLE`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/plugins/AssetRouter/AssetRouterOutput.sol\":\"AssetRouterOutput\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa8a1f16aa62b4d8c9e380057d9c3ee5c992e4a10dccc5650b26e38d4c61287d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb7f90ab8af7dae0bd4acfa088f9e606ea039110face097ca7c8beef563f71e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC1820ImplementerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC1820Implementer.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1820ImplementerUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC1820Implementer} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\\n * declare their willingness to be implementers.\\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\\n * registration to be complete.\\n */\\ncontract ERC1820ImplementerUpgradeable is Initializable, IERC1820ImplementerUpgradeable {\\n    function __ERC1820Implementer_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1820Implementer_init_unchained() internal onlyInitializing {\\n    }\\n    bytes32 private constant _ERC1820_ACCEPT_MAGIC = keccak256(\\\"ERC1820_ACCEPT_MAGIC\\\");\\n\\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bytes32)\\n    {\\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\\n    }\\n\\n    /**\\n     * @dev Declares the contract as willing to be an implementer of\\n     * `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer} and\\n     * {IERC1820Registry-interfaceHash}.\\n     */\\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\\n        _supportedInterfaces[interfaceHash][account] = true;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2666448e505df89f06bc8b5e8ae83ed3b5411e54fb69694510ec3620269534b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820ImplementerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Implementer.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for an ERC1820 implementer, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\\n * Used by contracts that will be registered as implementers in the\\n * {IERC1820Registry}.\\n */\\ninterface IERC1820ImplementerUpgradeable {\\n    /**\\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\\n     * implements `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xce35b9f17b74b88eb612b1ae727a25e3d91129c254beba840e9de2006b872978\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/introspection/IERC1820Registry.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820RegistryUpgradeable {\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc4b50ac2351fc9eb8e89b0a039d794db665e7e93bbc83c70da0e683bfc801971\",\"license\":\"MIT\"},\"contracts/assets/ERC1155/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC1155Mintable {\\n    /**\\n     * @notice Must have MINTER_ROLE\\n     * @dev Allows MINTER_ROLE to mint NFTs\\n     * @param to address to\\n     * @param id tokenId value\\n     * @param amount to mint\\n     * @param data for hooks\\n     */\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @notice Must have MINTER_ROLE\\n     * @dev Allows caller to mint NFTs (safeMint)\\n     * @param to address to\\n     * @param ids id values\\n     * @param amounts to mint\\n     * @param data for hooks\\n     */\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xae47ff18df270681b730a59c96aa480341165dbbd0d68bfd18b4564615c8852d\",\"license\":\"MIT\"},\"contracts/assets/ERC20/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC20Mintable {\\n    /***** Minting *****/\\n    function mint(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x50b3864c18e80c3f2dcf6a63d07b63243424c55ab498cc4b30ef0431105bf181\",\"license\":\"MIT\"},\"contracts/assets/ERC721/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * Interface for nested NFT that can be minted with auto-Id.\\n */\\ninterface IERC721Mintable {\\n    /***** Minting *****/\\n    function mint(address to, uint256 tokenId) external;\\n    function safeMint(address to, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x3d08b36cf95a274e3b91543bda40e86c05eb68be23960e9facc6aafd0aafc2c2\",\"license\":\"MIT\"},\"contracts/assets/ERC721/IERC721MintableAutoId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * Interface for nested NFT that can be minted with auto-Id.\\n */\\ninterface IERC721MintableAutoId {\\n    /***** Minting *****/\\n    function mint(address to) external returns (uint256);\\n    function safeMint(address to) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x925cd324edb14711006c0c88c99cbd3333c6b283cf03ac8856f6040805161dd9\",\"license\":\"MIT\"},\"contracts/common/ContractURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {IContractURI} from './IContractURI.sol';\\nimport {StorageSlotString} from '../utils/StorageSlotString.sol';\\n\\n/**\\n * @dev Implements contract uri getter/setter\\n */\\ncontract ContractURI is AccessControlUpgradeable, IContractURI {\\n    bytes32 internal constant CONTRACT_URI_ROLE = keccak256('CONTRACT_URI_ROLE');\\n    bytes32 internal constant _CONTRACT_URI_SLOT = keccak256('CONTRACT_URI');\\n\\n    /**\\n     * @dev ContractURI chained initialization\\n     * @param _contractUriRole write role\\n     * @param _initContractURI initial contract uri\\n     */\\n    function __ContractURI_init(address _contractUriRole, string memory _initContractURI) internal {\\n        __ContractURI_init_unchained(_contractUriRole, _initContractURI);\\n    }\\n\\n    /**\\n     * @dev ContractURI unchained initialization.\\n     * @param _contractUriRole write role\\n     * @param _initContractURI initial contract uri\\n     */\\n    function __ContractURI_init_unchained(address _contractUriRole, string memory _initContractURI) internal {\\n        _grantRole(CONTRACT_URI_ROLE, _contractUriRole);\\n        StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value = _initContractURI;\\n    }\\n\\n    /**\\n     * @dev Returns collection-wide URI-accessible metadata\\n     */\\n    function contractURI() public view returns (string memory) {\\n        return StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Set contract uri\\n     */\\n    function setContractURI(string memory uri) external onlyRole(CONTRACT_URI_ROLE) {\\n        StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value = uri;\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IContractURI).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd8dc6ad13d314f7e0e42a0103200bf2e17a1f004776b2bec4ff00fd333429414\",\"license\":\"MIT\"},\"contracts/common/IContractURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev IContractURI defines a contract with metadata. A 1:1 relationship between contract address and metdata uri.\\n */\\ninterface IContractURI {\\n    function contractURI() external view returns (string memory);\\n    function setContractURI(string memory uri) external;\\n}\\n\",\"keccak256\":\"0xec2f10bd854049d89466c7c7a145eba628e69e6e688f5c8fdab16f7aa6adf094\",\"license\":\"MIT\"},\"contracts/common/IOwlBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { IAccessControlUpgradeable } from '@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol';\\nimport { IContractURI } from './IContractURI.sol';\\nimport { IRouterReceiver } from './IRouterReceiver.sol';\\n\\n/**\\n * IOwlBase interface\\n */\\ninterface IOwlBase is IAccessControlUpgradeable, IContractURI, IRouterReceiver {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xaac3c3501e7083b0e9385f92b16909932b10bca004c575fa30703309cc318448\",\"license\":\"MIT\"},\"contracts/common/IRouterReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * IRouterReceiver defines OpenGSN Interfaces\\n */\\ninterface IRouterReceiver {\\n    function isTrustedForwarder(address forwarder) external view returns (bool);\\n    function versionRecipient() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0x27f0c495d085cbd04415b72d86942255e7d7e4283a01da87f7bf459b6cd0ac46\",\"license\":\"MIT\"},\"contracts/common/OwlBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport {UUPSUpgradeable} from '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport {IERC1820RegistryUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol';\\nimport {ERC1820ImplementerUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/ERC1820ImplementerUpgradeable.sol';\\nimport {ContractURI} from './ContractURI.sol';\\nimport {RouterReceiver} from './RouterReceiver.sol';\\nimport {IOwlBase} from './IOwlBase.sol';\\n\\n/**\\n * @dev Base for all OwlProtocol contracts\\n *\\n * Implements several required mechanisms for all OwlProtocol contracts to\\n * utilize:\\n * - OpenGSN support (gasless transactions)\\n * - Consistent contract versioning\\n * - Consistent access control\\n * - UUPS contract upgrade support\\n */\\ncontract OwlBase is\\n    ContextUpgradeable,\\n    AccessControlUpgradeable,\\n    UUPSUpgradeable,\\n    ContractURI,\\n    RouterReceiver,\\n    ERC1820ImplementerUpgradeable,\\n    IOwlBase\\n{\\n    // Consistent version across all contracts\\n    string internal constant _version = 'v0.1';\\n    address constant ERC1820_REGISTRY = 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24;\\n    bytes32 constant ONE = 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    IERC1820RegistryUpgradeable constant registry = IERC1820RegistryUpgradeable(ERC1820_REGISTRY);\\n\\n    /**\\n        Chained / Unchained\\n        https://forum.openzeppelin.com/t/difference-between-init-and-init-unchained/25255/3\\n\\n        Chained: constructor header replacement (parent inherited contracts)\\n        Unchained: constructor replacement (self init)\\n\\n     */\\n    /**\\n     * @dev OwlBase chained initialization\\n     * @param _admin address to assign owner rights\\n     * @param _forwarder OpenGSN forwarder address (if desired).\\n     */\\n    function __OwlBase_init(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _forwarder\\n    ) internal {\\n        __ContractURI_init_unchained(_admin, _initContractURI);\\n        __RouterReceiver_init_unchained(_forwarder);\\n\\n        __OwlBase_init_unchained(_admin);\\n    }\\n\\n    /**\\n     * @dev OwlBase unchained initialization.\\n     * @param _admin address to assign owner rights\\n     */\\n    function __OwlBase_init_unchained(address _admin) internal {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        if (AddressUpgradeable.isContract(ERC1820_REGISTRY)) {\\n            registry.updateERC165Cache(address(this), type(IOwlBase).interfaceId);\\n            registry.setInterfaceImplementer(address(this), type(IOwlBase).interfaceId | ONE, address(this));\\n        }\\n    }\\n\\n    /**\\n     * @notice Only callable by admins\\n     * @dev UUPS function to authorize upgrades\\n     * @param newImplementation newImplementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    /**\\n     * @dev Returns the implementation address.\\n     */\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /**\\n     * @dev OwlProtocol contract version. Used to determine compatibility\\n     * interoperable with other Owl contracts.\\n     */\\n    function version() external pure virtual returns (string memory) {\\n        return _version;\\n    }\\n\\n    /** Overrides */\\n    function _msgSender() internal view virtual override(RouterReceiver, ContextUpgradeable) returns (address) {\\n        return RouterReceiver._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(RouterReceiver, ContextUpgradeable) returns (bytes calldata) {\\n        return RouterReceiver._msgData();\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlUpgradeable, ContractURI, RouterReceiver)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOwlBase).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf296b1eaf7add0db769e09c517d6128141568de96f3a817456f0c0ce9c5e826e\",\"license\":\"MIT\"},\"contracts/common/RouterReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {IRouterReceiver} from './IRouterReceiver.sol';\\n\\n/**\\n * @dev Implements OpenGSN Config\\n */\\ncontract RouterReceiver is AccessControlUpgradeable, IRouterReceiver {\\n    bytes32 internal constant ROUTER_ROLE = keccak256('ROUTER_ROLE');\\n\\n    /**\\n     * @dev RouterReceiver chained initialization\\n     * @param _router router role\\n     */\\n    function __RouterReceiver_init(address _router) internal {\\n        __RouterReceiver_init_unchained(_router);\\n    }\\n\\n    /**\\n     * @dev RouterReceiver unchained initialization.\\n     * @param _router router role\\n     */\\n    function __RouterReceiver_init_unchained(address _router) internal {\\n        _grantRole(ROUTER_ROLE, _router);\\n    }\\n\\n    /**\\n     * @dev Returns OpenGSN contract version (used for compatibility checks)\\n     */\\n    function versionRecipient() external pure virtual returns (string memory) {\\n        return '2.2.6';\\n    }\\n\\n    /**\\n     * @dev Determine is an address a GSN trusted forwarder.\\n     * @param forwarder address to query\\n     * @return OpenGSN trusted forwarder status\\n     */\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return hasRole(ROUTER_ROLE, forwarder);\\n    }\\n\\n    /**\\n     * @notice the following 3 functions are all required for OpenGSN integration\\n     * @dev Support for meta transactions\\n     * @return ret either msg.sender or user who called transaction through a relayer\\n     */\\n    function _msgSender() internal view virtual override returns (address ret) {\\n        if (msg.data.length >= 20 && hasRole(ROUTER_ROLE, msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * @dev Support for meta transactions\\n     * @return msgData from either msg.sender or from user who called through relayer\\n     */\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (msg.data.length >= 20 && hasRole(ROUTER_ROLE, msg.sender)) {\\n            return msg.data[0:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IRouterReceiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x92ef1efa23fce0e51555009c49489e1002ae8588358876400c356070df050f3f\",\"license\":\"MIT\"},\"contracts/plugins/AssetRouter/AssetRouterOutput.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport {IERC721Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport {IERC1155Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\\n\\nimport {ERC721HolderUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol';\\nimport {ERC1155HolderUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol';\\nimport {ERC1155ReceiverUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol';\\n\\nimport {SafeERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\nimport {OwlBase} from '../../common/OwlBase.sol';\\n\\nimport {AssetBasketOutput, AssetLib} from './IAsset.sol';\\nimport {IAssetRouterInput} from './IAssetRouterInput.sol';\\nimport {IAssetRouterOutput} from './IAssetRouterOutput.sol';\\n\\n/**\\n * @dev Abstract contract with types and utilities that will be used by many (if\\n * not all) Plugins contracts\\n *\\n *\\n */\\ncontract AssetRouterOutput is ERC721HolderUpgradeable, ERC1155HolderUpgradeable, OwlBase, IAssetRouterOutput {\\n    bytes32 internal constant ASSET_ROUTER_INPUT = keccak256('ASSET_ROUTER_INPUT');\\n\\n    // Array of outputBaskets in this configurations\\n    AssetBasketOutput[] internal outputBaskets;\\n\\n    //https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[49] private __gap;\\n\\n    constructor() {}\\n\\n    /**\\n     * @inheritdoc IAssetRouterOutput\\n     */\\n    function initialize(\\n        address _admin,\\n        string calldata _initContractURI,\\n        AssetBasketOutput[] calldata _outputBaskets,\\n        address[] calldata _routers\\n    ) external override initializer {\\n        __AssetRouterOutput_init(_admin, _initContractURI, _outputBaskets, _routers);\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetRouterOutput\\n     */\\n    function proxyInitialize(\\n        address _admin,\\n        string calldata _initContractURI,\\n        AssetBasketOutput[] calldata _outputBaskets,\\n        address[] calldata _routers\\n    ) external override onlyInitializing {\\n        __AssetRouterOutput_init(_admin, _initContractURI, _outputBaskets, _routers);\\n    }\\n\\n    function __AssetRouterOutput_init(\\n        address _admin,\\n        string calldata _initContractURI,\\n        AssetBasketOutput[] calldata _outputBaskets,\\n        address[] calldata _routers\\n    ) internal {\\n        __ContractURI_init_unchained(_admin, _initContractURI);\\n        //No GSN router initialized as calls are not using GSN\\n        __OwlBase_init_unchained(_admin);\\n\\n        __AssetRouterOutput_init_unchained(_outputBaskets, _routers);\\n    }\\n\\n    function __AssetRouterOutput_init_unchained(AssetBasketOutput[] calldata _outputBaskets, address[] memory _routers)\\n        internal\\n        onlyInitializing\\n    {\\n        outputBaskets = _outputBaskets;\\n        for (uint256 i = 0; i < _routers.length; i++) {\\n            _grantRole(ASSET_ROUTER_INPUT, _routers[i]);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetRouterOutput\\n     */\\n    function getBasket(uint256 basketIdx) public view returns (AssetBasketOutput memory) {\\n        return outputBaskets[basketIdx];\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetRouterOutput\\n     */\\n    function deposit(\\n        uint256 amount,\\n        uint256 basketIdx,\\n        uint256[][] calldata erc721TokenIdsTransfer,\\n        uint256[][] calldata erc721TokenIdsMint\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        AssetLib.deposit(outputBaskets[basketIdx], amount, _msgSender(), erc721TokenIdsTransfer, erc721TokenIdsMint);\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetRouterOutput\\n     */\\n    function withdraw(uint256 amount, uint256 basketIdx) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        AssetLib.withdraw(outputBaskets[basketIdx], amount, _msgSender());\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetRouterOutput\\n     */\\n    function output(\\n        address to,\\n        uint256 amount,\\n        uint256 basketIdx\\n    ) external onlyRole(ASSET_ROUTER_INPUT) {\\n        AssetLib.output(outputBaskets[basketIdx], amount, to);\\n    }\\n\\n    /**\\n     * @inheritdoc OwlBase\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OwlBase, ERC1155ReceiverUpgradeable)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IAssetRouterOutput).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x5a59b095cf5a5d639ffcb5cc1d30cf142ce5c0d72fef7b46f874e5eee6caa9c9\",\"license\":\"MIT\"},\"contracts/plugins/AssetRouter/IAsset.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC1155Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport {IERC20Mintable} from \\\"../../assets/ERC20/IERC20Mintable.sol\\\";\\nimport {IERC721Mintable} from \\\"../../assets/ERC721/IERC721Mintable.sol\\\";\\nimport {IERC721MintableAutoId} from \\\"../../assets/ERC721/IERC721MintableAutoId.sol\\\";\\nimport {IERC1155Mintable} from \\\"../../assets/ERC1155/IERC1155Mintable.sol\\\";\\n\\nimport {IERC20Mintable} from \\\"../../assets/ERC20/IERC20Mintable.sol\\\";\\n\\n// Unaffected inputs of this type are unaffected by the crafting process.\\n// DOES NOT APPLY TO ERC 721 INPUTS, USE NTime INSTEAD.\\n// Burned inputs of this type are burned during the crafting process/\\n// NTime inputs of this type are not burned, but can only be used N times in\\n// the same recipe; Only available for ERC721 TokenType\\nenum ConsumableType {\\n    unaffected,\\n    burned,\\n    NTime\\n}\\n\\n// Current set of support token types as assets\\nenum TokenType {\\n    erc20,\\n    erc721,\\n    erc1155\\n}\\n\\nstruct AssetERC20 {\\n    address contractAddr;\\n    uint256 amount;\\n}\\n\\nstruct AssetERC721 {\\n    address contractAddr;\\n    uint256[] tokenIds;\\n}\\n\\nstruct AssetERC1155 {\\n    address contractAddr;\\n    uint256[] amounts;\\n    uint256[] tokenIds;\\n}\\n\\nstruct AssetBasket {\\n    AssetERC20[] erc20;\\n    AssetERC721[] erc721;\\n    AssetERC1155[] erc1155;\\n}\\n\\nstruct AssetBasketInput {\\n    address burnAddress;\\n    AssetERC20[] erc20Unaffected;\\n    AssetERC20[] erc20Burned;\\n    AssetERC721[] erc721Unaffected;\\n    AssetERC721[] erc721Burned;\\n    AssetERC721[] erc721NTime;\\n    uint256[] erc721NTimeMax;\\n    AssetERC1155[] erc1155Unaffected;\\n    AssetERC1155[] erc1155Burned;\\n}\\n\\nstruct AssetBasketOutput {\\n    uint256 outputableAmount;\\n    AssetERC20[] erc20Transfer;\\n    AssetERC20[] erc20Mint;\\n    AssetERC721[] erc721Transfer;\\n    AssetERC721[] erc721Mint;\\n    AssetERC721[] erc721MintAutoId;\\n    AssetERC1155[] erc1155Transfer;\\n    AssetERC1155[] erc1155Mint;\\n}\\n\\nerror InvalidERC20BalanceOf(AssetERC20 asset, uint256 currBalance, uint256 requiredBalance);\\nerror InvalidERC721OwnerOf(AssetERC721 asset, address currOwner, address requiredOwner);\\nerror InvalidERC721TokenIds(AssetERC721 asset, uint256 currTokenIdsLen, uint256 requiredTokenIdsLen);\\nerror InvalidERC721NTime(AssetERC721 asset, uint256 currNTime, uint256 maxNTime);\\nerror InvalidERC1155BalanceOfBatch(\\n    AssetERC1155 asset, uint256 tokenId, uint256 currBalance, uint256 requiredBalance\\n);\\nerror InvalidOutputableAmount(uint256 currAmount, uint256 requiredAmount);\\n\\n//Library\\nlibrary AssetLib {\\n    function deposit(\\n        AssetBasketOutput storage basket,\\n        uint256 amount,\\n        address from,\\n        uint256[][] memory erc721TokenIdsTransfer,\\n        uint256[][] memory erc721TokenIdsMint\\n    )\\n        internal\\n    {\\n        basket.outputableAmount += amount;\\n        pushTokenIds(basket.erc721Transfer, erc721TokenIdsTransfer);\\n        pushTokenIds(basket.erc721Mint, erc721TokenIdsMint);\\n\\n        safeTransferFromERC20(basket.erc20Transfer, amount, from, address(this));\\n        safeTransferFromERC721(basket.erc721Transfer, amount, erc721TokenIdsTransfer, from, address(this));\\n        safeBatchTransferFromERC1155(basket.erc1155Transfer, amount, from, address(this));\\n    }\\n\\n    /**\\n     * @dev AssetBasketOutput that transfers assets.\\n     */\\n    function withdraw(\\n        AssetBasketOutput storage basket,\\n        uint256 amount,\\n        address to\\n    )\\n        internal\\n    {\\n        if (basket.outputableAmount < amount)\\n            revert InvalidOutputableAmount(basket.outputableAmount, amount);\\n\\n        basket.outputableAmount -= amount;\\n        uint256[][] memory erc721TokenIdsTransfer = popTokenIds(basket.erc721Transfer, amount);\\n        popTokenIds(basket.erc721Mint, amount);\\n\\n        safeTransferERC20(basket.erc20Transfer, amount, to);\\n        safeTransferFromERC721(basket.erc721Transfer, amount, erc721TokenIdsTransfer, address(this), to);\\n        safeBatchTransferFromERC1155(basket.erc1155Transfer, amount, address(this), to);\\n    }\\n\\n    /**\\n     * @dev AssetBasketOutput that transfers assets.\\n     */\\n    function output(\\n        AssetBasketOutput storage basket,\\n        uint256 amount,\\n        address to\\n    )\\n        internal\\n    {\\n         if (basket.outputableAmount < amount)\\n            revert InvalidOutputableAmount(basket.outputableAmount, amount);\\n\\n        basket.outputableAmount -= amount;\\n        uint256[][] memory erc721TokenIdsTransfer = popTokenIds(basket.erc721Transfer, amount);\\n        uint256[][] memory erc721TokenIdsMint =  popTokenIds(basket.erc721Mint, amount);\\n\\n        safeTransferERC20(basket.erc20Transfer, amount, to);\\n        mintERC20(basket.erc20Mint, amount, to);\\n\\n        safeTransferFromERC721(basket.erc721Transfer, amount, erc721TokenIdsTransfer, address(this), to);\\n        mintERC721(basket.erc721Mint, amount, erc721TokenIdsMint, to);\\n        mintAutoIdERC721(basket.erc721MintAutoId, amount, to);\\n\\n        safeBatchTransferFromERC1155(basket.erc1155Transfer, amount, address(this), to);\\n        mintERC1155(basket.erc1155Mint, amount, to);\\n    }\\n    /**\\n     * @dev AssetBasketInput that checks token guards.\\n     */\\n    function input(\\n        AssetBasketInput storage basket,\\n        uint256 amount,\\n        address from,\\n        uint256[][] memory erc721TokenIdsUnaffected,\\n        uint256[][] memory erc721TokenIdsNTime,\\n        uint256[][] memory erc721TokenIdsBurned,\\n        mapping(address => mapping(uint256 => uint256)) storage erc721NTime\\n    )\\n        internal\\n    {\\n        balanceOfERC20(basket.erc20Unaffected, amount, from);\\n        safeTransferFromERC20(basket.erc20Burned, amount, from, basket.burnAddress);\\n\\n        ownerOfERC721(basket.erc721Unaffected, amount, erc721TokenIdsUnaffected, from);\\n        ownerOfERC721(basket.erc721NTime, amount, erc721TokenIdsNTime, from);\\n        useERC721(basket.erc721NTime, basket.erc721NTimeMax, erc721TokenIdsNTime, erc721NTime);\\n        safeTransferFromERC721(basket.erc721Burned, amount, erc721TokenIdsBurned, from, basket.burnAddress);\\n\\n        balanceOfBatchERC1155(basket.erc1155Unaffected, amount, from);\\n        safeBatchTransferFromERC1155(basket.erc1155Burned, amount, from, basket.burnAddress);\\n    }\\n\\n\\n    function pushTokenIds(\\n        AssetERC721[] storage assets,\\n        uint256[][] memory tokenIds\\n    )\\n        internal\\n    {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            for (uint256 j = 0; j < tokenIds[i].length; j++) {\\n                assets[i].tokenIds.push(tokenIds[i][j]);\\n            }\\n        }\\n    }\\n\\n    function popTokenIds(\\n        AssetERC721[] storage assets,\\n        uint256 amount\\n    )\\n        internal\\n        returns (uint256[][] memory)\\n    {\\n\\n        uint256[][] memory tokenIds = new uint256[][](assets.length);\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            tokenIds[i] = new uint256[](amount);\\n            uint256 tokenIdsLen = assets[i].tokenIds.length;\\n\\n            for (uint256 j = 0; j < amount; j++) {\\n                tokenIds[i][j] = assets[i].tokenIds[tokenIdsLen - 1 - j];\\n                assets[i].tokenIds.pop();\\n            }\\n        }\\n\\n        return tokenIds;\\n    }\\n\\n    /**\\n     * @dev Checks if balance of ERC20 is below minimum required for each AssetERC20\\n     */\\n    function balanceOfERC20(AssetERC20[] memory assets, uint256 amount, address from) internal view {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            uint256 currBalance = IERC20Upgradeable(assets[i].contractAddr).balanceOf(from);\\n            uint256 requiredBalance = assets[i].amount * amount;\\n            if (currBalance < requiredBalance) {\\n                revert InvalidERC20BalanceOf(assets[i], currBalance, requiredBalance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks ownership of ERC721 tokenIds for each AssetERC721\\n     */\\n    function useERC721(\\n        AssetERC721[] memory assets,\\n        uint256[] memory erc721NTimeMax,\\n        uint256[][] memory tokenIds,\\n        mapping(address => mapping(uint256 => uint256)) storage erc721NTime\\n    )\\n        internal\\n    {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            for (uint256 j = 0; j < tokenIds[i].length; j++) {\\n                uint256 currNTime = erc721NTime[assets[i].contractAddr][tokenIds[i][j]];\\n                uint256 maxNTime = erc721NTimeMax[i];\\n                if (currNTime >= maxNTime) {\\n                    revert InvalidERC721NTime(assets[i], currNTime, maxNTime);\\n                }\\n\\n                erc721NTime[assets[i].contractAddr][tokenIds[i][j]] = currNTime + 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks ownership of ERC721 tokenIds for each AssetERC721\\n     */\\n    function ownerOfERC721(AssetERC721[] memory assets, uint256 amount, uint256[][] memory tokenIds, address from) internal view {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            if (tokenIds[i].length != amount)\\n                revert InvalidERC721TokenIds(assets[i], tokenIds[i].length, amount);\\n\\n            for (uint256 j = 0; j < tokenIds[i].length; j++) {\\n                address currOwner = IERC721Upgradeable(assets[i].contractAddr).ownerOf(tokenIds[i][j]);\\n                if (currOwner != from) {\\n                    revert InvalidERC721OwnerOf(assets[i], currOwner, from);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if batch balance of ERC1155 is below minimum required for each AssetERC1155\\n     */\\n    function balanceOfBatchERC1155(AssetERC1155[] memory assets, uint256 amount, address from) internal view {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            //this is unaffected consumable type, as ensured by input validations\\n            uint256[] memory amounts = new uint256[](assets[i].amounts.length);\\n            address[] memory accounts = new address[](assets[i].amounts.length);\\n            for (uint256 j = 0; j < assets[i].amounts.length; j++) {\\n                amounts[j] = assets[i].amounts[j] * amount;\\n                accounts[j] = from;\\n            }\\n\\n            uint256[] memory balances =\\n                IERC1155Upgradeable(assets[i].contractAddr).balanceOfBatch(accounts, assets[i].tokenIds);\\n            for (uint256 j = 0; j < balances.length; j++) {\\n                if (balances[j] < amounts[j]) {\\n                    revert InvalidERC1155BalanceOfBatch(assets[i], assets[i].tokenIds[j], balances[j], amounts[j]);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer AssetERC20 scaled up by amount\\n     */\\n    function safeTransferFromERC20(AssetERC20[] memory assets, uint256 amount, address from, address to) internal {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            SafeERC20Upgradeable.safeTransferFrom(\\n                IERC20Upgradeable(assets[i].contractAddr), from, to, assets[i].amount * amount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer AssetERC20 scaled up by amount\\n     */\\n    function safeTransferERC20(AssetERC20[] memory assets, uint256 amount, address to) internal {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            SafeERC20Upgradeable.safeTransfer(\\n                IERC20Upgradeable(assets[i].contractAddr), to, assets[i].amount * amount\\n            );\\n        }\\n    }\\n\\n    function safeTransferFromERC721(AssetERC721[] memory assets, uint256 amount, uint256[][] memory tokenIds, address from, address to)\\n        internal\\n    {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            if (tokenIds[i].length != amount)\\n                revert InvalidERC721TokenIds(assets[i], tokenIds[i].length, amount);\\n\\n            for (uint256 j = 0; j < amount; j++) {\\n                IERC721Upgradeable(assets[i].contractAddr).safeTransferFrom(\\n                    from, to, tokenIds[i][j]\\n                );\\n            }\\n        }\\n    }\\n\\n    function safeBatchTransferFromERC1155(AssetERC1155[] memory assets, uint256 amount, address from, address to)\\n        internal\\n    {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            uint256[] memory amounts = new uint256[](assets[i].amounts.length);\\n            for (uint256 j = 0; j < assets[i].amounts.length; j++) {\\n                amounts[j] = assets[i].amounts[j] * amount;\\n            }\\n\\n            IERC1155Upgradeable(assets[i].contractAddr).safeBatchTransferFrom(\\n                from, to, assets[i].tokenIds, amounts, new bytes(0)\\n            );\\n        }\\n    }\\n\\n    function mintERC20(AssetERC20[] memory assets, uint256 amount, address to) internal {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            IERC20Mintable(assets[i].contractAddr).mint(to, assets[i].amount * amount);\\n        }\\n    }\\n\\n    function mintERC721(AssetERC721[] memory assets, uint256 amount, uint256[][] memory tokenIds, address to) internal {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            if (tokenIds[i].length != amount)\\n                revert InvalidERC721TokenIds(assets[i], tokenIds[i].length, amount);\\n\\n            for (uint256 j = 0; j < tokenIds[i].length; j++) {\\n                IERC721Mintable(assets[i].contractAddr).mint(to, tokenIds[i][j]);\\n            }\\n        }\\n    }\\n\\n    function mintAutoIdERC721(AssetERC721[] memory assets, uint256 amount, address to) internal {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            for (uint256 j = 0; j < amount; j++) {\\n                IERC721MintableAutoId(assets[i].contractAddr).mint(to);\\n            }\\n        }\\n    }\\n\\n    function mintERC1155(AssetERC1155[] memory assets, uint256 amount, address to) internal {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            uint256[] memory amounts = new uint256[](assets[i].amounts.length);\\n            for (uint256 j = 0; j < assets[i].amounts.length; j++) {\\n                amounts[j] = assets[i].amounts[j] * amount;\\n            }\\n\\n            IERC1155Mintable(assets[i].contractAddr).mintBatch(to, assets[i].tokenIds, amounts, new bytes(0));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3378d66aec33d7657309bb5bc84f98792d6b08e85138b5b5ed623675dfd03ae\",\"license\":\"MIT\"},\"contracts/plugins/AssetRouter/IAssetRouterInput.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AssetBasketInput} from \\\"./IAsset.sol\\\";\\n\\n/**\\n * @dev IAssetRouterInput defines a contract that guards calls requiring users to deposit or\\n * prove ownership of assets to then call an underlying contract.\\n * It can then be paired with any contract to trigger minting or other mechanics.\\n */\\ninterface IAssetRouterInput {\\n    /**\\n     * @dev Initializes contract (replaces constructor in proxy pattern)\\n     * @param _admin owner, can control outputs on contract\\n     * @param _initContractURI contract uri\\n     * @param _gsnForwarder trusted forwarder address for openGSN\\n     * @param _inputBaskets input baskets\\n     */\\n    function initialize(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        AssetBasketInput[] calldata _inputBaskets\\n    )\\n        external;\\n\\n    /**\\n     * @dev See initialize. Uses onlyInitializing modifier, enabling running while initializing.\\n     */\\n    function proxyInitialize(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        AssetBasketInput[] calldata _inputBaskets\\n    )\\n        external;\\n\\n    /**\\n     * @dev Returns all inputs\\n     * @param basketIdx Index of selected input basket\\n     */\\n    function getBasket(uint256 basketIdx) external view returns (AssetBasketInput memory);\\n\\n    /**\\n     * @notice Call `target` `amount` `data`\\n     * @dev Used to trigger a routed call. Amount parameter enables down-level iteration that consumes N inputs.\\n     * @param target Target Address\\n     * @param amount Down-level iteration parameter\\n     * @param basketIdx Index of selected input basket\\n     * @param erc721TokenIdsUnaffected 2D-Array of tokenIds that serve as unlimited token-gating\\n     * @param erc721TokenIdsNTime 2D-Array of tokenIds to use\\n     * @param erc721TokenIdsBurned 2D-Array of tokenIds to burn\\n     * @param outBasketIdx Index of selected output basket\\n     * ```\\n     */\\n    function input(\\n        address target,\\n        uint256 amount,\\n        uint256 basketIdx,\\n        uint256[][] calldata erc721TokenIdsUnaffected,\\n        uint256[][] calldata erc721TokenIdsNTime,\\n        uint256[][] calldata erc721TokenIdsBurned,\\n        uint256 outBasketIdx\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0x8c1b56bf0d04d4d24f62800b2604efd444f009188333c178c2931741b9afc568\",\"license\":\"MIT\"},\"contracts/plugins/AssetRouter/IAssetRouterOutput.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AssetBasketOutput} from './IAsset.sol';\\n\\n/**\\n * @dev IAssetRouterOutput defines a contract that outputs assets. All calls come from a\\n * trusted IAssetRouterInput.\\n */\\ninterface IAssetRouterOutput {\\n    /**\\n     * @dev Initializes contract (replaces constructor in proxy pattern)\\n     * @param _admin owner, can control outputs on contract\\n     * @param _initContractURI contract uri\\n     * @param _outputBaskets outputs for configuration\\n     * @param _routers trusted routers that can call the output function\\n     */\\n    function initialize(\\n        address _admin,\\n        string calldata _initContractURI,\\n        AssetBasketOutput[] calldata _outputBaskets,\\n        address[] calldata _routers\\n    ) external;\\n\\n    /**\\n     * @dev See initialize. Uses onlyInitializing modifier, enabling running while initializing.\\n     */\\n    function proxyInitialize(\\n        address _admin,\\n        string calldata _initContractURI,\\n        AssetBasketOutput[] calldata _outputBaskets,\\n        address[] calldata _routers\\n    ) external;\\n\\n    /**\\n     * @dev Returns all inputs\\n     * @param basketIdx Index of selected input basket\\n     */\\n    function getBasket(uint256 basketIdx) external view returns (AssetBasketOutput memory);\\n\\n    /**\\n     * @notice Must be `DEFAULT_ADMIN_ROLE`. Automatically sends from\\n     * `_msgSender()`\\n     * @dev Used to deposit configuration outputs.\\n     * @param amount How many more times the configuration should be\\n     * craftable\\n     * @param erc721TokenIdsTransfer 2D-array transfers ERC721s\\n     * @param erc721TokenIdsMint 2D-array mint ERC721s\\n     * ```\\n     */\\n    function deposit(uint256 amount, uint256 basketIdx, uint256[][] calldata erc721TokenIdsTransfer, uint256[][] calldata erc721TokenIdsMint) external;\\n\\n    /**\\n     * @notice Must be `DEFAULT_ADMIN_ROLE`\\n     * @dev Used to withdraw configuration outputs out of contract to the\\n     * caller. Will also decrease `craftableAmount`\\n     * @param amount How many sets of outputs should be withdrawn\\n     * @param basketIdx Index of selected output basket\\n     */\\n    function withdraw(uint256 amount, uint256 basketIdx) external;\\n\\n    /**\\n     * @notice Output `amount`\\n     * @dev Outputs assets.\\n     * @param to Receiver\\n     * @param amount How many times to craft\\n     * @param basketIdx Index of selected output basket\\n     */\\n    function output(address to, uint256 amount, uint256 basketIdx) external;\\n}\\n\",\"keccak256\":\"0xb0ad88bfe008882f87759ba59db06eba7e151ed0a43c8d96b93fcb8afecb0c54\",\"license\":\"MIT\"},\"contracts/utils/StorageSlotString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing strings to specific storage slots.\\n* Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *   bytes32 internal constant _CONTRACT_URI_SLOT = keccak256('CONTRACT_URI');\\n *\\n *   function contractURI() public view returns (string memory) {\\n *       return StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value;\\n *   }\\n *\\n *   function setContractURI(string memory uri) external onlyRole(CONTRACT_URI_ROLE) {\\n *       StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value = uri;\\n *   }\\n * }\\n * ```\\n */\\nlibrary StorageSlotString {\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd63ecf1ae3fdcb6c6cb7202602feb6df5c44179aa013535fa9a27d1114e6f43a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a080604052346100315730608052614084908161003782396080518181816108b301528181610b970152610cad0152f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461021b578063150b7a02146102125780632114281e14610209578063248a9ca314610200578063249cb3fa146101f75780632f2ff15d146101ee57806336568abe146101e55780633659cfe6146101dc578063441a3e70146101d3578063486ff0cd146101ca5780634f1ef286146101c157806352d1902d146101b857806354fd4d50146101af578063572b6c05146101a657806377977d501461019d5780638f1eee1c1461019457806391d148541461018b578063938e3d7b14610182578063a16f3c0d14610179578063a217fddf14610170578063aaf10f4214610167578063bc197c811461015e578063cde11ab114610155578063d547741f1461014c578063e8a3d485146101435763f23a6e611461013b57600080fd5b61000e6118a2565b5061000e6117b7565b5061000e611773565b5061000e6115ee565b5061000e611561565b5061000e6114a6565b5061000e611489565b5061000e61139a565b5061000e61127b565b5061000e61122f565b5061000e611146565b5061000e61105b565b5061000e610da5565b5061000e610d5f565b5061000e610c99565b5061000e610b55565b5061000e610b0a565b5061000e6109d7565b5061000e61088b565b5061000e6107ea565b5061000e61070e565b5061000e610684565b5061000e610653565b5061000e610504565b5061000e6103ef565b503461000e57602036600319011261000e5760043563ffffffff60e01b811680910361000e57602090637884d1cf60e11b8114908115610261575b506040519015158152f35b63054fd4d560e41b81149150811561027b575b5038610256565b6303e8939960e31b811491508115610295575b5038610274565b633d96f4ff60e11b1490503861028e565b6001600160a01b0381160361000e57565b50634e487b7160e01b600052604160045260246000fd5b61010081019081106001600160401b038211176102ea57604052565b6102f26102b7565b604052565b6001600160401b0381116102ea57604052565b604081019081106001600160401b038211176102ea57604052565b606081019081106001600160401b038211176102ea57604052565b90601f801991011681019081106001600160401b038211176102ea57604052565b6040519061036e826102ce565b565b6020906001600160401b03811161038d575b601f01601f19160190565b6103956102b7565b610382565b9291926103a682610370565b916103b46040519384610340565b82948184528183011161000e578281602093846000960137010152565b9080601f8301121561000e578160206103ec9335910161039a565b90565b503461000e57608036600319011261000e5761040c6004356102a6565b6104176024356102a6565b6064356001600160401b03811161000e576104369036906004016103d1565b50604051630a85bd0160e11b8152602090f35b9181601f8401121561000e578235916001600160401b03831161000e576020808501948460051b01011161000e57565b608060031982011261000e57600435610491816102a6565b91602435916001600160401b039081841161000e578060238501121561000e5783600401359382851161000e57816024868301011161000e57602401939260443583811161000e57826104e691600401610449565b9390939260643591821161000e5761050091600401610449565b9091565b503461000e5761053761051636610479565b9361053060ff600099949793999895985460081c16612777565b369161039a565b61054082611d50565b80516001600160401b038111610646575b60008051602061402f833981519152916105748261056f85546125c7565b61264e565b60209081601f84116001146105d0575092826105b6936105c39a96936105bd98966000926105c5575b50508160011b916000199060031b1c1916179055612925565b36916127d7565b91612a17565b005b01519050388061059d565b9190601f1984166105df612601565b936000905b82821061062e575050936105c39a96936105bd989693600193836105b69810610615575b505050811b019055612925565b015160001960f88460031b161c19169055388080610608565b806001869782949787015181550196019401906105e4565b61064e6102b7565b610551565b503461000e57602036600319011261000e5760043560005261012d6020526020600160406000200154604051908152f35b503461000e57604036600319011261000e5760ff6106cf6024356106a7816102a6565b60043560005261019160205260406000209060018060a01b0316600052602052604060002090565b546000911615610706575060207fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b604051908152f35b6020906106fe565b503461000e5760408060031936011261000e5760043590602435610731816102a6565b60009280845261012d8060205261074d60018587200154611c74565b81855260208181528486206001600160a01b03851660009081529152604090205460ff161561077d575b50505051f35b81855260209081528385206001600160a01b0384166000908152915260409020805460ff191660011790556001600160a01b03806107b96126bc565b169216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d858551a4388080610777565b503461000e57604036600319011261000e57602435610808816102a6565b6001600160a01b03806108196126bc565b169082160361082e576105c390600435611f3b565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b503461000e57602036600319011261000e576004356108a9816102a6565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691906108e230841415611fd1565b6108ff60008051602061400f833981519152938285541614612032565b6109076118fc565b61090f612093565b9061093b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1690565b1561094c5750506105c391506121cd565b6020600491604094939451928380926352d1902d60e01b825286165afa600091816109a7575b506109945760405162461bcd60e51b8152806109906004820161217e565b0390fd5b6105c3936109a29114612120565b61225d565b6109c991925060203d81116109d0575b6109c18183610340565b810190612104565b9038610972565b503d6109b7565b503461000e57604036600319011261000e576004356109f46118fc565b6109ff60243561334e565b50610a086126bc565b908054838110610a735792806105c394038255610a618360038401610a2d84826137cf565b610a3a85600488016137cf565b50610a518386610a4c60018a01613396565b6139e8565b84610a5c3093613459565b613a87565b610a6e60063093016134d4565b613c0e565b6040516317ab06fb60e01b8152600481019190915260248101849052604490fd5b600091031261000e57565b918091926000905b828210610abf575011610ab8575050565b6000910152565b91508060209183015181860152018291610aa7565b90602091610aed81518092818552858086019101610a9f565b601f01601f1916010190565b9060206103ec928181520190610ad4565b503461000e57600036600319011261000e57610b51604051610b2b8161030a565b6005815264191719171b60d91b6020820152604051918291602083526020830190610ad4565b0390f35b50604036600319011261000e57600435610b6e816102a6565b6024356001600160401b03811161000e57610b8d9036906004016103d1565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929190610bc730851415611fd1565b610be460008051602061400f833981519152948286541614612032565b610bec6118fc565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610c225750506105c391506121cd565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610c79575b50610c665760405162461bcd60e51b8152806109906004820161217e565b6105c393610c749114612120565b612375565b610c9291925060203d81116109d0576109c18183610340565b9038610c48565b503461000e57600036600319011261000e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610cf45760405160008051602061400f8339815191528152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e57600036600319011261000e57610b51604051610d808161030a565b600481526376302e3160e01b6020820152604051918291602083526020830190610ad4565b503461000e57602036600319011261000e57602060ff610e0f600435610dca816102a6565b7f7a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb260005261012d845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b90815180825260208080930193019160005b828110610e3b575050505090565b835180516001600160a01b031686528201518583015260409094019392810192600101610e2d565b90815180825260208080930193019160005b828110610e83575050505090565b835185529381019392810192600101610e75565b90604060206103ec9360018060a01b0381511684520151918160208201520190610e63565b908082519081815260208091019281808460051b8301019501936000915b848310610eea5750505050505090565b9091929394958480610f08600193601f198682030187528a51610e97565b9801930193019194939290610eda565b908082519081815260208091019281808460051b8301019501936000915b848310610f465750505050505090565b9091929394958480610f93600193601f198682030187528a51858060a01b038151168252610f808482015160608087860152840190610e63565b9160408092015191818403910152610e63565b9801930193019194939290610f36565b906103ec916020815281516020820152602082015190610fd161010092836040840152610120830190610e1b565b9160e061104b611038611024611010610ffc60408a015198601f19998a8a83030160608b0152610e1b565b60608a0151898983030160808a0152610ebc565b6080890151888883030160a0890152610ebc565b60a0880151878783030160c0880152610ebc565b60c0870151868683030184870152610f18565b9401519282850301910152610f18565b503461000e57602036600319011261000e57610b5160e060405161107e816102ce565b60008152606091818360208194015282604082015282808201528260808201528260a08201528260c0820152015261113560076110bc60043561334e565b506110c5610361565b93815485526110d660018301613396565b60208601526110e760028301613396565b60408601526110f860038301613459565b9085015261110860048201613459565b608085015261111960058201613459565b60a085015261112a600682016134d4565b60c0850152016134d4565b60e082015260405191829182610fa3565b503461000e576111a361115836610479565b946000979697949194939293549761118760ff8a60081c1615809a819b611221575b8115611201575b50612714565b8861119a600160ff196000541617600055565b6111e85761282f565b6111a957005b6111b961ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6111fc61010061ff00196000541617600055565b61282f565b303b15915081611213575b5038611181565b6001915060ff16143861120c565b600160ff821610915061117a565b503461000e57604036600319011261000e57602060ff610e0f602435611254816102a6565b60043560005261012d845260406000209060018060a01b0316600052602052604060002090565b503461000e5760208060031936011261000e576001600160401b039060043582811161000e573660238201121561000e576112c090369060248160040135910161039a565b916112c9611a7c565b825190811161138d575b60008051602061402f833981519152916112f18261056f85546125c7565b80601f831160011461132a575081929360009261131f575b50508160011b916000199060031b1c1916179055005b015190503880611309565b90601f19831694611339612601565b926000905b87821061137557505083600195961061135c575b505050811b019055005b015160001960f88460031b161c19169055388080611352565b8060018596829496860151815501950193019061133e565b6113956102b7565b6112d3565b503461000e57606036600319011261000e576004356113b8816102a6565b602435906113c4611b78565b6113cf60443561334e565b508054838110610a7357600784926113ed6105c396611484946135fa565b81556114568582866114516003830161144c8561140a85846137cf565b926004870193611441838861143c6002611424838b6137cf565b9c6114368585610a4c60018501613396565b01613396565b613d00565b86610a5c3093613459565b613459565b613d79565b61146c858561146760058501613459565b613e45565b61147e853086610a6e600686016134d4565b016134d4565b613f3f565b503461000e57600036600319011261000e57602060405160008152f35b503461000e57600036600319011261000e5760008051602061400f833981519152546040516001600160a01b039091168152602090f35b6020906001600160401b0381116114f6575b60051b0190565b6114fe6102b7565b6114ef565b81601f8201121561000e5780359161151a836114dd565b926115286040519485610340565b808452602092838086019260051b82010192831161000e578301905b828210611552575050505090565b81358152908301908301611544565b503461000e5760a036600319011261000e5761157e6004356102a6565b6115896024356102a6565b6001600160401b0360443581811161000e576115a9903690600401611503565b5060643581811161000e576115c2903690600401611503565b5060843590811161000e576115db9036906004016103d1565b5060405163bc197c8160e01b8152602090f35b503461000e57608036600319011261000e576004356001600160401b0360443581811161000e57611623903690600401610449565b909160643590811161000e5761163d903690600401610449565b93906116476118fc565b61166c60249161166461165a843561334e565b50966116646126bc565b96369161357c565b90611678838654612471565b8555611695600386019261168c8885613661565b60048701613661565b60016116a2818701613396565b916000825b6116d1575b505050506116c490836105c39684610a5c3094613459565b610a6e60063094016134d4565b835181101561176e5761176890611763886001600160a01b036116f4848961332c565b51511661175e60206117506117168d8361170e8a8f61332c565b510151612452565b604080516323b872dd60e01b948101949094526001600160a01b039096168a84019081523060208201529586015290938491606090910190565b03601f198101845283610340565b613913565b61331c565b826116a7565b6116ac565b503461000e57604036600319011261000e576105c3602435600435611797826102a6565b8060005261012d6020526117b2600160406000200154611c74565b611f3b565b503461000e5760008060031936011261189f57604051908060008051602061402f833981519152908154906117eb826125c7565b8086529260019280841690811561187b5750600114611821575b610b518661181581880382610340565b60405191829182610af9565b815292507feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c6975b82841061186357505050810160200161181582610b5138611805565b80546020858701810191909152909301928101611847565b60ff1916602088015250506040850193506118159250849150610b51905038611805565b80fd5b503461000e5760a036600319011261000e576118bf6004356102a6565b6118ca6024356102a6565b6084356001600160401b03811161000e576118e99036906004016103d1565b5060405163f23a6e6160e01b8152602090f35b6119046126bc565b6001600160a01b03811660009081527fa581b17bfc4d6578e300cafbf34fd2dc1fef0270d8c73f88a99dcde2859a6639602052604090205460ff16156119475750565b611959906001600160a01b0316612548565b60006119636120cb565b90603061196f8361249c565b53607861197b836124b2565b5360415b60018111611a2d576109906037611a1586611a078761199e88156124fd565b611a016040519586947f416363657373436f6e74726f6c3a206163636f756e742000000000000000000060208701526119e0815180926020858a019101610a9f565b8501016011907001034b99036b4b9b9b4b733903937b6329607d1b81520190565b90611d39565b03601f198101835282610340565b60405162461bcd60e51b815291829160048301610af9565b9080600f611a6a92166010811015611a6f575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a611a6084866124c3565b5360041c916124e2565b61197f565b611a77612485565b611a40565b611a846126bc565b6001600160a01b03811660009081527f8c7d8a69506b3476b9e698ac476ce2280bb980a877bac058951903a1c3a17c8060205260409020547f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c15919060ff1615611aeb575050565b611afd906001600160a01b0316612548565b90611b066120cb565b906030611b128361249c565b536078611b1e836124b2565b5360415b60018111611b41576109906037611a1586611a078761199e88156124fd565b9080600f611b7392166010811015611a6f576f181899199a1a9b1b9c1cb0b131b232b360811b901a611a6084866124c3565b611b22565b611b806126bc565b6001600160a01b03811660009081527fccea56354525642427746d92f0e34afbcfef91f58ab9ff7966a90f07ea4df21e60205260409020547fe5702506dab6ef48f05611b8b328969e4387aeabcb2a2f3be2364ac79d4c6b24919060ff1615611be7575050565b611bf9906001600160a01b0316612548565b90611c026120cb565b906030611c0e8361249c565b536078611c1a836124b2565b5360415b60018111611c3d576109906037611a1586611a078761199e88156124fd565b9080600f611c6f92166010811015611a6f576f181899199a1a9b1b9c1cb0b131b232b360811b901a611a6084866124c3565b611c1e565b611c7c6126bc565b600082815261012d602090815260408083206001600160a01b038516845290915290205460ff1615611cac575050565b611cbe906001600160a01b0316612548565b90611cc76120cb565b906030611cd38361249c565b536078611cdf836124b2565b5360415b60018111611d02576109906037611a1586611a078761199e88156124fd565b9080600f611d3492166010811015611a6f576f181899199a1a9b1b9c1cb0b131b232b360811b901a611a6084866124c3565b611ce3565b90611d4c60209282815194859201610a9f565b0190565b6001600160a01b03811660009081527f8c7d8a69506b3476b9e698ac476ce2280bb980a877bac058951903a1c3a17c80602052604090207f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c159061012d9060ff905b541615611dbd57505050565b6000828152602091825260408082206001600160a01b038616835290925220805460ff191660011790556001600160a01b0380611df86126bc565b169216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d6000604051a4565b6001600160a01b03811660009081527fa581b17bfc4d6578e300cafbf34fd2dc1fef0270d8c73f88a99dcde2859a6639602052604081205461012d9060ff1615611e6e57505050565b818052602090815260408083206001600160a01b038516600090815292529020805460ff191660011790556001600160a01b0380611eaa6126bc565b169216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d81604051a4565b6001600160a01b03811660009081527fccea56354525642427746d92f0e34afbcfef91f58ab9ff7966a90f07ea4df21e602052604090207fe5702506dab6ef48f05611b8b328969e4387aeabcb2a2f3be2364ac79d4c6b249061012d9060ff90611db1565b600081815261012d602081815260408084206001600160a01b03871685529091529091205460ff16611f6c57505050565b6000828152602091825260408082206001600160a01b038616835290925220805460ff191690556001600160a01b0380611fa46126bc565b169216907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b6000604051a4565b15611fd857565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561203957565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b60405190600060208301928084106001600160401b038511176120be575b8360405281815292369037565b6120c66102b7565b6120b1565b60405190608082018281106001600160401b038211176120f7575b604052604282526060366020840137565b6120ff6102b7565b6120e6565b9081602091031261000e575190565b506040513d6000823e3d90fd5b1561212757565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b60809060208152602e60208201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960408201526d6f6e206973206e6f74205555505360901b60608201520190565b803b156122025760008051602061400f83398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b612266816121cd565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a282511580159061236d575b6122ac57505050565b813b1561231c57506000828192602061231995519201905af46122cd6123cb565b604051916122da83610325565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b60408401526123fb565b50565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b5060006122a3565b61237e816121cd565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a28251158015906123c3576122ac57505050565b5060016122a3565b3d156123f6573d906123dc82610370565b916123ea6040519384610340565b82523d6000602084013e565b606090565b90919015612407575090565b8151156124175750805190602001fd5b60405162461bcd60e51b815260206004820152908190610990906024830190610ad4565b50634e487b7160e01b600052601160045260246000fd5b8060001904821181151516612465570290565b61246d61243b565b0290565b8119811161247d570190565b611d4c61243b565b50634e487b7160e01b600052603260045260246000fd5b6020908051156124aa570190565b611d4c612485565b6021908051600110156124aa570190565b9060209180518210156124d557010190565b6124dd612485565b010190565b80156124f0575b6000190190565b6124f861243b565b6124e9565b1561250457565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b6040519061255582610325565b602a82526040366020840137603061256c8361249c565b536078612578836124b2565b536029905b60018211612590576103ec9150156124fd565b80600f6125c192166010811015611a6f576f181899199a1a9b1b9c1cb0b131b232b360811b901a611a6084866124c3565b9061257d565b90600182811c921680156125f7575b60208310146125e157565b634e487b7160e01b600052602260045260246000fd5b91607f16916125d6565b60008051602061402f8339815191526000527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c69790565b818110612642575050565b60008155600101612637565b90601f821161265b575050565b61036e9160008051602061402f8339815191526000527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c697906020601f840160051c830193106126b2575b601f0160051c0190612637565b90915081906126a5565b6014361015806126dc575b156126d85736601319013560601c90565b3390565b503360009081527f63a294b57daa47190712cf6f633f8c5ed2e21402a46d4619c4e5eb122af24b53602052604090205460ff166126c7565b1561271b57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b1561277e57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b92916127e2826114dd565b916127f06040519384610340565b829481845260208094019160051b810192831161000e57905b8282106128165750505050565b8380918335612824816102a6565b815201910190612809565b9190612841919796939597369161039a565b61284a82611d50565b80516001600160401b038111612918575b60008051602061402f833981519152916128798261056f85546125c7565b60209081601f84116001146128bb575092826105b69361036e9a9b96936105bd98966000926105c55750508160011b916000199060031b1c1916179055612925565b9190601f1984166128ca612601565b936000905b8282106129005750509361036e9a9b96936105bd989693600193836105b6981061061557505050811b019055612925565b806001869782949787015181550196019401906128cf565b6129206102b7565b61285b565b61292e90611e25565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b61294c5750565b803b1561000e5760405163a41e7d5160e01b815230600482015263054fd4d560e41b6024820152600090818160448183875af18015612a0a575b6129f7575b50813b1561189f576040516329965a1d60e01b8152306004820181905260016354fd4d5160e01b0360248301526044820152918290606490829084905af180156129ea575b6129d75750565b806129e461036e926102f7565b80610a94565b6129f2612113565b6129d0565b806129e4612a04926102f7565b3861298b565b612a12612113565b612986565b90929192600091825490612a3160ff600893841c16612777565b600160401b8311612bbe575b6101c3805490848155818510612ae8575b50506101c3600052807fc08b2039d69be55fac1e8db8384942c79c1bde7a040f255238fc100e10c8c1d09085925b858410612ac3575050505050505b8251811015612abe5780611763612ab4612aa7612ab9948761332c565b516001600160a01b031690565b611ed6565b612a8a565b509050565b84602082612adc612ad660019587612bcb565b8761325f565b01930193019291612a7c565b6001906001600160fd1b038084118316612bb1575b86118216612ba4575b8652600390847fc08b2039d69be55fac1e8db8384942c79c1bde7a040f255238fc100e10c8c1d093831b84019387841b015b848110612b4757505050612a4e565b888155612b55838201612be0565b612b6160028201612be0565b612b6c848201612ca5565b612b7860048201612ca5565b612b8460058201612d09565b612b9060068201612e07565b612b9c60078201612e07565b018590612b38565b612bac61243b565b612b06565b612bb961243b565b612afd565b612bc66102b7565b612a3d565b90359060fe198136030182121561000e570190565b80549060009081815582612bf357505050565b6001906001600160ff1b0384118216612c32575b82526020822092811b8301925b838110612c215750505050565b808360029255838382015501612c14565b612c3a61243b565b612c07565b80546000825580612c4e575050565b61036e91600052602060002090810190612637565b90600160401b8111612c98575b815490808355818110612c8257505050565b61036e9260005260206000209182019101612637565b612ca06102b7565b612c70565b805490600080825582612cb757505050565b6001916001600160ff1b0384118316612cfc575b81526020812092821b8301925b838110612ce55750505050565b808260029255612cf6848201612c3f565b01612cd8565b612d0461243b565b612ccb565b805490600080825582612d1b57505050565b6001916001600160ff1b0384118316612d60575b81526020812092821b8301925b838110612d495750505050565b808260029255612d5a848201612c3f565b01612d3c565b612d6861243b565b612d2f565b600160401b8211612dfa575b805490828155818310612d8b57505050565b6001916001600160ff1b038082118416612ded575b84118316612de0575b60009182526020822090831b810193831b015b838110612dc95750505050565b808260029255612dda848201612c3f565b01612dbc565b612de861243b565b612da9565b612df561243b565b612da0565b612e026102b7565b612d79565b80549060009081815582612e1a57505050565b6001907f555555555555555555555555555555555555555555555555555555555555555584118216612e87575b8252602082209160039384028301925b838110612e65575050505050565b8082869255612e75848201612c3f565b612e8160028201612c3f565b01612e57565b612e8f61243b565b612e47565b90600160401b8111612f49575b815491818155828210612eb357505050565b6001907f55555555555555555555555555555555555555555555555555555555555555558085118316612f3c575b83118216612f2f575b60009081526020812060039485028101938502015b838110612f0d575050505050565b8082869255612f1d848201612c3f565b612f2960028201612c3f565b01612eff565b612f3761243b565b612eea565b612f4461243b565b612ee1565b612f516102b7565b612ea1565b903590601e198136030182121561000e57018035906001600160401b03821161000e57602001918160061b3603831361000e57565b90600160401b8311613071575b8154838355808410613005575b5060009182526020808320915b848410612fc0575050505050565b6002604082612ff160019435612fd5816102a6565b87546001600160a01b0319166001600160a01b03909116178755565b848101358487015501930193019291612fb2565b60016001600160ff1b038083118216613064575b85118116613057575b6000908482526020822092811b83019286821b015b83811061304657505050612fa5565b808360029255838382015501613037565b61305f61243b565b613022565b61306c61243b565b613019565b6130796102b7565b612f98565b903590601e198136030182121561000e57018035906001600160401b03821161000e57602001918160051b3603831361000e57565b906130be8383612c63565b906000526020806000206000925b8484106130da575050505050565b600183828293358555019201930192906130cc565b91906130fb8284612d6d565b8060009384526020938481209181935b85851061311b5750505050505050565b8035603e1983360301811215613198578790830161313d8135612fd5816102a6565b600190613150828801918481019061307e565b919061315c8383612c63565b9087528387209087905b8382106131845750505050506002906001920194019401939261310b565b803583558c95928501929185019101613166565b8380fd5b9190916131a98282612e94565b8260009182526020918281209181955b8587106131c95750505050505050565b8035605e198336030181121561319857859083016131eb8135612fd5816102a6565b60018087016131fc8484018461307e565b91906132088383612c63565b9088528488209088905b83821061324b5750505050509060019261323f613235846040600396019061307e565b9060028a016130b3565b019401960195926131b9565b803583558b96928501929185019101613212565b60079061331361036e938035835561328761327d6020830183612f56565b9060018601612f8b565b6132a16132976040830183612f56565b9060028601612f8b565b6132bb6132b1606083018361307e565b90600386016130ef565b6132d56132cb608083018361307e565b90600486016130ef565b6132ef6132e560a083018361307e565b90600586016130ef565b6133096132ff60c083018361307e565b906006860161319c565b60e081019061307e565b9290910161319c565b600190600019811461247d570190565b6020918151811015613341575b60051b010190565b613349612485565b613339565b6101c38054821015613389575b60005260031b7fc08b2039d69be55fac1e8db8384942c79c1bde7a040f255238fc100e10c8c1d00190600090565b613391612485565b61335b565b9081546133a2816114dd565b926040936133b285519182610340565b828152809460208092019260005281600020906000935b8585106133d857505050505050565b60028460019284516133e98161030a565b848060a01b03875416815284870154838201528152019301940193916133c9565b9060405191828154918282526020928383019160005283600020936000905b82821061343f5750505061036e92500383610340565b855484526001958601958895509381019390910190613429565b908154613465816114dd565b9260409361347585519182610340565b828152809460208092019260005281600020906000935b85851061349b57505050505050565b60028460019284516134ac8161030a565b848060a01b0387541681526134c285880161340a565b8382015281520193019401939161348c565b9081546134e0816114dd565b926040936134f085519182610340565b828152809460208092019260005281600020906000935b85851061351657505050505050565b6003846001928451606081018181106001600160401b0382111761356f575b8652848060a01b03875416815261354d85880161340a565b8382015261355d6002880161340a565b86820152815201930194019391613507565b6135776102b7565b613535565b92919092613589846114dd565b916135976040519384610340565b829480845260208094019060051b83019282841161000e5780915b8483106135c157505050505050565b82356001600160401b03811161000e5786916135e08684938601611503565b8152019201916135b2565b600181106124f0576000190190565b818110613605570390565b61360d61243b565b0390565b805482101561362e575b60005260206000209060011b0190600090565b613636612485565b61361b565b8054821015613654575b60005260206000200190600090565b61365c612485565b613645565b90600080935b835485101561370c57815b61367c868561332c565b51518110156136fb576136e9906136938787613611565b506136cc6001809201916136b1846136ab8c8b61332c565b5161332c565b5192805491600160401b8310156136ee575b8201815561363b565b819291549060031b600019811b9283911b1691191617905561331c565b613672565b6136f66102b7565b6136c3565b50936137069061331c565b93613667565b9350505050565b9061371d826114dd565b61372a6040519182610340565b828152809261373b601f19916114dd565b019060005b82811061374c57505050565b806060602080938501015201613740565b90613767826114dd565b6137746040519182610340565b8281528092613785601f19916114dd565b0190602036910137565b80549081156137b957600019918201916137a9838361363b565b909182549160031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b6137d98154613713565b90600091825b8254811015613894576137f18561375d565b6137fb828461332c565b52613806818361332c565b506138118184613611565b50600180910154855b8781106138325750505061382d9061331c565b6137df565b61388f9061386b613861613846878a613611565b508661385a85613855896135eb565b6135fa565b910161363b565b90549060031b1c90565b613879826136ab888a61332c565b5261176384613888878a613611565b500161378f565b61381a565b509250505090565b9081602091031261000e5751801515810361000e5790565b156138bb57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6040516001600160a01b03919091169161392c8261030a565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b156139a3576000828192828761397e9796519301915af16139786123cb565b906123fb565b8051908161398b57505050565b8261036e9361399e93830101910161389c565b6138b4565b60405162461bcd60e51b815260048101859052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9092919260005b8251811015613a5e57613a59906117636001600160a01b03613a11838761332c565b51511660209061175e613a29878461170e888c61332c565b60405163a9059cbb60e01b948101949094526001600160a01b038b16602485015260448401528260648101611750565b6139ef565b5050509050565b613a7d60409295949395606083526060830190610e97565b9460208201520152565b9493919492909260005b8151811015613bb75784613aa5828961332c565b515103613b815760005b858110613ac55750613ac09061331c565b613a91565b613af2613ae6613ae6613ad8858761332c565b51516001600160a01b031690565b6001600160a01b031690565b90613b01816136ab858c61332c565b51823b1561000e57604051632142170760e11b81526001600160a01b038088166004830152881660248201526044810191909152613b5c926000908290818381606481015b03925af18015613b74575b613b61575b5061331c565b613aaf565b806129e4613b6e926102f7565b38613b56565b613b7c612113565b613b51565b610990613b9b82613b948a94899661332c565b519361332c565b515192604051938493639096f90560e01b855260048501613a65565b50505050509050565b93906103ec9593613bf291613c009460018060a01b03809216885216602087015260a0604087015260a0860190610e63565b908482036060860152610e63565b916080818403910152610ad4565b939190936000905b8051821015613cf857602092613c3984613c30858561332c565b5101515161375d565b9460005b85613c48868661332c565b51015151811015613c8d5780613c788a613c72613c88948a613c6a8b8b61332c565b51015161332c565b51612452565b613c82828a61332c565b5261331c565b613c3d565b50929094919350613ca7613ae6613ae6613ad8848861332c565b91604080613cb5848861332c565b510151613cc0612093565b94803b1561000e578960008a613b46613cf09983975198899788968795631759616b60e11b875260048701613bc0565b909291613c16565b505050915050565b9092919260005b8251811015613a5e57613d23613ae6613ae6613ad8848761332c565b90613d3483602061170e848861332c565b823b1561000e576040516340c10f1960e01b81526001600160a01b03881660048201526024810191909152613d7492600090829081838160448101613b46565b613d07565b9293906000915b8451831015613e3d5781613d94848661332c565b515103613e2a5760005b613da8848661332c565b5151811015613e1957613dc4613ae6613ae6613ad8878a61332c565b90613dd3816136ab878961332c565b51823b1561000e576040516340c10f1960e01b81526001600160a01b038a1660048201526024810191909152613e1492600090829081838160448101613b46565b613d9e565b5091613e249061331c565b91613d80565b509281613b9461099093613b9b9361332c565b945050505050565b9291600090815b8551811015613ef357825b848110613e6d5750613e689061331c565b613e4c565b613ec390613e84613ae6613ae6613ad8868c61332c565b6040516335313c2160e11b81526001600160a01b03861660048201526020918290829060249082908b905af18015613ee6575b613ec8575b505061331c565b613e57565b81613ede92903d106109d0576109c18183610340565b503880613ebc565b613eee612113565b613eb7565b505050509050565b92613f236103ec9593613f319360018060a01b03168652608060208701526080860190610e63565b908482036040860152610e63565b916060818403910152610ad4565b92906000935b805185101561400757602090613f5f82613c30888461332c565b9360005b83613f6e898561332c565b51015151811015613f9f5780613f9086613c72613f9a9488613c6a8e8a61332c565b613c82828961332c565b613f63565b509590939150613fb8613ae6613ae6613ad8848861332c565b604080613fc5848861332c565b51015193613fd1612093565b92803b1561000e576140009560008a613b4682965197889687958694630fbfeffd60e11b865260048601613efb565b9391613f45565b505091505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc59c86eba0f8c3c9659b86fb2776edca2ff990d1509243e9705ae43a6831558c6a2646970667358221220f490b25d1209f968400930a67f846e773290d6e6019e6ade0128025bc879b23364736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461021b578063150b7a02146102125780632114281e14610209578063248a9ca314610200578063249cb3fa146101f75780632f2ff15d146101ee57806336568abe146101e55780633659cfe6146101dc578063441a3e70146101d3578063486ff0cd146101ca5780634f1ef286146101c157806352d1902d146101b857806354fd4d50146101af578063572b6c05146101a657806377977d501461019d5780638f1eee1c1461019457806391d148541461018b578063938e3d7b14610182578063a16f3c0d14610179578063a217fddf14610170578063aaf10f4214610167578063bc197c811461015e578063cde11ab114610155578063d547741f1461014c578063e8a3d485146101435763f23a6e611461013b57600080fd5b61000e6118a2565b5061000e6117b7565b5061000e611773565b5061000e6115ee565b5061000e611561565b5061000e6114a6565b5061000e611489565b5061000e61139a565b5061000e61127b565b5061000e61122f565b5061000e611146565b5061000e61105b565b5061000e610da5565b5061000e610d5f565b5061000e610c99565b5061000e610b55565b5061000e610b0a565b5061000e6109d7565b5061000e61088b565b5061000e6107ea565b5061000e61070e565b5061000e610684565b5061000e610653565b5061000e610504565b5061000e6103ef565b503461000e57602036600319011261000e5760043563ffffffff60e01b811680910361000e57602090637884d1cf60e11b8114908115610261575b506040519015158152f35b63054fd4d560e41b81149150811561027b575b5038610256565b6303e8939960e31b811491508115610295575b5038610274565b633d96f4ff60e11b1490503861028e565b6001600160a01b0381160361000e57565b50634e487b7160e01b600052604160045260246000fd5b61010081019081106001600160401b038211176102ea57604052565b6102f26102b7565b604052565b6001600160401b0381116102ea57604052565b604081019081106001600160401b038211176102ea57604052565b606081019081106001600160401b038211176102ea57604052565b90601f801991011681019081106001600160401b038211176102ea57604052565b6040519061036e826102ce565b565b6020906001600160401b03811161038d575b601f01601f19160190565b6103956102b7565b610382565b9291926103a682610370565b916103b46040519384610340565b82948184528183011161000e578281602093846000960137010152565b9080601f8301121561000e578160206103ec9335910161039a565b90565b503461000e57608036600319011261000e5761040c6004356102a6565b6104176024356102a6565b6064356001600160401b03811161000e576104369036906004016103d1565b50604051630a85bd0160e11b8152602090f35b9181601f8401121561000e578235916001600160401b03831161000e576020808501948460051b01011161000e57565b608060031982011261000e57600435610491816102a6565b91602435916001600160401b039081841161000e578060238501121561000e5783600401359382851161000e57816024868301011161000e57602401939260443583811161000e57826104e691600401610449565b9390939260643591821161000e5761050091600401610449565b9091565b503461000e5761053761051636610479565b9361053060ff600099949793999895985460081c16612777565b369161039a565b61054082611d50565b80516001600160401b038111610646575b60008051602061402f833981519152916105748261056f85546125c7565b61264e565b60209081601f84116001146105d0575092826105b6936105c39a96936105bd98966000926105c5575b50508160011b916000199060031b1c1916179055612925565b36916127d7565b91612a17565b005b01519050388061059d565b9190601f1984166105df612601565b936000905b82821061062e575050936105c39a96936105bd989693600193836105b69810610615575b505050811b019055612925565b015160001960f88460031b161c19169055388080610608565b806001869782949787015181550196019401906105e4565b61064e6102b7565b610551565b503461000e57602036600319011261000e5760043560005261012d6020526020600160406000200154604051908152f35b503461000e57604036600319011261000e5760ff6106cf6024356106a7816102a6565b60043560005261019160205260406000209060018060a01b0316600052602052604060002090565b546000911615610706575060207fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b604051908152f35b6020906106fe565b503461000e5760408060031936011261000e5760043590602435610731816102a6565b60009280845261012d8060205261074d60018587200154611c74565b81855260208181528486206001600160a01b03851660009081529152604090205460ff161561077d575b50505051f35b81855260209081528385206001600160a01b0384166000908152915260409020805460ff191660011790556001600160a01b03806107b96126bc565b169216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d858551a4388080610777565b503461000e57604036600319011261000e57602435610808816102a6565b6001600160a01b03806108196126bc565b169082160361082e576105c390600435611f3b565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b503461000e57602036600319011261000e576004356108a9816102a6565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691906108e230841415611fd1565b6108ff60008051602061400f833981519152938285541614612032565b6109076118fc565b61090f612093565b9061093b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1690565b1561094c5750506105c391506121cd565b6020600491604094939451928380926352d1902d60e01b825286165afa600091816109a7575b506109945760405162461bcd60e51b8152806109906004820161217e565b0390fd5b6105c3936109a29114612120565b61225d565b6109c991925060203d81116109d0575b6109c18183610340565b810190612104565b9038610972565b503d6109b7565b503461000e57604036600319011261000e576004356109f46118fc565b6109ff60243561334e565b50610a086126bc565b908054838110610a735792806105c394038255610a618360038401610a2d84826137cf565b610a3a85600488016137cf565b50610a518386610a4c60018a01613396565b6139e8565b84610a5c3093613459565b613a87565b610a6e60063093016134d4565b613c0e565b6040516317ab06fb60e01b8152600481019190915260248101849052604490fd5b600091031261000e57565b918091926000905b828210610abf575011610ab8575050565b6000910152565b91508060209183015181860152018291610aa7565b90602091610aed81518092818552858086019101610a9f565b601f01601f1916010190565b9060206103ec928181520190610ad4565b503461000e57600036600319011261000e57610b51604051610b2b8161030a565b6005815264191719171b60d91b6020820152604051918291602083526020830190610ad4565b0390f35b50604036600319011261000e57600435610b6e816102a6565b6024356001600160401b03811161000e57610b8d9036906004016103d1565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929190610bc730851415611fd1565b610be460008051602061400f833981519152948286541614612032565b610bec6118fc565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610c225750506105c391506121cd565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610c79575b50610c665760405162461bcd60e51b8152806109906004820161217e565b6105c393610c749114612120565b612375565b610c9291925060203d81116109d0576109c18183610340565b9038610c48565b503461000e57600036600319011261000e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163003610cf45760405160008051602061400f8339815191528152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e57600036600319011261000e57610b51604051610d808161030a565b600481526376302e3160e01b6020820152604051918291602083526020830190610ad4565b503461000e57602036600319011261000e57602060ff610e0f600435610dca816102a6565b7f7a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb260005261012d845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b90815180825260208080930193019160005b828110610e3b575050505090565b835180516001600160a01b031686528201518583015260409094019392810192600101610e2d565b90815180825260208080930193019160005b828110610e83575050505090565b835185529381019392810192600101610e75565b90604060206103ec9360018060a01b0381511684520151918160208201520190610e63565b908082519081815260208091019281808460051b8301019501936000915b848310610eea5750505050505090565b9091929394958480610f08600193601f198682030187528a51610e97565b9801930193019194939290610eda565b908082519081815260208091019281808460051b8301019501936000915b848310610f465750505050505090565b9091929394958480610f93600193601f198682030187528a51858060a01b038151168252610f808482015160608087860152840190610e63565b9160408092015191818403910152610e63565b9801930193019194939290610f36565b906103ec916020815281516020820152602082015190610fd161010092836040840152610120830190610e1b565b9160e061104b611038611024611010610ffc60408a015198601f19998a8a83030160608b0152610e1b565b60608a0151898983030160808a0152610ebc565b6080890151888883030160a0890152610ebc565b60a0880151878783030160c0880152610ebc565b60c0870151868683030184870152610f18565b9401519282850301910152610f18565b503461000e57602036600319011261000e57610b5160e060405161107e816102ce565b60008152606091818360208194015282604082015282808201528260808201528260a08201528260c0820152015261113560076110bc60043561334e565b506110c5610361565b93815485526110d660018301613396565b60208601526110e760028301613396565b60408601526110f860038301613459565b9085015261110860048201613459565b608085015261111960058201613459565b60a085015261112a600682016134d4565b60c0850152016134d4565b60e082015260405191829182610fa3565b503461000e576111a361115836610479565b946000979697949194939293549761118760ff8a60081c1615809a819b611221575b8115611201575b50612714565b8861119a600160ff196000541617600055565b6111e85761282f565b6111a957005b6111b961ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6111fc61010061ff00196000541617600055565b61282f565b303b15915081611213575b5038611181565b6001915060ff16143861120c565b600160ff821610915061117a565b503461000e57604036600319011261000e57602060ff610e0f602435611254816102a6565b60043560005261012d845260406000209060018060a01b0316600052602052604060002090565b503461000e5760208060031936011261000e576001600160401b039060043582811161000e573660238201121561000e576112c090369060248160040135910161039a565b916112c9611a7c565b825190811161138d575b60008051602061402f833981519152916112f18261056f85546125c7565b80601f831160011461132a575081929360009261131f575b50508160011b916000199060031b1c1916179055005b015190503880611309565b90601f19831694611339612601565b926000905b87821061137557505083600195961061135c575b505050811b019055005b015160001960f88460031b161c19169055388080611352565b8060018596829496860151815501950193019061133e565b6113956102b7565b6112d3565b503461000e57606036600319011261000e576004356113b8816102a6565b602435906113c4611b78565b6113cf60443561334e565b508054838110610a7357600784926113ed6105c396611484946135fa565b81556114568582866114516003830161144c8561140a85846137cf565b926004870193611441838861143c6002611424838b6137cf565b9c6114368585610a4c60018501613396565b01613396565b613d00565b86610a5c3093613459565b613459565b613d79565b61146c858561146760058501613459565b613e45565b61147e853086610a6e600686016134d4565b016134d4565b613f3f565b503461000e57600036600319011261000e57602060405160008152f35b503461000e57600036600319011261000e5760008051602061400f833981519152546040516001600160a01b039091168152602090f35b6020906001600160401b0381116114f6575b60051b0190565b6114fe6102b7565b6114ef565b81601f8201121561000e5780359161151a836114dd565b926115286040519485610340565b808452602092838086019260051b82010192831161000e578301905b828210611552575050505090565b81358152908301908301611544565b503461000e5760a036600319011261000e5761157e6004356102a6565b6115896024356102a6565b6001600160401b0360443581811161000e576115a9903690600401611503565b5060643581811161000e576115c2903690600401611503565b5060843590811161000e576115db9036906004016103d1565b5060405163bc197c8160e01b8152602090f35b503461000e57608036600319011261000e576004356001600160401b0360443581811161000e57611623903690600401610449565b909160643590811161000e5761163d903690600401610449565b93906116476118fc565b61166c60249161166461165a843561334e565b50966116646126bc565b96369161357c565b90611678838654612471565b8555611695600386019261168c8885613661565b60048701613661565b60016116a2818701613396565b916000825b6116d1575b505050506116c490836105c39684610a5c3094613459565b610a6e60063094016134d4565b835181101561176e5761176890611763886001600160a01b036116f4848961332c565b51511661175e60206117506117168d8361170e8a8f61332c565b510151612452565b604080516323b872dd60e01b948101949094526001600160a01b039096168a84019081523060208201529586015290938491606090910190565b03601f198101845283610340565b613913565b61331c565b826116a7565b6116ac565b503461000e57604036600319011261000e576105c3602435600435611797826102a6565b8060005261012d6020526117b2600160406000200154611c74565b611f3b565b503461000e5760008060031936011261189f57604051908060008051602061402f833981519152908154906117eb826125c7565b8086529260019280841690811561187b5750600114611821575b610b518661181581880382610340565b60405191829182610af9565b815292507feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c6975b82841061186357505050810160200161181582610b5138611805565b80546020858701810191909152909301928101611847565b60ff1916602088015250506040850193506118159250849150610b51905038611805565b80fd5b503461000e5760a036600319011261000e576118bf6004356102a6565b6118ca6024356102a6565b6084356001600160401b03811161000e576118e99036906004016103d1565b5060405163f23a6e6160e01b8152602090f35b6119046126bc565b6001600160a01b03811660009081527fa581b17bfc4d6578e300cafbf34fd2dc1fef0270d8c73f88a99dcde2859a6639602052604090205460ff16156119475750565b611959906001600160a01b0316612548565b60006119636120cb565b90603061196f8361249c565b53607861197b836124b2565b5360415b60018111611a2d576109906037611a1586611a078761199e88156124fd565b611a016040519586947f416363657373436f6e74726f6c3a206163636f756e742000000000000000000060208701526119e0815180926020858a019101610a9f565b8501016011907001034b99036b4b9b9b4b733903937b6329607d1b81520190565b90611d39565b03601f198101835282610340565b60405162461bcd60e51b815291829160048301610af9565b9080600f611a6a92166010811015611a6f575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a611a6084866124c3565b5360041c916124e2565b61197f565b611a77612485565b611a40565b611a846126bc565b6001600160a01b03811660009081527f8c7d8a69506b3476b9e698ac476ce2280bb980a877bac058951903a1c3a17c8060205260409020547f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c15919060ff1615611aeb575050565b611afd906001600160a01b0316612548565b90611b066120cb565b906030611b128361249c565b536078611b1e836124b2565b5360415b60018111611b41576109906037611a1586611a078761199e88156124fd565b9080600f611b7392166010811015611a6f576f181899199a1a9b1b9c1cb0b131b232b360811b901a611a6084866124c3565b611b22565b611b806126bc565b6001600160a01b03811660009081527fccea56354525642427746d92f0e34afbcfef91f58ab9ff7966a90f07ea4df21e60205260409020547fe5702506dab6ef48f05611b8b328969e4387aeabcb2a2f3be2364ac79d4c6b24919060ff1615611be7575050565b611bf9906001600160a01b0316612548565b90611c026120cb565b906030611c0e8361249c565b536078611c1a836124b2565b5360415b60018111611c3d576109906037611a1586611a078761199e88156124fd565b9080600f611c6f92166010811015611a6f576f181899199a1a9b1b9c1cb0b131b232b360811b901a611a6084866124c3565b611c1e565b611c7c6126bc565b600082815261012d602090815260408083206001600160a01b038516845290915290205460ff1615611cac575050565b611cbe906001600160a01b0316612548565b90611cc76120cb565b906030611cd38361249c565b536078611cdf836124b2565b5360415b60018111611d02576109906037611a1586611a078761199e88156124fd565b9080600f611d3492166010811015611a6f576f181899199a1a9b1b9c1cb0b131b232b360811b901a611a6084866124c3565b611ce3565b90611d4c60209282815194859201610a9f565b0190565b6001600160a01b03811660009081527f8c7d8a69506b3476b9e698ac476ce2280bb980a877bac058951903a1c3a17c80602052604090207f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c159061012d9060ff905b541615611dbd57505050565b6000828152602091825260408082206001600160a01b038616835290925220805460ff191660011790556001600160a01b0380611df86126bc565b169216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d6000604051a4565b6001600160a01b03811660009081527fa581b17bfc4d6578e300cafbf34fd2dc1fef0270d8c73f88a99dcde2859a6639602052604081205461012d9060ff1615611e6e57505050565b818052602090815260408083206001600160a01b038516600090815292529020805460ff191660011790556001600160a01b0380611eaa6126bc565b169216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d81604051a4565b6001600160a01b03811660009081527fccea56354525642427746d92f0e34afbcfef91f58ab9ff7966a90f07ea4df21e602052604090207fe5702506dab6ef48f05611b8b328969e4387aeabcb2a2f3be2364ac79d4c6b249061012d9060ff90611db1565b600081815261012d602081815260408084206001600160a01b03871685529091529091205460ff16611f6c57505050565b6000828152602091825260408082206001600160a01b038616835290925220805460ff191690556001600160a01b0380611fa46126bc565b169216907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b6000604051a4565b15611fd857565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561203957565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b60405190600060208301928084106001600160401b038511176120be575b8360405281815292369037565b6120c66102b7565b6120b1565b60405190608082018281106001600160401b038211176120f7575b604052604282526060366020840137565b6120ff6102b7565b6120e6565b9081602091031261000e575190565b506040513d6000823e3d90fd5b1561212757565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b60809060208152602e60208201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960408201526d6f6e206973206e6f74205555505360901b60608201520190565b803b156122025760008051602061400f83398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b612266816121cd565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a282511580159061236d575b6122ac57505050565b813b1561231c57506000828192602061231995519201905af46122cd6123cb565b604051916122da83610325565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b60408401526123fb565b50565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b5060006122a3565b61237e816121cd565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a28251158015906123c3576122ac57505050565b5060016122a3565b3d156123f6573d906123dc82610370565b916123ea6040519384610340565b82523d6000602084013e565b606090565b90919015612407575090565b8151156124175750805190602001fd5b60405162461bcd60e51b815260206004820152908190610990906024830190610ad4565b50634e487b7160e01b600052601160045260246000fd5b8060001904821181151516612465570290565b61246d61243b565b0290565b8119811161247d570190565b611d4c61243b565b50634e487b7160e01b600052603260045260246000fd5b6020908051156124aa570190565b611d4c612485565b6021908051600110156124aa570190565b9060209180518210156124d557010190565b6124dd612485565b010190565b80156124f0575b6000190190565b6124f861243b565b6124e9565b1561250457565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b6040519061255582610325565b602a82526040366020840137603061256c8361249c565b536078612578836124b2565b536029905b60018211612590576103ec9150156124fd565b80600f6125c192166010811015611a6f576f181899199a1a9b1b9c1cb0b131b232b360811b901a611a6084866124c3565b9061257d565b90600182811c921680156125f7575b60208310146125e157565b634e487b7160e01b600052602260045260246000fd5b91607f16916125d6565b60008051602061402f8339815191526000527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c69790565b818110612642575050565b60008155600101612637565b90601f821161265b575050565b61036e9160008051602061402f8339815191526000527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c697906020601f840160051c830193106126b2575b601f0160051c0190612637565b90915081906126a5565b6014361015806126dc575b156126d85736601319013560601c90565b3390565b503360009081527f63a294b57daa47190712cf6f633f8c5ed2e21402a46d4619c4e5eb122af24b53602052604090205460ff166126c7565b1561271b57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b1561277e57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b92916127e2826114dd565b916127f06040519384610340565b829481845260208094019160051b810192831161000e57905b8282106128165750505050565b8380918335612824816102a6565b815201910190612809565b9190612841919796939597369161039a565b61284a82611d50565b80516001600160401b038111612918575b60008051602061402f833981519152916128798261056f85546125c7565b60209081601f84116001146128bb575092826105b69361036e9a9b96936105bd98966000926105c55750508160011b916000199060031b1c1916179055612925565b9190601f1984166128ca612601565b936000905b8282106129005750509361036e9a9b96936105bd989693600193836105b6981061061557505050811b019055612925565b806001869782949787015181550196019401906128cf565b6129206102b7565b61285b565b61292e90611e25565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b61294c5750565b803b1561000e5760405163a41e7d5160e01b815230600482015263054fd4d560e41b6024820152600090818160448183875af18015612a0a575b6129f7575b50813b1561189f576040516329965a1d60e01b8152306004820181905260016354fd4d5160e01b0360248301526044820152918290606490829084905af180156129ea575b6129d75750565b806129e461036e926102f7565b80610a94565b6129f2612113565b6129d0565b806129e4612a04926102f7565b3861298b565b612a12612113565b612986565b90929192600091825490612a3160ff600893841c16612777565b600160401b8311612bbe575b6101c3805490848155818510612ae8575b50506101c3600052807fc08b2039d69be55fac1e8db8384942c79c1bde7a040f255238fc100e10c8c1d09085925b858410612ac3575050505050505b8251811015612abe5780611763612ab4612aa7612ab9948761332c565b516001600160a01b031690565b611ed6565b612a8a565b509050565b84602082612adc612ad660019587612bcb565b8761325f565b01930193019291612a7c565b6001906001600160fd1b038084118316612bb1575b86118216612ba4575b8652600390847fc08b2039d69be55fac1e8db8384942c79c1bde7a040f255238fc100e10c8c1d093831b84019387841b015b848110612b4757505050612a4e565b888155612b55838201612be0565b612b6160028201612be0565b612b6c848201612ca5565b612b7860048201612ca5565b612b8460058201612d09565b612b9060068201612e07565b612b9c60078201612e07565b018590612b38565b612bac61243b565b612b06565b612bb961243b565b612afd565b612bc66102b7565b612a3d565b90359060fe198136030182121561000e570190565b80549060009081815582612bf357505050565b6001906001600160ff1b0384118216612c32575b82526020822092811b8301925b838110612c215750505050565b808360029255838382015501612c14565b612c3a61243b565b612c07565b80546000825580612c4e575050565b61036e91600052602060002090810190612637565b90600160401b8111612c98575b815490808355818110612c8257505050565b61036e9260005260206000209182019101612637565b612ca06102b7565b612c70565b805490600080825582612cb757505050565b6001916001600160ff1b0384118316612cfc575b81526020812092821b8301925b838110612ce55750505050565b808260029255612cf6848201612c3f565b01612cd8565b612d0461243b565b612ccb565b805490600080825582612d1b57505050565b6001916001600160ff1b0384118316612d60575b81526020812092821b8301925b838110612d495750505050565b808260029255612d5a848201612c3f565b01612d3c565b612d6861243b565b612d2f565b600160401b8211612dfa575b805490828155818310612d8b57505050565b6001916001600160ff1b038082118416612ded575b84118316612de0575b60009182526020822090831b810193831b015b838110612dc95750505050565b808260029255612dda848201612c3f565b01612dbc565b612de861243b565b612da9565b612df561243b565b612da0565b612e026102b7565b612d79565b80549060009081815582612e1a57505050565b6001907f555555555555555555555555555555555555555555555555555555555555555584118216612e87575b8252602082209160039384028301925b838110612e65575050505050565b8082869255612e75848201612c3f565b612e8160028201612c3f565b01612e57565b612e8f61243b565b612e47565b90600160401b8111612f49575b815491818155828210612eb357505050565b6001907f55555555555555555555555555555555555555555555555555555555555555558085118316612f3c575b83118216612f2f575b60009081526020812060039485028101938502015b838110612f0d575050505050565b8082869255612f1d848201612c3f565b612f2960028201612c3f565b01612eff565b612f3761243b565b612eea565b612f4461243b565b612ee1565b612f516102b7565b612ea1565b903590601e198136030182121561000e57018035906001600160401b03821161000e57602001918160061b3603831361000e57565b90600160401b8311613071575b8154838355808410613005575b5060009182526020808320915b848410612fc0575050505050565b6002604082612ff160019435612fd5816102a6565b87546001600160a01b0319166001600160a01b03909116178755565b848101358487015501930193019291612fb2565b60016001600160ff1b038083118216613064575b85118116613057575b6000908482526020822092811b83019286821b015b83811061304657505050612fa5565b808360029255838382015501613037565b61305f61243b565b613022565b61306c61243b565b613019565b6130796102b7565b612f98565b903590601e198136030182121561000e57018035906001600160401b03821161000e57602001918160051b3603831361000e57565b906130be8383612c63565b906000526020806000206000925b8484106130da575050505050565b600183828293358555019201930192906130cc565b91906130fb8284612d6d565b8060009384526020938481209181935b85851061311b5750505050505050565b8035603e1983360301811215613198578790830161313d8135612fd5816102a6565b600190613150828801918481019061307e565b919061315c8383612c63565b9087528387209087905b8382106131845750505050506002906001920194019401939261310b565b803583558c95928501929185019101613166565b8380fd5b9190916131a98282612e94565b8260009182526020918281209181955b8587106131c95750505050505050565b8035605e198336030181121561319857859083016131eb8135612fd5816102a6565b60018087016131fc8484018461307e565b91906132088383612c63565b9088528488209088905b83821061324b5750505050509060019261323f613235846040600396019061307e565b9060028a016130b3565b019401960195926131b9565b803583558b96928501929185019101613212565b60079061331361036e938035835561328761327d6020830183612f56565b9060018601612f8b565b6132a16132976040830183612f56565b9060028601612f8b565b6132bb6132b1606083018361307e565b90600386016130ef565b6132d56132cb608083018361307e565b90600486016130ef565b6132ef6132e560a083018361307e565b90600586016130ef565b6133096132ff60c083018361307e565b906006860161319c565b60e081019061307e565b9290910161319c565b600190600019811461247d570190565b6020918151811015613341575b60051b010190565b613349612485565b613339565b6101c38054821015613389575b60005260031b7fc08b2039d69be55fac1e8db8384942c79c1bde7a040f255238fc100e10c8c1d00190600090565b613391612485565b61335b565b9081546133a2816114dd565b926040936133b285519182610340565b828152809460208092019260005281600020906000935b8585106133d857505050505050565b60028460019284516133e98161030a565b848060a01b03875416815284870154838201528152019301940193916133c9565b9060405191828154918282526020928383019160005283600020936000905b82821061343f5750505061036e92500383610340565b855484526001958601958895509381019390910190613429565b908154613465816114dd565b9260409361347585519182610340565b828152809460208092019260005281600020906000935b85851061349b57505050505050565b60028460019284516134ac8161030a565b848060a01b0387541681526134c285880161340a565b8382015281520193019401939161348c565b9081546134e0816114dd565b926040936134f085519182610340565b828152809460208092019260005281600020906000935b85851061351657505050505050565b6003846001928451606081018181106001600160401b0382111761356f575b8652848060a01b03875416815261354d85880161340a565b8382015261355d6002880161340a565b86820152815201930194019391613507565b6135776102b7565b613535565b92919092613589846114dd565b916135976040519384610340565b829480845260208094019060051b83019282841161000e5780915b8483106135c157505050505050565b82356001600160401b03811161000e5786916135e08684938601611503565b8152019201916135b2565b600181106124f0576000190190565b818110613605570390565b61360d61243b565b0390565b805482101561362e575b60005260206000209060011b0190600090565b613636612485565b61361b565b8054821015613654575b60005260206000200190600090565b61365c612485565b613645565b90600080935b835485101561370c57815b61367c868561332c565b51518110156136fb576136e9906136938787613611565b506136cc6001809201916136b1846136ab8c8b61332c565b5161332c565b5192805491600160401b8310156136ee575b8201815561363b565b819291549060031b600019811b9283911b1691191617905561331c565b613672565b6136f66102b7565b6136c3565b50936137069061331c565b93613667565b9350505050565b9061371d826114dd565b61372a6040519182610340565b828152809261373b601f19916114dd565b019060005b82811061374c57505050565b806060602080938501015201613740565b90613767826114dd565b6137746040519182610340565b8281528092613785601f19916114dd565b0190602036910137565b80549081156137b957600019918201916137a9838361363b565b909182549160031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b6137d98154613713565b90600091825b8254811015613894576137f18561375d565b6137fb828461332c565b52613806818361332c565b506138118184613611565b50600180910154855b8781106138325750505061382d9061331c565b6137df565b61388f9061386b613861613846878a613611565b508661385a85613855896135eb565b6135fa565b910161363b565b90549060031b1c90565b613879826136ab888a61332c565b5261176384613888878a613611565b500161378f565b61381a565b509250505090565b9081602091031261000e5751801515810361000e5790565b156138bb57565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6040516001600160a01b03919091169161392c8261030a565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b156139a3576000828192828761397e9796519301915af16139786123cb565b906123fb565b8051908161398b57505050565b8261036e9361399e93830101910161389c565b6138b4565b60405162461bcd60e51b815260048101859052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9092919260005b8251811015613a5e57613a59906117636001600160a01b03613a11838761332c565b51511660209061175e613a29878461170e888c61332c565b60405163a9059cbb60e01b948101949094526001600160a01b038b16602485015260448401528260648101611750565b6139ef565b5050509050565b613a7d60409295949395606083526060830190610e97565b9460208201520152565b9493919492909260005b8151811015613bb75784613aa5828961332c565b515103613b815760005b858110613ac55750613ac09061331c565b613a91565b613af2613ae6613ae6613ad8858761332c565b51516001600160a01b031690565b6001600160a01b031690565b90613b01816136ab858c61332c565b51823b1561000e57604051632142170760e11b81526001600160a01b038088166004830152881660248201526044810191909152613b5c926000908290818381606481015b03925af18015613b74575b613b61575b5061331c565b613aaf565b806129e4613b6e926102f7565b38613b56565b613b7c612113565b613b51565b610990613b9b82613b948a94899661332c565b519361332c565b515192604051938493639096f90560e01b855260048501613a65565b50505050509050565b93906103ec9593613bf291613c009460018060a01b03809216885216602087015260a0604087015260a0860190610e63565b908482036060860152610e63565b916080818403910152610ad4565b939190936000905b8051821015613cf857602092613c3984613c30858561332c565b5101515161375d565b9460005b85613c48868661332c565b51015151811015613c8d5780613c788a613c72613c88948a613c6a8b8b61332c565b51015161332c565b51612452565b613c82828a61332c565b5261331c565b613c3d565b50929094919350613ca7613ae6613ae6613ad8848861332c565b91604080613cb5848861332c565b510151613cc0612093565b94803b1561000e578960008a613b46613cf09983975198899788968795631759616b60e11b875260048701613bc0565b909291613c16565b505050915050565b9092919260005b8251811015613a5e57613d23613ae6613ae6613ad8848761332c565b90613d3483602061170e848861332c565b823b1561000e576040516340c10f1960e01b81526001600160a01b03881660048201526024810191909152613d7492600090829081838160448101613b46565b613d07565b9293906000915b8451831015613e3d5781613d94848661332c565b515103613e2a5760005b613da8848661332c565b5151811015613e1957613dc4613ae6613ae6613ad8878a61332c565b90613dd3816136ab878961332c565b51823b1561000e576040516340c10f1960e01b81526001600160a01b038a1660048201526024810191909152613e1492600090829081838160448101613b46565b613d9e565b5091613e249061331c565b91613d80565b509281613b9461099093613b9b9361332c565b945050505050565b9291600090815b8551811015613ef357825b848110613e6d5750613e689061331c565b613e4c565b613ec390613e84613ae6613ae6613ad8868c61332c565b6040516335313c2160e11b81526001600160a01b03861660048201526020918290829060249082908b905af18015613ee6575b613ec8575b505061331c565b613e57565b81613ede92903d106109d0576109c18183610340565b503880613ebc565b613eee612113565b613eb7565b505050509050565b92613f236103ec9593613f319360018060a01b03168652608060208701526080860190610e63565b908482036040860152610e63565b916060818403910152610ad4565b92906000935b805185101561400757602090613f5f82613c30888461332c565b9360005b83613f6e898561332c565b51015151811015613f9f5780613f9086613c72613f9a9488613c6a8e8a61332c565b613c82828961332c565b613f63565b509590939150613fb8613ae6613ae6613ad8848861332c565b604080613fc5848861332c565b51015193613fd1612093565b92803b1561000e576140009560008a613b4682965197889687958694630fbfeffd60e11b865260048601613efb565b9391613f45565b505091505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc59c86eba0f8c3c9659b86fb2776edca2ff990d1509243e9705ae43a6831558c6a2646970667358221220f490b25d1209f968400930a67f846e773290d6e6019e6ade0128025bc879b23364736f6c634300080e0033",
  "devdoc": {
    "details": "Abstract contract with types and utilities that will be used by many (if not all) Plugins contracts",
    "kind": "dev",
    "methods": {
      "canImplementInterfaceForAddress(bytes32,address)": {
        "details": "See {IERC1820Implementer-canImplementInterfaceForAddress}."
      },
      "contractURI()": {
        "details": "Returns collection-wide URI-accessible metadata"
      },
      "deposit(uint256,uint256,uint256[][],uint256[][])": {
        "details": "Used to deposit configuration outputs.",
        "params": {
          "amount": "How many more times the configuration should be craftable",
          "erc721TokenIdsMint": "2D-array mint ERC721s ```",
          "erc721TokenIdsTransfer": "2D-array transfers ERC721s"
        }
      },
      "getBasket(uint256)": {
        "details": "Returns all inputs",
        "params": {
          "basketIdx": "Index of selected input basket"
        }
      },
      "getImplementation()": {
        "details": "Returns the implementation address."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,string,(uint256,(address,uint256)[],(address,uint256)[],(address,uint256[])[],(address,uint256[])[],(address,uint256[])[],(address,uint256[],uint256[])[],(address,uint256[],uint256[])[])[],address[])": {
        "details": "Initializes contract (replaces constructor in proxy pattern)",
        "params": {
          "_admin": "owner, can control outputs on contract",
          "_initContractURI": "contract uri",
          "_outputBaskets": "outputs for configuration",
          "_routers": "trusted routers that can call the output function"
        }
      },
      "isTrustedForwarder(address)": {
        "details": "Determine is an address a GSN trusted forwarder.",
        "params": {
          "forwarder": "address to query"
        },
        "returns": {
          "_0": "OpenGSN trusted forwarder status"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "output(address,uint256,uint256)": {
        "details": "Outputs assets.",
        "params": {
          "amount": "How many times to craft",
          "basketIdx": "Index of selected output basket",
          "to": "Receiver"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "proxyInitialize(address,string,(uint256,(address,uint256)[],(address,uint256)[],(address,uint256[])[],(address,uint256[])[],(address,uint256[])[],(address,uint256[],uint256[])[],(address,uint256[],uint256[])[])[],address[])": {
        "details": "See initialize. Uses onlyInitializing modifier, enabling running while initializing."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setContractURI(string)": {
        "details": "Set contract uri"
      },
      "supportsInterface(bytes4)": {
        "details": "ERC165 Support",
        "params": {
          "interfaceId": "XOR of the external functions of the interface"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "version()": {
        "details": "OwlProtocol contract version. Used to determine compatibility interoperable with other Owl contracts."
      },
      "versionRecipient()": {
        "details": "Returns OpenGSN contract version (used for compatibility checks)"
      },
      "withdraw(uint256,uint256)": {
        "details": "Used to withdraw configuration outputs out of contract to the caller. Will also decrease `craftableAmount`",
        "params": {
          "amount": "How many sets of outputs should be withdrawn",
          "basketIdx": "Index of selected output basket"
        }
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1451,
        "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1454,
        "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6973,
        "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1433,
        "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7523,
        "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8038,
        "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3801,
        "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3747,
        "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 426,
        "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
        "label": "_roles",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)421_storage)"
      },
      {
        "astId": 725,
        "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1730,
        "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8071,
        "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "401",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8117,
        "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
        "label": "__gap",
        "offset": 0,
        "slot": "402",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13336,
        "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
        "label": "outputBaskets",
        "offset": 0,
        "slot": "451",
        "type": "t_array(t_struct(AssetBasketOutput)13707_storage)dyn_storage"
      },
      {
        "astId": 13340,
        "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
        "label": "__gap",
        "offset": 0,
        "slot": "452",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(AssetBasketOutput)13707_storage)dyn_storage": {
        "base": "t_struct(AssetBasketOutput)13707_storage",
        "encoding": "dynamic_array",
        "label": "struct AssetBasketOutput[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AssetERC1155)13629_storage)dyn_storage": {
        "base": "t_struct(AssetERC1155)13629_storage",
        "encoding": "dynamic_array",
        "label": "struct AssetERC1155[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AssetERC20)13614_storage)dyn_storage": {
        "base": "t_struct(AssetERC20)13614_storage",
        "encoding": "dynamic_array",
        "label": "struct AssetERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AssetERC721)13620_storage)dyn_storage": {
        "base": "t_struct(AssetERC721)13620_storage",
        "encoding": "dynamic_array",
        "label": "struct AssetERC721[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)421_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)421_storage"
      },
      "t_struct(AssetBasketOutput)13707_storage": {
        "encoding": "inplace",
        "label": "struct AssetBasketOutput",
        "members": [
          {
            "astId": 13678,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "outputableAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13682,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "erc20Transfer",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(AssetERC20)13614_storage)dyn_storage"
          },
          {
            "astId": 13686,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "erc20Mint",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(AssetERC20)13614_storage)dyn_storage"
          },
          {
            "astId": 13690,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "erc721Transfer",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(AssetERC721)13620_storage)dyn_storage"
          },
          {
            "astId": 13694,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "erc721Mint",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_struct(AssetERC721)13620_storage)dyn_storage"
          },
          {
            "astId": 13698,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "erc721MintAutoId",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_struct(AssetERC721)13620_storage)dyn_storage"
          },
          {
            "astId": 13702,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "erc1155Transfer",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_struct(AssetERC1155)13629_storage)dyn_storage"
          },
          {
            "astId": 13706,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "erc1155Mint",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(AssetERC1155)13629_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(AssetERC1155)13629_storage": {
        "encoding": "inplace",
        "label": "struct AssetERC1155",
        "members": [
          {
            "astId": 13622,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "contractAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13625,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "amounts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 13628,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "tokenIds",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(AssetERC20)13614_storage": {
        "encoding": "inplace",
        "label": "struct AssetERC20",
        "members": [
          {
            "astId": 13611,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "contractAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13613,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AssetERC721)13620_storage": {
        "encoding": "inplace",
        "label": "struct AssetERC721",
        "members": [
          {
            "astId": 13616,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "contractAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13619,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "tokenIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)421_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 418,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 420,
            "contract": "contracts/plugins/AssetRouter/AssetRouterOutput.sol:AssetRouterOutput",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}