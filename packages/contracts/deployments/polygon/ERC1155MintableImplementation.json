{
  "address": "0x9f68CBF3D0ff30004970E51839742129166394f8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interfaceHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canImplementInterfaceForAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_initContractURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_gsnForwarder",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_initContractURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_gsnForwarder",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "proxyInitialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newuri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "2fe98e12c0031ec2a7dec3df9237bffc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canImplementInterfaceForAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_initContractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_gsnForwarder\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feeNumerator\",\"type\":\"uint96\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_initContractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_gsnForwarder\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feeNumerator\",\"type\":\"uint96\"}],\"name\":\"proxyInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"canImplementInterfaceForAddress(bytes32,address)\":{\"details\":\"See {IERC1820Implementer-canImplementInterfaceForAddress}.\"},\"contractURI()\":{\"details\":\"Returns collection-wide URI-accessible metadata\"},\"getImplementation()\":{\"details\":\"Returns the implementation address.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,string,address,string,address,uint96)\":{\"details\":\"Initializes an ERC1155Mintable contract\",\"params\":{\"_admin\":\"admin for contract\",\"_feeNumerator\":\"numerator of royalty fee percentage (numerator / 10000)\",\"_feeReceiver\":\"address of receiver of royalty fees\",\"_gsnForwarder\":\"GSN Trusted forwarder\",\"_initContractURI\":\"uri for contract metadata description\",\"_uri\":\"URI for tokens\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isTrustedForwarder(address)\":{\"details\":\"Determine is an address a GSN trusted forwarder.\",\"params\":{\"forwarder\":\"address to query\"},\"returns\":{\"_0\":\"OpenGSN trusted forwarder status\"}},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"Allows MINTER_ROLE to mint NFTs\",\"params\":{\"amount\":\"to mint\",\"data\":\"for hooks\",\"id\":\"tokenId value\",\"to\":\"address to\"}},\"mintBatch(address,uint256[],uint256[],bytes)\":{\"details\":\"Allows caller to mint NFTs (safeMint)\",\"params\":{\"amounts\":\"to mint\",\"data\":\"for hooks\",\"ids\":\"id values\",\"to\":\"address to\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"Set contract uri\"},\"setDefaultRoyalty(address,uint96)\":{\"details\":\"Exposing `_setDefaultRoyalty`\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"details\":\"exposing `_setTokenRoyalty`\"},\"setURI(string)\":{\"details\":\"Allows setting the uri\",\"params\":{\"newuri\":\"set the baseURI value.\"}},\"supportsInterface(bytes4)\":{\"details\":\"ERC165 Support\",\"params\":{\"interfaceId\":\"XOR of the external functions of the interface\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"},\"version()\":{\"details\":\"OwlProtocol contract version. Used to determine compatibility interoperable with other Owl contracts.\"},\"versionRecipient()\":{\"details\":\"Returns OpenGSN contract version (used for compatibility checks)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(address,uint256,uint256,bytes)\":{\"notice\":\"Must have MINTER_ROLE\"},\"mintBatch(address,uint256[],uint256[],bytes)\":{\"notice\":\"Must have MINTER_ROLE\"},\"setURI(string)\":{\"notice\":\"Must have URI_ROLE role!\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/assets/ERC1155/ERC1155Mintable.sol\":\"ERC1155Mintable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa8ff557539dcfed5706eddde2aa929e06bb1764e71aa8c1048a78970bf3ca37d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xe9208ac0602174f0ed30fb10c6292193308424dfa375a8270027d65878d4a812\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xf5dc00c0e6a12685e1510ea48ff7aac7b7f1c54887477938b6fa4d58bca97277\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\\n    function __ERC2981_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC2981_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981Upgradeable\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x1ad46ec868f3cbf4331949daad82a6b2d846f2f3944cf0d53805f2296c30593b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC1820ImplementerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC1820Implementer.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1820ImplementerUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC1820Implementer} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\\n * declare their willingness to be implementers.\\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\\n * registration to be complete.\\n */\\ncontract ERC1820ImplementerUpgradeable is Initializable, IERC1820ImplementerUpgradeable {\\n    function __ERC1820Implementer_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1820Implementer_init_unchained() internal onlyInitializing {\\n    }\\n    bytes32 private constant _ERC1820_ACCEPT_MAGIC = keccak256(\\\"ERC1820_ACCEPT_MAGIC\\\");\\n\\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bytes32)\\n    {\\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\\n    }\\n\\n    /**\\n     * @dev Declares the contract as willing to be an implementer of\\n     * `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer} and\\n     * {IERC1820Registry-interfaceHash}.\\n     */\\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\\n        _supportedInterfaces[interfaceHash][account] = true;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2666448e505df89f06bc8b5e8ae83ed3b5411e54fb69694510ec3620269534b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820ImplementerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Implementer.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for an ERC1820 implementer, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\\n * Used by contracts that will be registered as implementers in the\\n * {IERC1820Registry}.\\n */\\ninterface IERC1820ImplementerUpgradeable {\\n    /**\\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\\n     * implements `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xce35b9f17b74b88eb612b1ae727a25e3d91129c254beba840e9de2006b872978\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/introspection/IERC1820Registry.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820RegistryUpgradeable {\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc4b50ac2351fc9eb8e89b0a039d794db665e7e93bbc83c70da0e683bfc801971\",\"license\":\"MIT\"},\"contracts/assets/ERC1155/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\n\\nimport {IERC1155Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\\nimport {ERC1155Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol';\\nimport {ERC1155BurnableUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol';\\n\\nimport {OwlBase} from '../../common/OwlBase.sol';\\nimport {BaseURI} from '../../common/BaseURI.sol';\\nimport {ERC2981Setter} from '../common/ERC2981Setter.sol';\\nimport {IERC2981Setter} from '../common/IERC2981Setter.sol';\\n\\nabstract contract ERC1155Base is ERC1155BurnableUpgradeable, OwlBase, ERC2981Setter {\\n    bytes32 private constant URI_ROLE = keccak256('URI_ROLE');\\n\\n    //https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private __gap;\\n\\n    function __ERC1155Base_init(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        string memory _uri,\\n        address _feeReceiver,\\n        uint96 _feeNumerator\\n    ) internal {\\n        __ContractURI_init_unchained(_admin, _initContractURI);\\n        __RouterReceiver_init_unchained(_gsnForwarder);\\n        __OwlBase_init_unchained(_admin);\\n\\n        __ERC1155_init_unchained(_uri);\\n        __ERC2981Setter_init_unchained(_admin, _feeReceiver, _feeNumerator);\\n        __ERC1155Base_init_unchained(_admin);\\n    }\\n\\n    function __ERC1155Base_init_unchained(address _uriRole) internal {\\n        _grantRole(URI_ROLE, _uriRole);\\n        if (AddressUpgradeable.isContract(ERC1820_REGISTRY)) {\\n            registry.updateERC165Cache(address(this), type(IERC2981Setter).interfaceId);\\n            registry.updateERC165Cache(address(this), type(IERC1155Upgradeable).interfaceId);\\n            registry.setInterfaceImplementer(address(this), type(IERC2981Setter).interfaceId | ONE, address(this));\\n            registry.setInterfaceImplementer(address(this), type(IERC1155Upgradeable).interfaceId | ONE, address(this));\\n        }\\n    }\\n\\n    /**\\n     * @notice Must have URI_ROLE role!\\n     * @dev Allows setting the uri\\n     * @param newuri set the baseURI value.\\n     */\\n    function setURI(string calldata newuri) public onlyRole(URI_ROLE) {\\n        _setURI(newuri);\\n    }\\n\\n    /**\\n     * @notice the following 3 functions are all required for OpenGSN integration\\n     */\\n    function _msgSender() internal view override(OwlBase, ContextUpgradeable) returns (address) {\\n        return OwlBase._msgSender();\\n    }\\n\\n    function _msgData() internal view override(OwlBase, ContextUpgradeable) returns (bytes calldata) {\\n        return OwlBase._msgData();\\n    }\\n\\n    /**\\n     * @inheritdoc OwlBase\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OwlBase, ERC1155Upgradeable, ERC2981Setter)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf21788cb0793ebe3b35f762a1818e77af5bc448cb9ab73e9d384ed90df42d310\",\"license\":\"MIT\"},\"contracts/assets/ERC1155/ERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\n\\nimport {ERC1155Base} from './ERC1155Base.sol';\\nimport {IERC1155Mintable} from './IERC1155Mintable.sol';\\n\\ncontract ERC1155Mintable is ERC1155Base, IERC1155Mintable {\\n    bytes32 private constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n\\n    //https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private __gap;\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev Initializes an ERC1155Mintable contract\\n     * @param _admin admin for contract\\n     * @param _initContractURI uri for contract metadata description\\n     * @param _gsnForwarder GSN Trusted forwarder\\n     * @param _uri URI for tokens\\n     * @param _feeReceiver address of receiver of royalty fees\\n     * @param _feeNumerator numerator of royalty fee percentage (numerator / 10000)\\n     */\\n    function initialize(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        string memory _uri,\\n        address _feeReceiver,\\n        uint96 _feeNumerator\\n    ) external initializer {\\n        __ERC1155Mintable_init(_admin, _initContractURI, _gsnForwarder, _uri, _feeReceiver, _feeNumerator);\\n    }\\n\\n    function proxyInitialize(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        string memory _uri,\\n        address _feeReceiver,\\n        uint96 _feeNumerator\\n    ) external onlyInitializing {\\n        __ERC1155Mintable_init(_admin, _initContractURI, _gsnForwarder, _uri, _feeReceiver, _feeNumerator);\\n    }\\n\\n    function __ERC1155Mintable_init(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        string memory _uri,\\n        address _feeReceiver,\\n        uint96 _feeNumerator\\n    ) internal {\\n        __ContractURI_init_unchained(_admin, _initContractURI);\\n        __RouterReceiver_init_unchained(_gsnForwarder);\\n        __OwlBase_init_unchained(_admin);\\n\\n        __ERC1155_init_unchained(_uri);\\n        __ERC2981Setter_init_unchained(_admin, _feeReceiver, _feeNumerator);\\n        __ERC1155Base_init_unchained(_admin);\\n        __ERC1155Mintable_init_unchained(_admin);\\n    }\\n\\n    function __ERC1155Mintable_init_unchained(address _minterRole) internal {\\n        _grantRole(MINTER_ROLE, _minterRole);\\n        if (AddressUpgradeable.isContract(ERC1820_REGISTRY)) {\\n            registry.updateERC165Cache(address(this), type(IERC1155Mintable).interfaceId);\\n            registry.setInterfaceImplementer(address(this), type(IERC1155Mintable).interfaceId | ONE, address(this));\\n        }\\n    }\\n\\n    /***** MINTING *****/\\n    /**\\n     * @inheritdoc IERC1155Mintable\\n     */\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public onlyRole(MINTER_ROLE) {\\n        _mint(to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Mintable\\n     */\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public onlyRole(MINTER_ROLE) {\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC1155Base\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC1155Mintable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xce1d039f34c298420722fb68be3732d2990581c27a8a73eedbe4f34f7b46ab6e\",\"license\":\"MIT\"},\"contracts/assets/ERC1155/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC1155Mintable {\\n    /**\\n     * @notice Must have MINTER_ROLE\\n     * @dev Allows MINTER_ROLE to mint NFTs\\n     * @param to address to\\n     * @param id tokenId value\\n     * @param amount to mint\\n     * @param data for hooks\\n     */\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @notice Must have MINTER_ROLE\\n     * @dev Allows caller to mint NFTs (safeMint)\\n     * @param to address to\\n     * @param ids id values\\n     * @param amounts to mint\\n     * @param data for hooks\\n     */\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xae47ff18df270681b730a59c96aa480341165dbbd0d68bfd18b4564615c8852d\",\"license\":\"MIT\"},\"contracts/assets/common/ERC2981Setter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {ERC2981Upgradeable} from '@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol';\\n\\nimport {IERC2981Setter} from './IERC2981Setter.sol';\\n\\n/**\\n * @dev ERC2981 with access control public functions\\n */\\nabstract contract ERC2981Setter is AccessControlUpgradeable, ERC2981Upgradeable, IERC2981Setter {\\n    bytes32 internal constant ROYALTY_ROLE = keccak256('ROYALTY_ROLE');\\n\\n    /**\\n     * @dev ERC2981Setter chained initialization\\n     * @param _royaltyRole write role\\n     * @param _royaltyReceiver initial royalty receiver\\n     * @param _feeNumerator fee numerator\\n     */\\n    function __ERC2981Setter_init(\\n        address _royaltyRole,\\n        address _royaltyReceiver,\\n        uint96 _feeNumerator\\n    ) internal {\\n        __ERC2981Setter_init_unchained(_royaltyRole, _royaltyReceiver, _feeNumerator);\\n    }\\n\\n    /**\\n     * @dev ERC2981Setter unchained initialization\\n     * @param _royaltyRole write role\\n     * @param _royaltyReceiver initial royalty receiver\\n     * @param _feeNumerator fee numerator\\n     */\\n    function __ERC2981Setter_init_unchained(\\n        address _royaltyRole,\\n        address _royaltyReceiver,\\n        uint96 _feeNumerator\\n    ) internal {\\n        _grantRole(ROYALTY_ROLE, _royaltyRole);\\n        _setDefaultRoyalty(_royaltyReceiver, _feeNumerator);\\n    }\\n\\n    /**\\n     * @dev exposing `_setTokenRoyalty`\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyRole(ROYALTY_ROLE) {\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Exposing `_setDefaultRoyalty`\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyRole(ROYALTY_ROLE) {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId hash of the interface testing for\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlUpgradeable, ERC2981Upgradeable)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC2981Setter).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbdf00f92cb6a8204a08214cfb6146630ee62a2386cc1744f6f17844ba03185f0\",\"license\":\"MIT\"},\"contracts/assets/common/IERC2981Setter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard setter\\n */\\ninterface IERC2981Setter  {\\n    /**\\n     * @dev exposing `_setTokenRoyalty`\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external;\\n\\n    /**\\n     * @dev Exposing `_setDefaultRoyalty`\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n}\\n\",\"keccak256\":\"0x57b8a826f5bc10fcafb3f862b6fc158a14506e72ca0b568caee488dc0ffc8d8b\",\"license\":\"MIT\"},\"contracts/common/BaseURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {IBaseURI} from './IBaseURI.sol';\\nimport {StorageSlotString} from '../utils/StorageSlotString.sol';\\n\\n/**\\n * @dev Implements contract uri getter/setter\\n */\\ncontract BaseURI is AccessControlUpgradeable, IBaseURI {\\n    bytes32 internal constant BASE_URI_ROLE = keccak256('BASE_URI_ROLE');\\n    bytes32 internal constant _BASE_URI_SLOT = keccak256('BASE_URI');\\n\\n    /**\\n     * @dev BaseURI chained initialization\\n     * @param _baseUriRole write role\\n     * @param _initBaseURI initial contract uri\\n     */\\n    function __BaseURI_init(address _baseUriRole, string memory _initBaseURI) internal {\\n        __BaseURI_init_unchained(_baseUriRole, _initBaseURI);\\n    }\\n\\n    /**\\n     * @dev BaseURI unchained initialization.\\n     * @param _baseUriRole write role\\n     * @param _initBaseURI initial contract uri\\n     */\\n    function __BaseURI_init_unchained(address _baseUriRole, string memory _initBaseURI) internal {\\n        _grantRole(BASE_URI_ROLE, _baseUriRole);\\n        StorageSlotString.getStringSlot(_BASE_URI_SLOT).value = _initBaseURI;\\n    }\\n\\n    /**\\n     * @dev Returns collection-wide URI-accessible metadata\\n     */\\n    function baseURI() public view returns (string memory) {\\n        return StorageSlotString.getStringSlot(_BASE_URI_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Set contract uri\\n     */\\n    function setBaseURI(string memory uri) external onlyRole(BASE_URI_ROLE) {\\n        StorageSlotString.getStringSlot(_BASE_URI_SLOT).value = uri;\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IBaseURI).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x0512e97c4bd6d5660ea1b03c0d8f9a1801149c225105a2b7f8262cfe242b5d52\",\"license\":\"MIT\"},\"contracts/common/ContractURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {IContractURI} from './IContractURI.sol';\\nimport {StorageSlotString} from '../utils/StorageSlotString.sol';\\n\\n/**\\n * @dev Implements contract uri getter/setter\\n */\\ncontract ContractURI is AccessControlUpgradeable, IContractURI {\\n    bytes32 internal constant CONTRACT_URI_ROLE = keccak256('CONTRACT_URI_ROLE');\\n    bytes32 internal constant _CONTRACT_URI_SLOT = keccak256('CONTRACT_URI');\\n\\n    /**\\n     * @dev ContractURI chained initialization\\n     * @param _contractUriRole write role\\n     * @param _initContractURI initial contract uri\\n     */\\n    function __ContractURI_init(address _contractUriRole, string memory _initContractURI) internal {\\n        __ContractURI_init_unchained(_contractUriRole, _initContractURI);\\n    }\\n\\n    /**\\n     * @dev ContractURI unchained initialization.\\n     * @param _contractUriRole write role\\n     * @param _initContractURI initial contract uri\\n     */\\n    function __ContractURI_init_unchained(address _contractUriRole, string memory _initContractURI) internal {\\n        _grantRole(CONTRACT_URI_ROLE, _contractUriRole);\\n        StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value = _initContractURI;\\n    }\\n\\n    /**\\n     * @dev Returns collection-wide URI-accessible metadata\\n     */\\n    function contractURI() public view returns (string memory) {\\n        return StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Set contract uri\\n     */\\n    function setContractURI(string memory uri) external onlyRole(CONTRACT_URI_ROLE) {\\n        StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value = uri;\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IContractURI).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd8dc6ad13d314f7e0e42a0103200bf2e17a1f004776b2bec4ff00fd333429414\",\"license\":\"MIT\"},\"contracts/common/IBaseURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev IBaseURI defines metadata for a contract's assets. A 1:N relationship between contract address + id and metadata uri. Used by standards such as ERC721, ERC1155\\n */\\ninterface IBaseURI {\\n    function baseURI() external view returns (string memory);\\n    function setBaseURI(string memory uri) external;\\n}\\n\",\"keccak256\":\"0xad29356d8f8869e9ae16ac947e179f48792f15c587094c340cf7cf8b4c642839\",\"license\":\"MIT\"},\"contracts/common/IContractURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev IContractURI defines a contract with metadata. A 1:1 relationship between contract address and metdata uri.\\n */\\ninterface IContractURI {\\n    function contractURI() external view returns (string memory);\\n    function setContractURI(string memory uri) external;\\n}\\n\",\"keccak256\":\"0xec2f10bd854049d89466c7c7a145eba628e69e6e688f5c8fdab16f7aa6adf094\",\"license\":\"MIT\"},\"contracts/common/IOwlBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { IAccessControlUpgradeable } from '@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol';\\nimport { IContractURI } from './IContractURI.sol';\\nimport { IRouterReceiver } from './IRouterReceiver.sol';\\n\\n/**\\n * IOwlBase interface\\n */\\ninterface IOwlBase is IAccessControlUpgradeable, IContractURI, IRouterReceiver {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xaac3c3501e7083b0e9385f92b16909932b10bca004c575fa30703309cc318448\",\"license\":\"MIT\"},\"contracts/common/IRouterReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * IRouterReceiver defines OpenGSN Interfaces\\n */\\ninterface IRouterReceiver {\\n    function isTrustedForwarder(address forwarder) external view returns (bool);\\n    function versionRecipient() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0x27f0c495d085cbd04415b72d86942255e7d7e4283a01da87f7bf459b6cd0ac46\",\"license\":\"MIT\"},\"contracts/common/OwlBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport {UUPSUpgradeable} from '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport {IERC1820RegistryUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol';\\nimport {ERC1820ImplementerUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/ERC1820ImplementerUpgradeable.sol';\\nimport {ContractURI} from './ContractURI.sol';\\nimport {RouterReceiver} from './RouterReceiver.sol';\\nimport {IOwlBase} from './IOwlBase.sol';\\n\\n/**\\n * @dev Base for all OwlProtocol contracts\\n *\\n * Implements several required mechanisms for all OwlProtocol contracts to\\n * utilize:\\n * - OpenGSN support (gasless transactions)\\n * - Consistent contract versioning\\n * - Consistent access control\\n * - UUPS contract upgrade support\\n */\\ncontract OwlBase is\\n    ContextUpgradeable,\\n    AccessControlUpgradeable,\\n    UUPSUpgradeable,\\n    ContractURI,\\n    RouterReceiver,\\n    ERC1820ImplementerUpgradeable,\\n    IOwlBase\\n{\\n    // Consistent version across all contracts\\n    string internal constant _version = 'v0.1';\\n    address constant ERC1820_REGISTRY = 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24;\\n    bytes32 constant ONE = 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    IERC1820RegistryUpgradeable constant registry = IERC1820RegistryUpgradeable(ERC1820_REGISTRY);\\n\\n    /**\\n        Chained / Unchained\\n        https://forum.openzeppelin.com/t/difference-between-init-and-init-unchained/25255/3\\n\\n        Chained: constructor header replacement (parent inherited contracts)\\n        Unchained: constructor replacement (self init)\\n\\n     */\\n    /**\\n     * @dev OwlBase chained initialization\\n     * @param _admin address to assign owner rights\\n     * @param _forwarder OpenGSN forwarder address (if desired).\\n     */\\n    function __OwlBase_init(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _forwarder\\n    ) internal {\\n        __ContractURI_init_unchained(_admin, _initContractURI);\\n        __RouterReceiver_init_unchained(_forwarder);\\n\\n        __OwlBase_init_unchained(_admin);\\n    }\\n\\n    /**\\n     * @dev OwlBase unchained initialization.\\n     * @param _admin address to assign owner rights\\n     */\\n    function __OwlBase_init_unchained(address _admin) internal {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        if (AddressUpgradeable.isContract(ERC1820_REGISTRY)) {\\n            registry.updateERC165Cache(address(this), type(IOwlBase).interfaceId);\\n            registry.setInterfaceImplementer(address(this), type(IOwlBase).interfaceId | ONE, address(this));\\n        }\\n    }\\n\\n    /**\\n     * @notice Only callable by admins\\n     * @dev UUPS function to authorize upgrades\\n     * @param newImplementation newImplementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    /**\\n     * @dev Returns the implementation address.\\n     */\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /**\\n     * @dev OwlProtocol contract version. Used to determine compatibility\\n     * interoperable with other Owl contracts.\\n     */\\n    function version() external pure virtual returns (string memory) {\\n        return _version;\\n    }\\n\\n    /** Overrides */\\n    function _msgSender() internal view virtual override(RouterReceiver, ContextUpgradeable) returns (address) {\\n        return RouterReceiver._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(RouterReceiver, ContextUpgradeable) returns (bytes calldata) {\\n        return RouterReceiver._msgData();\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlUpgradeable, ContractURI, RouterReceiver)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOwlBase).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf296b1eaf7add0db769e09c517d6128141568de96f3a817456f0c0ce9c5e826e\",\"license\":\"MIT\"},\"contracts/common/RouterReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {IRouterReceiver} from './IRouterReceiver.sol';\\n\\n/**\\n * @dev Implements OpenGSN Config\\n */\\ncontract RouterReceiver is AccessControlUpgradeable, IRouterReceiver {\\n    bytes32 internal constant ROUTER_ROLE = keccak256('ROUTER_ROLE');\\n\\n    /**\\n     * @dev RouterReceiver chained initialization\\n     * @param _router router role\\n     */\\n    function __RouterReceiver_init(address _router) internal {\\n        __RouterReceiver_init_unchained(_router);\\n    }\\n\\n    /**\\n     * @dev RouterReceiver unchained initialization.\\n     * @param _router router role\\n     */\\n    function __RouterReceiver_init_unchained(address _router) internal {\\n        _grantRole(ROUTER_ROLE, _router);\\n    }\\n\\n    /**\\n     * @dev Returns OpenGSN contract version (used for compatibility checks)\\n     */\\n    function versionRecipient() external pure virtual returns (string memory) {\\n        return '2.2.6';\\n    }\\n\\n    /**\\n     * @dev Determine is an address a GSN trusted forwarder.\\n     * @param forwarder address to query\\n     * @return OpenGSN trusted forwarder status\\n     */\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return hasRole(ROUTER_ROLE, forwarder);\\n    }\\n\\n    /**\\n     * @notice the following 3 functions are all required for OpenGSN integration\\n     * @dev Support for meta transactions\\n     * @return ret either msg.sender or user who called transaction through a relayer\\n     */\\n    function _msgSender() internal view virtual override returns (address ret) {\\n        if (msg.data.length >= 20 && hasRole(ROUTER_ROLE, msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * @dev Support for meta transactions\\n     * @return msgData from either msg.sender or from user who called through relayer\\n     */\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (msg.data.length >= 20 && hasRole(ROUTER_ROLE, msg.sender)) {\\n            return msg.data[0:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IRouterReceiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x92ef1efa23fce0e51555009c49489e1002ae8588358876400c356070df050f3f\",\"license\":\"MIT\"},\"contracts/utils/StorageSlotString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing strings to specific storage slots.\\n* Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *   bytes32 internal constant _CONTRACT_URI_SLOT = keccak256('CONTRACT_URI');\\n *\\n *   function contractURI() public view returns (string memory) {\\n *       return StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value;\\n *   }\\n *\\n *   function setContractURI(string memory uri) external onlyRole(CONTRACT_URI_ROLE) {\\n *       StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value = uri;\\n *   }\\n * }\\n * ```\\n */\\nlibrary StorageSlotString {\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd63ecf1ae3fdcb6c6cb7202602feb6df5c44179aa013535fa9a27d1114e6f43a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0806040523461003157306080526143f6908161003782396080518181816111ae0152818161145f01526115750152f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c8062fdd58e146102ba57806301ffc9a7146102b157806302fe5305146102a857806304634d8d1461029f5780630e89341c146102965780631f7fdffa1461028d578063207205ad14610284578063248a9ca31461027b578063249cb3fa146102725780632a55205a146102695780632eb2c2d6146102605780632f2ff15d1461025757806336568abe1461024e5780633659cfe614610245578063486ff0cd1461023c5780634e1273f4146102335780634f1ef2861461022a57806352d1902d1461022157806354fd4d5014610218578063572b6c051461020f5780635944c753146102065780636b20c454146101fd578063731133e9146101f457806391d14854146101eb578063938e3d7b146101e2578063a217fddf146101d9578063a22cb465146101d0578063aaf10f42146101c7578063b8a7e257146101be578063d547741f146101b5578063e8a3d485146101ac578063e985e9c5146101a3578063f242432a1461019a5763f5298aca1461019257600080fd5b61000e6120ed565b5061000e611f4a565b5061000e611ef8565b5061000e611e19565b5061000e611dd9565b5061000e611cf3565b5061000e611cbc565b5061000e611bb0565b5061000e611b93565b5061000e611a85565b5061000e611a3e565b5061000e611953565b5061000e6117e5565b5061000e6116de565b5061000e61166d565b5061000e611627565b5061000e611561565b5061000e611421565b5061000e611367565b5061000e6112db565b5061000e61118a565b5061000e6110ed565b5061000e61102c565b5061000e610e3d565b5061000e610d94565b5061000e610d0f565b5061000e610cdf565b5061000e610b83565b5061000e6108bd565b5061000e61064b565b5061000e61059f565b5061000e610411565b5061000e610345565b5061000e610303565b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b35906001600160a01b038216820361000e57565b503461000e57604036600319011261000e57602061032b6103226102c3565b60243590612ee4565b604051908152f35b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5761039460043561036681610333565b63ffffffff60e01b16636c6eec1360e01b8114908115610398575b5060405190151581529081906020820190565b0390f35b632e93c56f60e11b8114915081156103b2575b5038610381565b63152a902d60e11b8114915081156103cc575b50386103ab565b63054fd4d560e41b8114915081156103e6575b50386103c5565b6303e8939960e31b811491508115610400575b50386103df565b633d96f4ff60e11b149050386103f9565b503461000e57602036600319011261000e576001600160401b0360043581811161000e573660238201121561000e57806004013591821161000e57366024838301011161000e57610460614308565b6001600160a01b03811660009081527fb068b61a200639681129aa64c43b97b3c570787e8e53d8feb93bcc67b3afb6a9602052604090205490929060ff16156104bc576104ba916104b591602436920161086b565b613aee565b005b61056f60376105576104d66001600160a01b0387166138d2565b6105496104e161396f565b6105436040519586947f416363657373436f6e74726f6c3a206163636f756e74200000000000000000006020870152610523815180926020858a0191016105dd565b8501017001034b99036b4b9b9b4b733903937b6329607d1b815260110190565b906126bf565b03601f19810183528261078d565b60405162461bcd60e51b815291829160048301610637565b0390fd5b604435906001600160601b038216820361000e57565b60a435906001600160601b038216820361000e57565b503461000e57604036600319011261000e576105b96102c3565b6024356001600160601b038116810361000e576104ba916105d8612216565b6141ab565b918091926000905b8282106105fd5750116105f6575050565b6000910152565b915080602091830151818601520182916105e5565b9060209161062b815180928185528580860191016105dd565b601f01601f1916010190565b906020610648928181520190610612565b90565b503461000e5760208060031936011261000e5760405160009160995461067081612e74565b8084529060019081811690811561070157506001146106a6575b6103948461069a8188038261078d565b60405191829182610637565b609960009081529294507f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d005b8284106106ee57505050816103949361069a928201019361068a565b80548585018701529285019281016106d2565b92505050610394935060ff19169082015261069a81604081019361068a565b50634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761075257604052565b61075a610720565b604052565b6001600160401b03811161075257604052565b602081019081106001600160401b0382111761075257604052565b90601f801991011681019081106001600160401b0382111761075257604052565b604051906107bb82610737565b565b6020906001600160401b0381116107d6575b60051b0190565b6107de610720565b6107cf565b81601f8201121561000e578035916107fa836107bd565b92610808604051948561078d565b808452602092838086019260051b82010192831161000e578301905b828210610832575050505090565b81358152908301908301610824565b6020906001600160401b03811161085e575b601f01601f19160190565b610866610720565b610853565b92919261087782610841565b91610885604051938461078d565b82948184528183011161000e578281602093846000960137010152565b9080601f8301121561000e578160206106489335910161086b565b503461000e57608036600319011261000e576108d76102c3565b6024356001600160401b039182821161000e576108f9600492369084016107e3565b9060443584811161000e5761091190369085016107e3565b9360643590811161000e5761092990369085016108a2565b92610932612403565b6001600160a01b038281169490919061094c861515614027565b6109598551885114613202565b610961614308565b9060005b86518110156109c7578061097c6109c2928b612fef565b51610987828a612fef565b5160005260976020526109bb6109b38960406000209060018060a01b0316600052602052604060002090565b9182546131f6565b9055612fc0565b610965565b50868887878360006040997f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8b51918a169180610a0589898361325f565b0390a43b610a0f57005b91610a379391600060209489519687958694859363bc197c8160e01b9b8c86528d8601613608565b03925af160009181610ad6575b50610aac5750506001610a55613346565b6308c379a014610a7f575b610a6657005b905162461bcd60e51b815290819061056f9082016133d2565b610a87613364565b80610a925750610a60565b835162461bcd60e51b815290819061056f90828601610637565b6001600160e01b03191603610abd57005b905162461bcd60e51b815290819061056f9082016132fd565b610af891925060203d8111610aff575b610af0818361078d565b810190613284565b9085610a44565b503d610ae6565b9060c060031983011261000e576001600160a01b0391600435838116810361000e57926001600160401b039260243584811161000e5783610b49916004016108a2565b93604435838116810361000e579360643591821161000e57610b6d916004016108a2565b91608435908116810361000e5790610648610589565b503461000e57610b9236610b06565b9493610ba860ff60009593955460081c16613c48565b610bb1856126d6565b80516001600160401b038111610cd2575b6000805160206143a183398151915291610be582610be08554612e74565b6139ff565b60209081601f8411600114610c58575093610c3993836104ba9a9794610c2b94610c3f9a98600092610c4d575b50508160011b916000199060031b1c19161790556128f5565b610c3486614241565b613d99565b8361407d565b610c4881613dae565b613f60565b015190503880610c12565b9190601f198416610c67612eae565b936000905b828210610cba57505084610c2b94610c3f9a9894610c3998946104ba9e9b9860019510610ca1575b505050811b0190556128f5565b015160001960f88460031b161c19169055388080610c94565b80600186978294978701518155019601940190610c6c565b610cda610720565b610bc2565b503461000e57602036600319011261000e5760043560005260fb6020526020600160406000200154604051908152f35b503461000e57604036600319011261000e5760ff610d56610d2e6102d9565b60043560005261015f60205260406000209060018060a01b0316600052602052604060002090565b546000911615610d8c575060207fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b4604051908152f35b60209061032b565b503461000e57604036600319011261000e57600435600052610192602052604060002060405190610dc482610737565b546001600160a01b03811680835260a09190911c602083015215610e2f575b610e13612710610e026001600160601b036020850151166024356137c7565b92519204916001600160a01b031690565b604080516001600160a01b039290921682526020820192909252f35b50610e386137a0565b610de3565b503461000e5760a036600319011261000e57610e576102c3565b610e5f6102d9565b906001600160401b039060443582811161000e57610e819036906004016107e3565b9160643581811161000e57610e9a9036906004016107e3565b9060843590811161000e57610eb39036906004016108a2565b6001600160a01b03939084610ec6614308565b168585169081148015610fe7575b610edd906130d9565b610eea8351855114613202565b858716610ef881151561313d565b610f00614308565b9160005b8551811015610fa15780886109bb6109b38d610f518c610f3387610f2c8f9a610f9c9b612fef565b5192612fef565b5195610f8b87610f6883610f51866000526097602052604060002090565b9060018060a01b0316600052602052604060002090565b54610f7582821015613197565b0391610f51846000526097602052604060002090565b556000526097602052604060002090565b610f04565b506104ba9894959693977f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb6040519185169180610fdf8b8b8361325f565b0390a4613685565b50610edd611025610ff6614308565b6001600160a01b0380891660009081526098602090815260408083209490931682529290925290205460ff1690565b9050610ed4565b503461000e5760408060031936011261000e576004359061104b6102d9565b60009280845260fb602052611065600184862001546125fb565b80845260fb60209081528385206001600160a01b03841660009081529152604090205460ff161561109557505051f35b80845260fb60209081528385206001600160a01b0384166000908152915260409020805460ff191660011790556001600160a01b03806110d3614308565b16921690600080516020614361833981519152858551a451f35b503461000e57604036600319011261000e576111076102d9565b6001600160a01b0380611118614308565b169082160361112d576104ba90600435612956565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b503461000e57602036600319011261000e576111a46102c3565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691906111dd308414156129ec565b6111fa600080516020614381833981519152938285541614612a4d565b61120261232a565b6040519061120f82610772565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156112495750506104ba9150612bc3565b6020600491604094939451928380926352d1902d60e01b825286165afa600091816112a0575b5061128d5760405162461bcd60e51b81528061056f60048201612b74565b6104ba9361129b9114612b16565b612d55565b6112c291925060203d81116112c9575b6112ba818361078d565b810190612afa565b903861126f565b503d6112b0565b600091031261000e57565b503461000e57600036600319011261000e576103946040516112fc81610737565b6005815264191719171b60d91b6020820152604051918291602083526020830190610612565b90815180825260208080930193019160005b828110611342575050505090565b835185529381019392810192600101611334565b906020610648928181520190611322565b503461000e57604036600319011261000e576004356001600160401b0380821161000e573660238301121561000e5781600401356113a4816107bd565b926113b2604051948561078d565b81845260209160248386019160051b8301019136831161000e57602401905b82821061140a578560243586811161000e57610394916113f86113fe9236906004016107e3565b90613011565b60405191829182611356565b838091611416846102ef565b8152019101906113d1565b50604036600319011261000e576114366102c3565b6024356001600160401b03811161000e576114559036906004016108a2565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692919061148f308514156129ec565b6114ac600080516020614381833981519152948286541614612a4d565b6114b461232a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156114ea5750506104ba9150612bc3565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181611541575b5061152e5760405162461bcd60e51b81528061056f60048201612b74565b6104ba9361153c9114612b16565b612c53565b61155a91925060203d81116112c9576112ba818361078d565b9038611510565b503461000e57600036600319011261000e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036115bc576040516000805160206143818339815191528152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e57600036600319011261000e5761039460405161164881610737565b600481526376302e3160e01b6020820152604051918291602083526020830190610612565b503461000e57602036600319011261000e57602060ff6116d261168e6102c3565b7f7a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb260005260fb845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57606036600319011261000e576116f86102d9565b611700610573565b90611709612216565b6117206127106001600160601b038416111561414c565b6001600160a01b038116156117a0576117606104ba926117506117416107ae565b6001600160a01b039094168452565b6001600160601b03166020830152565b611777600435600052610192602052604060002090565b815160209092015160a01b6001600160a01b0319166001600160a01b0392909216919091179055565b60405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606490fd5b503461000e57606036600319011261000e576117ff6102c3565b6001600160401b0360243581811161000e5761181f9036906004016107e3565b9060443590811161000e576118389036906004016107e3565b6001600160a01b03918261184a614308565b16838516908114801561193d575b611861906130d9565b61186c8115156136f0565b6118798251845114613202565b611881614308565b9361188a612aae565b5060005b83518110156118fa57806118a56118f59286612fef565b516118ef89610f516118b7858b612fef565b516118d083610f51876000526097602052604060002090565b546118dd82821015613748565b03936000526097602052604060002090565b55612fc0565b61188e565b506000946119327f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb939560405193849316958361325f565b0390a46104ba612aae565b5061186161194c610ff6614308565b9050611858565b503461000e57608036600319011261000e5761196d6102c3565b606435906044356024356001600160401b03841161000e576119966104ba9436906004016108a2565b9261199f612403565b6001600160a01b038181166119b5811515614027565b60006119bf614308565b926119c9866136bf565b506119d3876136bf565b508582526097602090815260408084206001600160a01b038816600090815292529020611a018882546131f6565b90556040805187815260208101899052918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629190a4613427565b503461000e57604036600319011261000e57602060ff6116d2611a5f6102d9565b60043560005260fb845260406000209060018060a01b0316600052602052604060002090565b503461000e5760208060031936011261000e576001600160401b039060043582811161000e57611ab99036906004016108a2565b91611ac26124ff565b8251908111611b86575b6000805160206143a183398151915291611aea82610be08554612e74565b80601f8311600114611b235750819293600092611b18575b50508160011b916000199060031b1c1916179055005b015190503880611b02565b90601f19831694611b32612eae565b926000905b878210611b6e575050836001959610611b55575b505050811b019055005b015160001960f88460031b161c19169055388080611b4b565b80600185968294968601518155019501930190611b37565b611b8e610720565b611acc565b503461000e57600036600319011261000e57602060405160008152f35b503461000e57604036600319011261000e57611bca6102c3565b602435801515810361000e57611bde614308565b6001600160a01b038381169390821692838514611c6557611c4e81611c3d611c6094610f517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319760018060a01b03166000526098602052604060002090565b9060ff801983541691151516179055565b60405190151581529081906020820190565b0390a3005b60405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608490fd5b503461000e57600036600319011261000e57600080516020614381833981519152546040516001600160a01b039091168152602090f35b503461000e57611d4d611d0536610b06565b9360009695969391935496611d3160ff8960081c16158099819a611dcb575b8115611dab575b50613be5565b87611d44600160ff196000541617600055565b611d9257613ca8565b611d5357005b611d6361ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b611da661010061ff00196000541617600055565b613ca8565b303b15915081611dbd575b5038611d2b565b6001915060ff161438611db6565b600160ff8216109150611d24565b503461000e57604036600319011261000e576104ba600435611df96102d9565b908060005260fb602052611e146001604060002001546125fb565b612956565b503461000e57600080600319360112611ef55760405190806000805160206143a183398151915290815490611e4d82612e74565b80865292600192808416908115611ed15750600114611e77575b6103948661069a8188038261078d565b815292507feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c6975b828410611eb957505050810160200161069a8261039438611e67565b80546020858701810191909152909301928101611e9d565b60ff19166020880152505060408501935061069a9250849150610394905038611e67565b80fd5b503461000e57604036600319011261000e57602060ff6116d2611f196102c3565b611f216102d9565b6001600160a01b0391821660009081526098865260408082209290931681526020919091522090565b503461000e5760a036600319011261000e57611f646102c3565b611f6c6102d9565b9060443560643590608435936001600160401b03851161000e57611f976104ba9536906004016108a2565b936001600160a01b0380611fa9614308565b1681831690811480156120a8575b611fc0906130d9565b81841690611fcf82151561313d565b611fd7614308565b92611fe1876136bf565b50611feb886136bf565b5060008781526097602090815260408083206001600160a01b0389168452909152902088905461201d82821015613197565b886000526097602052036120478660406000209060018060a01b0316600052602052604060002090565b5561206086610f51896000526097602052604060002090565b61206b8982546131f6565b905560408051888152602081018a9052918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629190a4613530565b50611fc06120e66120b7614308565b6001600160a01b0380871660009081526098602090815260408083209490931682529290925290205460ff1690565b9050611fb7565b503461000e57606036600319011261000e5760006121096102c3565b60443590602435907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62906001600160a01b039061193282612148614308565b16958383169687148015612200575b612160906130d9565b61216b8715156136f0565b612173614308565b9261217d876136bf565b50612187826136bf565b508860405161219581610772565b5286895260976020526121e4826121c18360408d209060018060a01b0316600052602052604060002090565b546121ce82821015613748565b0391610f51896000526097602052604060002090565b5560405193849316958360209093929193604081019481520152565b5061216061220f6120b7614308565b9050612157565b61221e614308565b6001600160a01b03811660009081527fef93721591a8283ebcbc635d4596270f18296615bf2ad2acc05699794bf1433160205260409020547feb54e1feee3ae17add098cbf58a47457bf5f7c3a89ceab263cbdb01b3da6d98e919060ff1615612285575050565b612297906001600160a01b03166138d2565b906122a0612ac1565b9060306122ac83613826565b5360786122b88361383c565b5360415b600181116122db5761056f603761055786610549876104e18815613887565b9080600f6123189216601081101561231d575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a61230e848661384d565b5360041c9161386c565b6122bc565b612325612fd8565b6122ee565b612332614308565b6001600160a01b03811660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604090205460ff16156123755750565b612387906001600160a01b03166138d2565b6000612391612ac1565b90603061239d83613826565b5360786123a98361383c565b5360415b600181116123cc5761056f603761055786610549876104e18815613887565b9080600f6123fe9216601081101561231d576f181899199a1a9b1b9c1cb0b131b232b360811b901a61230e848661384d565b6123ad565b61240b614308565b6001600160a01b03811660009081527f72f2994cda805697ff5940dc92bd4118d9d7058b657a897ee8a2023e4f67343460205260409020547f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6919060ff1615612472575050565b612484906001600160a01b03166138d2565b9061248d612ac1565b90603061249983613826565b5360786124a58361383c565b5360415b600181116124c85761056f603761055786610549876104e18815613887565b9080600f6124fa9216601081101561231d576f181899199a1a9b1b9c1cb0b131b232b360811b901a61230e848661384d565b6124a9565b612507614308565b6001600160a01b03811660009081527fd79c98b0e2162ca3184e1e6688bf8c1c5461f86efaaae3675641a8fbeb30644560205260409020547f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c15919060ff161561256e575050565b612580906001600160a01b03166138d2565b90612589612ac1565b90603061259583613826565b5360786125a18361383c565b5360415b600181116125c45761056f603761055786610549876104e18815613887565b9080600f6125f69216601081101561231d576f181899199a1a9b1b9c1cb0b131b232b360811b901a61230e848661384d565b6125a5565b612603614308565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff1615612632575050565b612644906001600160a01b03166138d2565b9061264d612ac1565b90603061265983613826565b5360786126658361383c565b5360415b600181116126885761056f603761055786610549876104e18815613887565b9080600f6126ba9216601081101561231d576f181899199a1a9b1b9c1cb0b131b232b360811b901a61230e848661384d565b612669565b906126d2602092828151948592016105dd565b0190565b6001600160a01b03811660009081527fd79c98b0e2162ca3184e1e6688bf8c1c5461f86efaaae3675641a8fbeb306445602052604090207f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c159060ff905b54161561273e575050565b600081815260fb602090815260408083206001600160a01b03861684529091529020805460ff191660011790556001600160a01b038061277c614308565b169216906000805160206143618339815191526000604051a4565b6001600160a01b03811660009081527fb068b61a200639681129aa64c43b97b3c570787e8e53d8feb93bcc67b3afb6a9602052604090207f8e6595ef9afb2a8f70320f393f567bb7a0e6c4ed483caee30f90cc5fcd6659b49060ff90612733565b6001600160a01b03811660009081527f72f2994cda805697ff5940dc92bd4118d9d7058b657a897ee8a2023e4f673434602052604090207f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a69060ff90612733565b6001600160a01b03811660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604081205460ff161561289d575050565b80805260fb602090815260408083206001600160a01b038516600090815292529020805460ff191660011790556001600160a01b03806128db614308565b1692169060008051602061436183398151915281604051a4565b6001600160a01b03811660009081527f452ae8ad28077a8dde36d329380df9bfd96077640c4bb696c45031c2933e8ad8602052604090207f7a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb29060ff90612733565b600081815260fb602090815260408083206001600160a01b038616845290915290205460ff16612984575050565b600081815260fb602090815260408083206001600160a01b03861684529091529020805460ff191690556001600160a01b03806129bf614308565b169216907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b6000604051a4565b156129f357565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15612a5457565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b60405190612abb82610772565b60008252565b60405190608082018281106001600160401b03821117612aed575b604052604282526060366020840137565b612af5610720565b612adc565b9081602091031261000e575190565b506040513d6000823e3d90fd5b15612b1d57565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b60809060208152602e60208201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960408201526d6f6e206973206e6f74205555505360901b60608201520190565b803b15612bf85760008051602061438183398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b612c5c81612bc3565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590612d4d575b612ca257505050565b813b15612cfc575060008281926020612cf295519201905af43d15612cf5573d612ccb81610841565b90612cd9604051928361078d565b81523d6000602083013e5b612cec612e0d565b916137e6565b50565b6060612ce4565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b506001612c99565b90612d5f82612bc3565b604051600092906001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8583a2825115801590612e06575b612daa575b50505050565b813b15612cfc5750918082612df49460208395519201905af4903d15612dfe573d612dd481610841565b90612de2604051928361078d565b8152809160203d92013e612cec612e0d565b5038808080612da4565b506060612ce4565b5083612d9f565b60405190606082018281106001600160401b03821117612e67575b60405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b612e6f610720565b612e28565b90600182811c92168015612ea4575b6020831014612e8e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612e83565b6000805160206143a18339815191526000527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c69790565b6001600160a01b03811615612f1f57612f1b91600052609760205260406000209060018060a01b0316600052602052604060002090565b5490565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b6064820152608490fd5b90612f81826107bd565b612f8e604051918261078d565b8281528092612f9f601f19916107bd565b0190602036910137565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114612fd0570190565b6126d2612fa9565b50634e487b7160e01b600052603260045260246000fd5b6020918151811015613004575b60051b010190565b61300c612fd8565b612ffc565b9190918051835103613082576130278151612f77565b9060005b815181101561307b57806130666130556130486130769486612fef565b516001600160a01b031690565b61305f8389612fef565b5190612ee4565b6130708286612fef565b52612fc0565b61302b565b5090925050565b60405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608490fd5b156130e057565b60405162461bcd60e51b815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526e195c881b9bdc88185c1c1c9bdd9959608a1b6064820152608490fd5b1561314457565b60405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b1561319e57565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608490fd5b81198111612fd0570190565b1561320957565b60405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608490fd5b909161327661064893604084526040840190611322565b916020818403910152611322565b9081602091031261000e575161064881610333565b909260a0926106489594600180861b0316835260006020840152604083015260608201528160808201520190610612565b919261064895949160a094600180871b038092168552166020840152604083015260608201528160808201520190610612565b60809060208152602860208201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b60608201520190565b60009060033d1161335357565b905060046000803e60005160e01c90565b600060443d1061064857604051600319913d83016004833e81516001600160401b03918282113d6024840111176133c1578184019485519384116133c9573d850101602084870101116133c157506106489291016020019061078d565b949350505050565b50949350505050565b60809060208152603460208201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60608201520190565b9390803b613437575b5050505050565b61345f9360006020946040519687958694859363f23a6e6160e01b9b8c865260048601613299565b03926001600160a01b03165af160009181613510575b506134e85750506001613486613346565b6308c379a0146134b9575b6134a0575b3880808080613430565b60405162461bcd60e51b81528061056f600482016133d2565b6134c1613364565b806134cc5750613491565b60405162461bcd60e51b815290819061056f9060048301610637565b6001600160e01b031916146134965760405162461bcd60e51b81528061056f600482016132fd565b61352991925060203d8111610aff57610af0818361078d565b9038613475565b9493919092813b613544575b505050505050565b600060209461356b6040519788968795869463f23a6e6160e01b9c8d8752600487016132ca565b03926001600160a01b03165af1600091816135e8575b506135c05750506001613592613346565b6308c379a0146135ad575b6134a0575b38808080808061353c565b6135b5613364565b806134cc575061359d565b6001600160e01b031916146135a25760405162461bcd60e51b81528061056f600482016132fd565b61360191925060203d8111610aff57610af0818361078d565b9038613581565b9261363761064895936136459360018060a01b031686526000602087015260a0604087015260a0860190611322565b908482036060860152611322565b916080818403910152610612565b93906106489593613637916136459460018060a01b03809216885216602087015260a0604087015260a0860190611322565b9493919092813b61369857505050505050565b600060209461356b6040519788968795869463bc197c8160e01b9c8d875260048701613653565b604051906136cc82610737565b600182526020820160203682378251156136e4575290565b6136ec612fd8565b5290565b156136f757565b60405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b1561374f57565b60405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608490fd5b604051906137ad82610737565b610191546001600160a01b038116835260a01c6020830152565b80600019048211811515166137da570290565b6137e2612fa9565b0290565b909190156137f2575090565b8151156138025750805190602001fd5b60405162461bcd60e51b81526020600482015290819061056f906024830190610612565b602090805115613834570190565b6126d2612fd8565b602190805160011015613834570190565b90602091805182101561385f57010190565b613867612fd8565b010190565b801561387a575b6000190190565b613882612fa9565b613873565b1561388e57565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b60405190606082018281106001600160401b03821117613962575b604052602a82526040366020840137603061390783613826565b5360786139138361383c565b536029905b6001821161392b57610648915015613887565b80600f61395c9216601081101561231d576f181899199a1a9b1b9c1cb0b131b232b360811b901a61230e848661384d565b90613918565b61396a610720565b6138ed565b7f8e6595ef9afb2a8f70320f393f567bb7a0e6c4ed483caee30f90cc5fcd6659b4613998612ac1565b9060306139a483613826565b5360786139b08361383c565b536041905b600182116139c857610648915015613887565b80600f6139f99216601081101561231d576f181899199a1a9b1b9c1cb0b131b232b360811b901a61230e848661384d565b906139b5565b601f8111613a0b575050565b6000906000805160206143a183398151915282527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c697906020601f850160051c83019410613a73575b601f0160051c01915b828110613a6857505050565b818155600101613a5c565b9092508290613a53565b601f8111613a89575050565b600090609982527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d00906020601f850160051c83019410613ae4575b601f0160051c01915b828110613ad957505050565b818155600101613acd565b9092508290613ac4565b9081516001600160401b038111613bd8575b613b1481613b0f609954612e74565b613a7d565b602080601f8311600114613b505750819293600092613b45575b50508160011b916000199060031b1c191617609955565b015190503880613b2e565b90601f19831694613b8360996000527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d0090565b926000905b878210613bc0575050836001959610613ba7575b505050811b01609955565b015160001960f88460031b161c19169055388080613b9c565b80600185968294968601518155019501930190613b88565b613be0610720565b613b00565b15613bec57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b15613c4f57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b9493929190613cb6866126d6565b80516001600160401b038111613d8c575b6000805160206143a183398151915291613ce582610be08554612e74565b60209081601f8411600114613d2b575093610c3993836107bb9a999794610c2b94610c3f9a98600092610c4d5750508160011b916000199060031b1c19161790556128f5565b9190601f198416613d3a612eae565b936000905b828210613d7457505084610c2b94610c3f9a9894610c3998946107bb9e9d9b9860019510610ca157505050811b0190556128f5565b80600186978294978701518155019601940190613d3f565b613d94610720565b613cc7565b6107bb906104b560ff60005460081c16613c48565b613db790612797565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b613dd55750565b803b1561000e5760405163a41e7d5160e01b808252306004830152632e93c56f60e11b6024830152600091828160448183885af18015613f53575b613f40575b50823b15613efc57604051908152306004820152636cdb3d1360e11b6024820152818160448183875af18015613f33575b613f20575b50813b15611ef5576040516329965a1d60e01b80825230600483018190526001635d278adf60e01b036024840152604483015290828160648183885af18015613f13575b613f00575b50823b15613efc576040519081523060048201819052600163d9b67a2760e01b0360248301526044820152918290818381606481015b03925af18015613eef575b613edc5750565b80613ee96107bb9261075f565b806112d0565b613ef7612b09565b613ed5565b5080fd5b80613ee9613f0d9261075f565b38613e94565b613f1b612b09565b613e8f565b80613ee9613f2d9261075f565b38613e4b565b613f3b612b09565b613e46565b80613ee9613f4d9261075f565b38613e15565b613f5b612b09565b613e10565b613f69906127f8565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b613f875750565b803b1561000e5760405163a41e7d5160e01b8152306004820152636c6eec1360e01b6024820152600090818160448183875af1801561401a575b614007575b50813b15611ef5576040516329965a1d60e01b815230600482018190526001631b1bbb0560e21b036024830152604482015291829081838160648101613eca565b80613ee96140149261075f565b38613fc6565b614022612b09565b613fc1565b1561402e57565b60405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b6001600160a01b03811660009081527fef93721591a8283ebcbc635d4596270f18296615bf2ad2acc05699794bf1433160205260409020546107bb939291907feb54e1feee3ae17add098cbf58a47457bf5f7c3a89ceab263cbdb01b3da6d98e9060ff16156140ee575b50506141ab565b600081815260fb602090815260408083206001600160a01b03861684529091529020805460ff191660011790556001600160a01b038061412c614308565b169216906000805160206143618339815191526000604051a438806140e7565b1561415357565b60405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608490fd5b906001600160601b038116916141c561271084111561414c565b6001600160a01b03169182156141fc5760206040516141e381610737565b848152015260a01b6001600160a01b0319161761019155565b60405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606490fd5b61424a90612859565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b6142685750565b803b1561000e5760405163a41e7d5160e01b815230600482015263054fd4d560e41b6024820152600090818160448183875af180156142fb575b6142e8575b50813b15611ef5576040516329965a1d60e01b8152306004820181905260016354fd4d5160e01b036024830152604482015291829081838160648101613eca565b80613ee96142f59261075f565b386142a7565b614303612b09565b6142a2565b601436101580614328575b156143245736601319013560601c90565b3390565b503360009081527f452ae8ad28077a8dde36d329380df9bfd96077640c4bb696c45031c2933e8ad8602052604090205460ff1661431356fe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc59c86eba0f8c3c9659b86fb2776edca2ff990d1509243e9705ae43a6831558c6a26469706673582212209d1c6102c36d5c187bfa284b792d4a819c8b3fec3c831f10b51028f66b259da364736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8062fdd58e146102ba57806301ffc9a7146102b157806302fe5305146102a857806304634d8d1461029f5780630e89341c146102965780631f7fdffa1461028d578063207205ad14610284578063248a9ca31461027b578063249cb3fa146102725780632a55205a146102695780632eb2c2d6146102605780632f2ff15d1461025757806336568abe1461024e5780633659cfe614610245578063486ff0cd1461023c5780634e1273f4146102335780634f1ef2861461022a57806352d1902d1461022157806354fd4d5014610218578063572b6c051461020f5780635944c753146102065780636b20c454146101fd578063731133e9146101f457806391d14854146101eb578063938e3d7b146101e2578063a217fddf146101d9578063a22cb465146101d0578063aaf10f42146101c7578063b8a7e257146101be578063d547741f146101b5578063e8a3d485146101ac578063e985e9c5146101a3578063f242432a1461019a5763f5298aca1461019257600080fd5b61000e6120ed565b5061000e611f4a565b5061000e611ef8565b5061000e611e19565b5061000e611dd9565b5061000e611cf3565b5061000e611cbc565b5061000e611bb0565b5061000e611b93565b5061000e611a85565b5061000e611a3e565b5061000e611953565b5061000e6117e5565b5061000e6116de565b5061000e61166d565b5061000e611627565b5061000e611561565b5061000e611421565b5061000e611367565b5061000e6112db565b5061000e61118a565b5061000e6110ed565b5061000e61102c565b5061000e610e3d565b5061000e610d94565b5061000e610d0f565b5061000e610cdf565b5061000e610b83565b5061000e6108bd565b5061000e61064b565b5061000e61059f565b5061000e610411565b5061000e610345565b5061000e610303565b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b35906001600160a01b038216820361000e57565b503461000e57604036600319011261000e57602061032b6103226102c3565b60243590612ee4565b604051908152f35b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5761039460043561036681610333565b63ffffffff60e01b16636c6eec1360e01b8114908115610398575b5060405190151581529081906020820190565b0390f35b632e93c56f60e11b8114915081156103b2575b5038610381565b63152a902d60e11b8114915081156103cc575b50386103ab565b63054fd4d560e41b8114915081156103e6575b50386103c5565b6303e8939960e31b811491508115610400575b50386103df565b633d96f4ff60e11b149050386103f9565b503461000e57602036600319011261000e576001600160401b0360043581811161000e573660238201121561000e57806004013591821161000e57366024838301011161000e57610460614308565b6001600160a01b03811660009081527fb068b61a200639681129aa64c43b97b3c570787e8e53d8feb93bcc67b3afb6a9602052604090205490929060ff16156104bc576104ba916104b591602436920161086b565b613aee565b005b61056f60376105576104d66001600160a01b0387166138d2565b6105496104e161396f565b6105436040519586947f416363657373436f6e74726f6c3a206163636f756e74200000000000000000006020870152610523815180926020858a0191016105dd565b8501017001034b99036b4b9b9b4b733903937b6329607d1b815260110190565b906126bf565b03601f19810183528261078d565b60405162461bcd60e51b815291829160048301610637565b0390fd5b604435906001600160601b038216820361000e57565b60a435906001600160601b038216820361000e57565b503461000e57604036600319011261000e576105b96102c3565b6024356001600160601b038116810361000e576104ba916105d8612216565b6141ab565b918091926000905b8282106105fd5750116105f6575050565b6000910152565b915080602091830151818601520182916105e5565b9060209161062b815180928185528580860191016105dd565b601f01601f1916010190565b906020610648928181520190610612565b90565b503461000e5760208060031936011261000e5760405160009160995461067081612e74565b8084529060019081811690811561070157506001146106a6575b6103948461069a8188038261078d565b60405191829182610637565b609960009081529294507f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d005b8284106106ee57505050816103949361069a928201019361068a565b80548585018701529285019281016106d2565b92505050610394935060ff19169082015261069a81604081019361068a565b50634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761075257604052565b61075a610720565b604052565b6001600160401b03811161075257604052565b602081019081106001600160401b0382111761075257604052565b90601f801991011681019081106001600160401b0382111761075257604052565b604051906107bb82610737565b565b6020906001600160401b0381116107d6575b60051b0190565b6107de610720565b6107cf565b81601f8201121561000e578035916107fa836107bd565b92610808604051948561078d565b808452602092838086019260051b82010192831161000e578301905b828210610832575050505090565b81358152908301908301610824565b6020906001600160401b03811161085e575b601f01601f19160190565b610866610720565b610853565b92919261087782610841565b91610885604051938461078d565b82948184528183011161000e578281602093846000960137010152565b9080601f8301121561000e578160206106489335910161086b565b503461000e57608036600319011261000e576108d76102c3565b6024356001600160401b039182821161000e576108f9600492369084016107e3565b9060443584811161000e5761091190369085016107e3565b9360643590811161000e5761092990369085016108a2565b92610932612403565b6001600160a01b038281169490919061094c861515614027565b6109598551885114613202565b610961614308565b9060005b86518110156109c7578061097c6109c2928b612fef565b51610987828a612fef565b5160005260976020526109bb6109b38960406000209060018060a01b0316600052602052604060002090565b9182546131f6565b9055612fc0565b610965565b50868887878360006040997f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8b51918a169180610a0589898361325f565b0390a43b610a0f57005b91610a379391600060209489519687958694859363bc197c8160e01b9b8c86528d8601613608565b03925af160009181610ad6575b50610aac5750506001610a55613346565b6308c379a014610a7f575b610a6657005b905162461bcd60e51b815290819061056f9082016133d2565b610a87613364565b80610a925750610a60565b835162461bcd60e51b815290819061056f90828601610637565b6001600160e01b03191603610abd57005b905162461bcd60e51b815290819061056f9082016132fd565b610af891925060203d8111610aff575b610af0818361078d565b810190613284565b9085610a44565b503d610ae6565b9060c060031983011261000e576001600160a01b0391600435838116810361000e57926001600160401b039260243584811161000e5783610b49916004016108a2565b93604435838116810361000e579360643591821161000e57610b6d916004016108a2565b91608435908116810361000e5790610648610589565b503461000e57610b9236610b06565b9493610ba860ff60009593955460081c16613c48565b610bb1856126d6565b80516001600160401b038111610cd2575b6000805160206143a183398151915291610be582610be08554612e74565b6139ff565b60209081601f8411600114610c58575093610c3993836104ba9a9794610c2b94610c3f9a98600092610c4d575b50508160011b916000199060031b1c19161790556128f5565b610c3486614241565b613d99565b8361407d565b610c4881613dae565b613f60565b015190503880610c12565b9190601f198416610c67612eae565b936000905b828210610cba57505084610c2b94610c3f9a9894610c3998946104ba9e9b9860019510610ca1575b505050811b0190556128f5565b015160001960f88460031b161c19169055388080610c94565b80600186978294978701518155019601940190610c6c565b610cda610720565b610bc2565b503461000e57602036600319011261000e5760043560005260fb6020526020600160406000200154604051908152f35b503461000e57604036600319011261000e5760ff610d56610d2e6102d9565b60043560005261015f60205260406000209060018060a01b0316600052602052604060002090565b546000911615610d8c575060207fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b4604051908152f35b60209061032b565b503461000e57604036600319011261000e57600435600052610192602052604060002060405190610dc482610737565b546001600160a01b03811680835260a09190911c602083015215610e2f575b610e13612710610e026001600160601b036020850151166024356137c7565b92519204916001600160a01b031690565b604080516001600160a01b039290921682526020820192909252f35b50610e386137a0565b610de3565b503461000e5760a036600319011261000e57610e576102c3565b610e5f6102d9565b906001600160401b039060443582811161000e57610e819036906004016107e3565b9160643581811161000e57610e9a9036906004016107e3565b9060843590811161000e57610eb39036906004016108a2565b6001600160a01b03939084610ec6614308565b168585169081148015610fe7575b610edd906130d9565b610eea8351855114613202565b858716610ef881151561313d565b610f00614308565b9160005b8551811015610fa15780886109bb6109b38d610f518c610f3387610f2c8f9a610f9c9b612fef565b5192612fef565b5195610f8b87610f6883610f51866000526097602052604060002090565b9060018060a01b0316600052602052604060002090565b54610f7582821015613197565b0391610f51846000526097602052604060002090565b556000526097602052604060002090565b610f04565b506104ba9894959693977f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb6040519185169180610fdf8b8b8361325f565b0390a4613685565b50610edd611025610ff6614308565b6001600160a01b0380891660009081526098602090815260408083209490931682529290925290205460ff1690565b9050610ed4565b503461000e5760408060031936011261000e576004359061104b6102d9565b60009280845260fb602052611065600184862001546125fb565b80845260fb60209081528385206001600160a01b03841660009081529152604090205460ff161561109557505051f35b80845260fb60209081528385206001600160a01b0384166000908152915260409020805460ff191660011790556001600160a01b03806110d3614308565b16921690600080516020614361833981519152858551a451f35b503461000e57604036600319011261000e576111076102d9565b6001600160a01b0380611118614308565b169082160361112d576104ba90600435612956565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b503461000e57602036600319011261000e576111a46102c3565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691906111dd308414156129ec565b6111fa600080516020614381833981519152938285541614612a4d565b61120261232a565b6040519061120f82610772565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156112495750506104ba9150612bc3565b6020600491604094939451928380926352d1902d60e01b825286165afa600091816112a0575b5061128d5760405162461bcd60e51b81528061056f60048201612b74565b6104ba9361129b9114612b16565b612d55565b6112c291925060203d81116112c9575b6112ba818361078d565b810190612afa565b903861126f565b503d6112b0565b600091031261000e57565b503461000e57600036600319011261000e576103946040516112fc81610737565b6005815264191719171b60d91b6020820152604051918291602083526020830190610612565b90815180825260208080930193019160005b828110611342575050505090565b835185529381019392810192600101611334565b906020610648928181520190611322565b503461000e57604036600319011261000e576004356001600160401b0380821161000e573660238301121561000e5781600401356113a4816107bd565b926113b2604051948561078d565b81845260209160248386019160051b8301019136831161000e57602401905b82821061140a578560243586811161000e57610394916113f86113fe9236906004016107e3565b90613011565b60405191829182611356565b838091611416846102ef565b8152019101906113d1565b50604036600319011261000e576114366102c3565b6024356001600160401b03811161000e576114559036906004016108a2565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692919061148f308514156129ec565b6114ac600080516020614381833981519152948286541614612a4d565b6114b461232a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156114ea5750506104ba9150612bc3565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181611541575b5061152e5760405162461bcd60e51b81528061056f60048201612b74565b6104ba9361153c9114612b16565b612c53565b61155a91925060203d81116112c9576112ba818361078d565b9038611510565b503461000e57600036600319011261000e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036115bc576040516000805160206143818339815191528152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e57600036600319011261000e5761039460405161164881610737565b600481526376302e3160e01b6020820152604051918291602083526020830190610612565b503461000e57602036600319011261000e57602060ff6116d261168e6102c3565b7f7a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb260005260fb845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57606036600319011261000e576116f86102d9565b611700610573565b90611709612216565b6117206127106001600160601b038416111561414c565b6001600160a01b038116156117a0576117606104ba926117506117416107ae565b6001600160a01b039094168452565b6001600160601b03166020830152565b611777600435600052610192602052604060002090565b815160209092015160a01b6001600160a01b0319166001600160a01b0392909216919091179055565b60405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606490fd5b503461000e57606036600319011261000e576117ff6102c3565b6001600160401b0360243581811161000e5761181f9036906004016107e3565b9060443590811161000e576118389036906004016107e3565b6001600160a01b03918261184a614308565b16838516908114801561193d575b611861906130d9565b61186c8115156136f0565b6118798251845114613202565b611881614308565b9361188a612aae565b5060005b83518110156118fa57806118a56118f59286612fef565b516118ef89610f516118b7858b612fef565b516118d083610f51876000526097602052604060002090565b546118dd82821015613748565b03936000526097602052604060002090565b55612fc0565b61188e565b506000946119327f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb939560405193849316958361325f565b0390a46104ba612aae565b5061186161194c610ff6614308565b9050611858565b503461000e57608036600319011261000e5761196d6102c3565b606435906044356024356001600160401b03841161000e576119966104ba9436906004016108a2565b9261199f612403565b6001600160a01b038181166119b5811515614027565b60006119bf614308565b926119c9866136bf565b506119d3876136bf565b508582526097602090815260408084206001600160a01b038816600090815292529020611a018882546131f6565b90556040805187815260208101899052918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629190a4613427565b503461000e57604036600319011261000e57602060ff6116d2611a5f6102d9565b60043560005260fb845260406000209060018060a01b0316600052602052604060002090565b503461000e5760208060031936011261000e576001600160401b039060043582811161000e57611ab99036906004016108a2565b91611ac26124ff565b8251908111611b86575b6000805160206143a183398151915291611aea82610be08554612e74565b80601f8311600114611b235750819293600092611b18575b50508160011b916000199060031b1c1916179055005b015190503880611b02565b90601f19831694611b32612eae565b926000905b878210611b6e575050836001959610611b55575b505050811b019055005b015160001960f88460031b161c19169055388080611b4b565b80600185968294968601518155019501930190611b37565b611b8e610720565b611acc565b503461000e57600036600319011261000e57602060405160008152f35b503461000e57604036600319011261000e57611bca6102c3565b602435801515810361000e57611bde614308565b6001600160a01b038381169390821692838514611c6557611c4e81611c3d611c6094610f517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319760018060a01b03166000526098602052604060002090565b9060ff801983541691151516179055565b60405190151581529081906020820190565b0390a3005b60405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608490fd5b503461000e57600036600319011261000e57600080516020614381833981519152546040516001600160a01b039091168152602090f35b503461000e57611d4d611d0536610b06565b9360009695969391935496611d3160ff8960081c16158099819a611dcb575b8115611dab575b50613be5565b87611d44600160ff196000541617600055565b611d9257613ca8565b611d5357005b611d6361ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b611da661010061ff00196000541617600055565b613ca8565b303b15915081611dbd575b5038611d2b565b6001915060ff161438611db6565b600160ff8216109150611d24565b503461000e57604036600319011261000e576104ba600435611df96102d9565b908060005260fb602052611e146001604060002001546125fb565b612956565b503461000e57600080600319360112611ef55760405190806000805160206143a183398151915290815490611e4d82612e74565b80865292600192808416908115611ed15750600114611e77575b6103948661069a8188038261078d565b815292507feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c6975b828410611eb957505050810160200161069a8261039438611e67565b80546020858701810191909152909301928101611e9d565b60ff19166020880152505060408501935061069a9250849150610394905038611e67565b80fd5b503461000e57604036600319011261000e57602060ff6116d2611f196102c3565b611f216102d9565b6001600160a01b0391821660009081526098865260408082209290931681526020919091522090565b503461000e5760a036600319011261000e57611f646102c3565b611f6c6102d9565b9060443560643590608435936001600160401b03851161000e57611f976104ba9536906004016108a2565b936001600160a01b0380611fa9614308565b1681831690811480156120a8575b611fc0906130d9565b81841690611fcf82151561313d565b611fd7614308565b92611fe1876136bf565b50611feb886136bf565b5060008781526097602090815260408083206001600160a01b0389168452909152902088905461201d82821015613197565b886000526097602052036120478660406000209060018060a01b0316600052602052604060002090565b5561206086610f51896000526097602052604060002090565b61206b8982546131f6565b905560408051888152602081018a9052918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629190a4613530565b50611fc06120e66120b7614308565b6001600160a01b0380871660009081526098602090815260408083209490931682529290925290205460ff1690565b9050611fb7565b503461000e57606036600319011261000e5760006121096102c3565b60443590602435907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62906001600160a01b039061193282612148614308565b16958383169687148015612200575b612160906130d9565b61216b8715156136f0565b612173614308565b9261217d876136bf565b50612187826136bf565b508860405161219581610772565b5286895260976020526121e4826121c18360408d209060018060a01b0316600052602052604060002090565b546121ce82821015613748565b0391610f51896000526097602052604060002090565b5560405193849316958360209093929193604081019481520152565b5061216061220f6120b7614308565b9050612157565b61221e614308565b6001600160a01b03811660009081527fef93721591a8283ebcbc635d4596270f18296615bf2ad2acc05699794bf1433160205260409020547feb54e1feee3ae17add098cbf58a47457bf5f7c3a89ceab263cbdb01b3da6d98e919060ff1615612285575050565b612297906001600160a01b03166138d2565b906122a0612ac1565b9060306122ac83613826565b5360786122b88361383c565b5360415b600181116122db5761056f603761055786610549876104e18815613887565b9080600f6123189216601081101561231d575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a61230e848661384d565b5360041c9161386c565b6122bc565b612325612fd8565b6122ee565b612332614308565b6001600160a01b03811660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604090205460ff16156123755750565b612387906001600160a01b03166138d2565b6000612391612ac1565b90603061239d83613826565b5360786123a98361383c565b5360415b600181116123cc5761056f603761055786610549876104e18815613887565b9080600f6123fe9216601081101561231d576f181899199a1a9b1b9c1cb0b131b232b360811b901a61230e848661384d565b6123ad565b61240b614308565b6001600160a01b03811660009081527f72f2994cda805697ff5940dc92bd4118d9d7058b657a897ee8a2023e4f67343460205260409020547f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6919060ff1615612472575050565b612484906001600160a01b03166138d2565b9061248d612ac1565b90603061249983613826565b5360786124a58361383c565b5360415b600181116124c85761056f603761055786610549876104e18815613887565b9080600f6124fa9216601081101561231d576f181899199a1a9b1b9c1cb0b131b232b360811b901a61230e848661384d565b6124a9565b612507614308565b6001600160a01b03811660009081527fd79c98b0e2162ca3184e1e6688bf8c1c5461f86efaaae3675641a8fbeb30644560205260409020547f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c15919060ff161561256e575050565b612580906001600160a01b03166138d2565b90612589612ac1565b90603061259583613826565b5360786125a18361383c565b5360415b600181116125c45761056f603761055786610549876104e18815613887565b9080600f6125f69216601081101561231d576f181899199a1a9b1b9c1cb0b131b232b360811b901a61230e848661384d565b6125a5565b612603614308565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff1615612632575050565b612644906001600160a01b03166138d2565b9061264d612ac1565b90603061265983613826565b5360786126658361383c565b5360415b600181116126885761056f603761055786610549876104e18815613887565b9080600f6126ba9216601081101561231d576f181899199a1a9b1b9c1cb0b131b232b360811b901a61230e848661384d565b612669565b906126d2602092828151948592016105dd565b0190565b6001600160a01b03811660009081527fd79c98b0e2162ca3184e1e6688bf8c1c5461f86efaaae3675641a8fbeb306445602052604090207f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c159060ff905b54161561273e575050565b600081815260fb602090815260408083206001600160a01b03861684529091529020805460ff191660011790556001600160a01b038061277c614308565b169216906000805160206143618339815191526000604051a4565b6001600160a01b03811660009081527fb068b61a200639681129aa64c43b97b3c570787e8e53d8feb93bcc67b3afb6a9602052604090207f8e6595ef9afb2a8f70320f393f567bb7a0e6c4ed483caee30f90cc5fcd6659b49060ff90612733565b6001600160a01b03811660009081527f72f2994cda805697ff5940dc92bd4118d9d7058b657a897ee8a2023e4f673434602052604090207f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a69060ff90612733565b6001600160a01b03811660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604081205460ff161561289d575050565b80805260fb602090815260408083206001600160a01b038516600090815292529020805460ff191660011790556001600160a01b03806128db614308565b1692169060008051602061436183398151915281604051a4565b6001600160a01b03811660009081527f452ae8ad28077a8dde36d329380df9bfd96077640c4bb696c45031c2933e8ad8602052604090207f7a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb29060ff90612733565b600081815260fb602090815260408083206001600160a01b038616845290915290205460ff16612984575050565b600081815260fb602090815260408083206001600160a01b03861684529091529020805460ff191690556001600160a01b03806129bf614308565b169216907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b6000604051a4565b156129f357565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15612a5457565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b60405190612abb82610772565b60008252565b60405190608082018281106001600160401b03821117612aed575b604052604282526060366020840137565b612af5610720565b612adc565b9081602091031261000e575190565b506040513d6000823e3d90fd5b15612b1d57565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b60809060208152602e60208201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960408201526d6f6e206973206e6f74205555505360901b60608201520190565b803b15612bf85760008051602061438183398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b612c5c81612bc3565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590612d4d575b612ca257505050565b813b15612cfc575060008281926020612cf295519201905af43d15612cf5573d612ccb81610841565b90612cd9604051928361078d565b81523d6000602083013e5b612cec612e0d565b916137e6565b50565b6060612ce4565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b506001612c99565b90612d5f82612bc3565b604051600092906001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8583a2825115801590612e06575b612daa575b50505050565b813b15612cfc5750918082612df49460208395519201905af4903d15612dfe573d612dd481610841565b90612de2604051928361078d565b8152809160203d92013e612cec612e0d565b5038808080612da4565b506060612ce4565b5083612d9f565b60405190606082018281106001600160401b03821117612e67575b60405260278252660819985a5b195960ca1b6040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b612e6f610720565b612e28565b90600182811c92168015612ea4575b6020831014612e8e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612e83565b6000805160206143a18339815191526000527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c69790565b6001600160a01b03811615612f1f57612f1b91600052609760205260406000209060018060a01b0316600052602052604060002090565b5490565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b6064820152608490fd5b90612f81826107bd565b612f8e604051918261078d565b8281528092612f9f601f19916107bd565b0190602036910137565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114612fd0570190565b6126d2612fa9565b50634e487b7160e01b600052603260045260246000fd5b6020918151811015613004575b60051b010190565b61300c612fd8565b612ffc565b9190918051835103613082576130278151612f77565b9060005b815181101561307b57806130666130556130486130769486612fef565b516001600160a01b031690565b61305f8389612fef565b5190612ee4565b6130708286612fef565b52612fc0565b61302b565b5090925050565b60405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608490fd5b156130e057565b60405162461bcd60e51b815260206004820152602f60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526e195c881b9bdc88185c1c1c9bdd9959608a1b6064820152608490fd5b1561314457565b60405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b1561319e57565b60405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608490fd5b81198111612fd0570190565b1561320957565b60405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608490fd5b909161327661064893604084526040840190611322565b916020818403910152611322565b9081602091031261000e575161064881610333565b909260a0926106489594600180861b0316835260006020840152604083015260608201528160808201520190610612565b919261064895949160a094600180871b038092168552166020840152604083015260608201528160808201520190610612565b60809060208152602860208201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b60608201520190565b60009060033d1161335357565b905060046000803e60005160e01c90565b600060443d1061064857604051600319913d83016004833e81516001600160401b03918282113d6024840111176133c1578184019485519384116133c9573d850101602084870101116133c157506106489291016020019061078d565b949350505050565b50949350505050565b60809060208152603460208201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60608201520190565b9390803b613437575b5050505050565b61345f9360006020946040519687958694859363f23a6e6160e01b9b8c865260048601613299565b03926001600160a01b03165af160009181613510575b506134e85750506001613486613346565b6308c379a0146134b9575b6134a0575b3880808080613430565b60405162461bcd60e51b81528061056f600482016133d2565b6134c1613364565b806134cc5750613491565b60405162461bcd60e51b815290819061056f9060048301610637565b6001600160e01b031916146134965760405162461bcd60e51b81528061056f600482016132fd565b61352991925060203d8111610aff57610af0818361078d565b9038613475565b9493919092813b613544575b505050505050565b600060209461356b6040519788968795869463f23a6e6160e01b9c8d8752600487016132ca565b03926001600160a01b03165af1600091816135e8575b506135c05750506001613592613346565b6308c379a0146135ad575b6134a0575b38808080808061353c565b6135b5613364565b806134cc575061359d565b6001600160e01b031916146135a25760405162461bcd60e51b81528061056f600482016132fd565b61360191925060203d8111610aff57610af0818361078d565b9038613581565b9261363761064895936136459360018060a01b031686526000602087015260a0604087015260a0860190611322565b908482036060860152611322565b916080818403910152610612565b93906106489593613637916136459460018060a01b03809216885216602087015260a0604087015260a0860190611322565b9493919092813b61369857505050505050565b600060209461356b6040519788968795869463bc197c8160e01b9c8d875260048701613653565b604051906136cc82610737565b600182526020820160203682378251156136e4575290565b6136ec612fd8565b5290565b156136f757565b60405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b1561374f57565b60405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608490fd5b604051906137ad82610737565b610191546001600160a01b038116835260a01c6020830152565b80600019048211811515166137da570290565b6137e2612fa9565b0290565b909190156137f2575090565b8151156138025750805190602001fd5b60405162461bcd60e51b81526020600482015290819061056f906024830190610612565b602090805115613834570190565b6126d2612fd8565b602190805160011015613834570190565b90602091805182101561385f57010190565b613867612fd8565b010190565b801561387a575b6000190190565b613882612fa9565b613873565b1561388e57565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b60405190606082018281106001600160401b03821117613962575b604052602a82526040366020840137603061390783613826565b5360786139138361383c565b536029905b6001821161392b57610648915015613887565b80600f61395c9216601081101561231d576f181899199a1a9b1b9c1cb0b131b232b360811b901a61230e848661384d565b90613918565b61396a610720565b6138ed565b7f8e6595ef9afb2a8f70320f393f567bb7a0e6c4ed483caee30f90cc5fcd6659b4613998612ac1565b9060306139a483613826565b5360786139b08361383c565b536041905b600182116139c857610648915015613887565b80600f6139f99216601081101561231d576f181899199a1a9b1b9c1cb0b131b232b360811b901a61230e848661384d565b906139b5565b601f8111613a0b575050565b6000906000805160206143a183398151915282527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c697906020601f850160051c83019410613a73575b601f0160051c01915b828110613a6857505050565b818155600101613a5c565b9092508290613a53565b601f8111613a89575050565b600090609982527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d00906020601f850160051c83019410613ae4575b601f0160051c01915b828110613ad957505050565b818155600101613acd565b9092508290613ac4565b9081516001600160401b038111613bd8575b613b1481613b0f609954612e74565b613a7d565b602080601f8311600114613b505750819293600092613b45575b50508160011b916000199060031b1c191617609955565b015190503880613b2e565b90601f19831694613b8360996000527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d0090565b926000905b878210613bc0575050836001959610613ba7575b505050811b01609955565b015160001960f88460031b161c19169055388080613b9c565b80600185968294968601518155019501930190613b88565b613be0610720565b613b00565b15613bec57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b15613c4f57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b9493929190613cb6866126d6565b80516001600160401b038111613d8c575b6000805160206143a183398151915291613ce582610be08554612e74565b60209081601f8411600114613d2b575093610c3993836107bb9a999794610c2b94610c3f9a98600092610c4d5750508160011b916000199060031b1c19161790556128f5565b9190601f198416613d3a612eae565b936000905b828210613d7457505084610c2b94610c3f9a9894610c3998946107bb9e9d9b9860019510610ca157505050811b0190556128f5565b80600186978294978701518155019601940190613d3f565b613d94610720565b613cc7565b6107bb906104b560ff60005460081c16613c48565b613db790612797565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b613dd55750565b803b1561000e5760405163a41e7d5160e01b808252306004830152632e93c56f60e11b6024830152600091828160448183885af18015613f53575b613f40575b50823b15613efc57604051908152306004820152636cdb3d1360e11b6024820152818160448183875af18015613f33575b613f20575b50813b15611ef5576040516329965a1d60e01b80825230600483018190526001635d278adf60e01b036024840152604483015290828160648183885af18015613f13575b613f00575b50823b15613efc576040519081523060048201819052600163d9b67a2760e01b0360248301526044820152918290818381606481015b03925af18015613eef575b613edc5750565b80613ee96107bb9261075f565b806112d0565b613ef7612b09565b613ed5565b5080fd5b80613ee9613f0d9261075f565b38613e94565b613f1b612b09565b613e8f565b80613ee9613f2d9261075f565b38613e4b565b613f3b612b09565b613e46565b80613ee9613f4d9261075f565b38613e15565b613f5b612b09565b613e10565b613f69906127f8565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b613f875750565b803b1561000e5760405163a41e7d5160e01b8152306004820152636c6eec1360e01b6024820152600090818160448183875af1801561401a575b614007575b50813b15611ef5576040516329965a1d60e01b815230600482018190526001631b1bbb0560e21b036024830152604482015291829081838160648101613eca565b80613ee96140149261075f565b38613fc6565b614022612b09565b613fc1565b1561402e57565b60405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b6001600160a01b03811660009081527fef93721591a8283ebcbc635d4596270f18296615bf2ad2acc05699794bf1433160205260409020546107bb939291907feb54e1feee3ae17add098cbf58a47457bf5f7c3a89ceab263cbdb01b3da6d98e9060ff16156140ee575b50506141ab565b600081815260fb602090815260408083206001600160a01b03861684529091529020805460ff191660011790556001600160a01b038061412c614308565b169216906000805160206143618339815191526000604051a438806140e7565b1561415357565b60405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608490fd5b906001600160601b038116916141c561271084111561414c565b6001600160a01b03169182156141fc5760206040516141e381610737565b848152015260a01b6001600160a01b0319161761019155565b60405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606490fd5b61424a90612859565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b6142685750565b803b1561000e5760405163a41e7d5160e01b815230600482015263054fd4d560e41b6024820152600090818160448183875af180156142fb575b6142e8575b50813b15611ef5576040516329965a1d60e01b8152306004820181905260016354fd4d5160e01b036024830152604482015291829081838160648101613eca565b80613ee96142f59261075f565b386142a7565b614303612b09565b6142a2565b601436101580614328575b156143245736601319013560601c90565b3390565b503360009081527f452ae8ad28077a8dde36d329380df9bfd96077640c4bb696c45031c2933e8ad8602052604090205460ff1661431356fe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc59c86eba0f8c3c9659b86fb2776edca2ff990d1509243e9705ae43a6831558c6a26469706673582212209d1c6102c36d5c187bfa284b792d4a819c8b3fec3c831f10b51028f66b259da364736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "canImplementInterfaceForAddress(bytes32,address)": {
        "details": "See {IERC1820Implementer-canImplementInterfaceForAddress}."
      },
      "contractURI()": {
        "details": "Returns collection-wide URI-accessible metadata"
      },
      "getImplementation()": {
        "details": "Returns the implementation address."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,string,address,string,address,uint96)": {
        "details": "Initializes an ERC1155Mintable contract",
        "params": {
          "_admin": "admin for contract",
          "_feeNumerator": "numerator of royalty fee percentage (numerator / 10000)",
          "_feeReceiver": "address of receiver of royalty fees",
          "_gsnForwarder": "GSN Trusted forwarder",
          "_initContractURI": "uri for contract metadata description",
          "_uri": "URI for tokens"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isTrustedForwarder(address)": {
        "details": "Determine is an address a GSN trusted forwarder.",
        "params": {
          "forwarder": "address to query"
        },
        "returns": {
          "_0": "OpenGSN trusted forwarder status"
        }
      },
      "mint(address,uint256,uint256,bytes)": {
        "details": "Allows MINTER_ROLE to mint NFTs",
        "params": {
          "amount": "to mint",
          "data": "for hooks",
          "id": "tokenId value",
          "to": "address to"
        }
      },
      "mintBatch(address,uint256[],uint256[],bytes)": {
        "details": "Allows caller to mint NFTs (safeMint)",
        "params": {
          "amounts": "to mint",
          "data": "for hooks",
          "ids": "id values",
          "to": "address to"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setContractURI(string)": {
        "details": "Set contract uri"
      },
      "setDefaultRoyalty(address,uint96)": {
        "details": "Exposing `_setDefaultRoyalty`"
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "details": "exposing `_setTokenRoyalty`"
      },
      "setURI(string)": {
        "details": "Allows setting the uri",
        "params": {
          "newuri": "set the baseURI value."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "ERC165 Support",
        "params": {
          "interfaceId": "XOR of the external functions of the interface"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      },
      "version()": {
        "details": "OwlProtocol contract version. Used to determine compatibility interoperable with other Owl contracts."
      },
      "versionRecipient()": {
        "details": "Returns OpenGSN contract version (used for compatibility checks)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1451,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1454,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1433,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7523,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8038,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1887,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "_balances",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1893,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1895,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "_uri",
        "offset": 0,
        "slot": "153",
        "type": "t_string_storage"
      },
      {
        "astId": 3102,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 3354,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 426,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "_roles",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)421_storage)"
      },
      {
        "astId": 725,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1730,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8071,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "351",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8117,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7006,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "401",
        "type": "t_struct(RoyaltyInfo)7003_storage"
      },
      {
        "astId": 7011,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "402",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)7003_storage)"
      },
      {
        "astId": 7191,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "__gap",
        "offset": 0,
        "slot": "403",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 9163,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "__gap",
        "offset": 0,
        "slot": "451",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9368,
        "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
        "label": "__gap",
        "offset": 0,
        "slot": "501",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)421_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)421_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)7003_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981Upgradeable.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)7003_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)421_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 418,
            "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 420,
            "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoyaltyInfo)7003_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981Upgradeable.RoyaltyInfo",
        "members": [
          {
            "astId": 7000,
            "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7002,
            "contract": "contracts/assets/ERC1155/ERC1155Mintable.sol:ERC1155Mintable",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}