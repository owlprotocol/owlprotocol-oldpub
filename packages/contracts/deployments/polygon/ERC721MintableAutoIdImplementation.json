{
  "address": "0xF9EB3666E3fc08D473c05C337a006D36D13044bF",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interfaceHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canImplementInterfaceForAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_initContractURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_gsnForwarder",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_initBaseURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_initContractURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_gsnForwarder",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_initBaseURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "proxyInitialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "safeMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "2fe98e12c0031ec2a7dec3df9237bffc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canImplementInterfaceForAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_initContractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_gsnForwarder\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feeNumerator\",\"type\":\"uint96\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_initContractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_gsnForwarder\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feeNumerator\",\"type\":\"uint96\"}],\"name\":\"proxyInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This implements the standard OwlProtocol `ERC721` contract that is an extension of Openzeppelin's `ERC721BurnableUpgradeable`. Initializations happens through initializers for compatibility with a EIP1167 minimal-proxy deployment strategy.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"details\":\"Returns collection-wide URI-accessible metadata\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"canImplementInterfaceForAddress(bytes32,address)\":{\"details\":\"See {IERC1820Implementer-canImplementInterfaceForAddress}.\"},\"contractURI()\":{\"details\":\"Returns collection-wide URI-accessible metadata\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getImplementation()\":{\"details\":\"Returns the implementation address.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,string,address,string,string,string,address,uint96)\":{\"details\":\"Initializes an ERC721MintableAutoId contract\",\"params\":{\"_admin\":\"admin for contract\",\"_feeNumerator\":\"numerator of royalty fee percentage (numerator / 10000)\",\"_feeReceiver\":\"address of receiver of royalty fees\",\"_gsnForwarder\":\"GSN Trusted forwarder\",\"_initBaseURI\":\"base URI for contract\",\"_initContractURI\":\"uri for contract metadata description\",\"_name\":\"name for contract\",\"_symbol\":\"symbol for contract\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isTrustedForwarder(address)\":{\"details\":\"Determine is an address a GSN trusted forwarder.\",\"params\":{\"forwarder\":\"address to query\"},\"returns\":{\"_0\":\"OpenGSN trusted forwarder status\"}},\"mint(address)\":{\"details\":\"Allows MINTER_ROLE to mint NFTs\",\"params\":{\"to\":\"address to\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"proxyInitialize(address,string,address,string,string,string,address,uint96)\":{\"details\":\"Initializes contract through beacon proxy (replaces constructor in proxy pattern)\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeMint(address)\":{\"details\":\"Allows caller to mint NFTs (safeMint)\",\"params\":{\"to\":\"address to\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"Set contract uri\"},\"setContractURI(string)\":{\"details\":\"Set contract uri\"},\"setDefaultRoyalty(address,uint96)\":{\"details\":\"Exposing `_setDefaultRoyalty`\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"details\":\"exposing `_setTokenRoyalty`\"},\"supportsInterface(bytes4)\":{\"details\":\"ERC165 Support\",\"params\":{\"interfaceId\":\"hash of the interface testing for\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"version()\":{\"details\":\"OwlProtocol contract version. Used to determine compatibility interoperable with other Owl contracts.\"},\"versionRecipient()\":{\"details\":\"Returns OpenGSN contract version (used for compatibility checks)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(address)\":{\"notice\":\"Must have MINTER_ROLE\"},\"safeMint(address)\":{\"notice\":\"Must have MINTER_ROLE\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/assets/ERC721/ERC721MintableAutoId.sol\":\"ERC721MintableAutoId\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa8ff557539dcfed5706eddde2aa929e06bb1764e71aa8c1048a78970bf3ca37d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa7dbff7171ac06a023a5ca52c2138ac711037b2146b9197a52e5de4f9183e04d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\\n    function __ERC2981_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC2981_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981Upgradeable\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x1ad46ec868f3cbf4331949daad82a6b2d846f2f3944cf0d53805f2296c30593b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC1820ImplementerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC1820Implementer.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1820ImplementerUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC1820Implementer} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\\n * declare their willingness to be implementers.\\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\\n * registration to be complete.\\n */\\ncontract ERC1820ImplementerUpgradeable is Initializable, IERC1820ImplementerUpgradeable {\\n    function __ERC1820Implementer_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1820Implementer_init_unchained() internal onlyInitializing {\\n    }\\n    bytes32 private constant _ERC1820_ACCEPT_MAGIC = keccak256(\\\"ERC1820_ACCEPT_MAGIC\\\");\\n\\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bytes32)\\n    {\\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\\n    }\\n\\n    /**\\n     * @dev Declares the contract as willing to be an implementer of\\n     * `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer} and\\n     * {IERC1820Registry-interfaceHash}.\\n     */\\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\\n        _supportedInterfaces[interfaceHash][account] = true;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2666448e505df89f06bc8b5e8ae83ed3b5411e54fb69694510ec3620269534b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820ImplementerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Implementer.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for an ERC1820 implementer, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\\n * Used by contracts that will be registered as implementers in the\\n * {IERC1820Registry}.\\n */\\ninterface IERC1820ImplementerUpgradeable {\\n    /**\\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\\n     * implements `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xce35b9f17b74b88eb612b1ae727a25e3d91129c254beba840e9de2006b872978\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/introspection/IERC1820Registry.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820RegistryUpgradeable {\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc4b50ac2351fc9eb8e89b0a039d794db665e7e93bbc83c70da0e683bfc801971\",\"license\":\"MIT\"},\"contracts/assets/ERC721/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\n\\nimport {IERC721Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport {ERC721Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\\nimport {ERC721BurnableUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol';\\n\\nimport {StorageSlotString} from '../../utils/StorageSlotString.sol';\\n\\nimport {OwlBase} from '../../common/OwlBase.sol';\\nimport {BaseURI} from '../../common/BaseURI.sol';\\nimport {ERC2981Setter} from '../common/ERC2981Setter.sol';\\nimport {IERC2981Setter} from '../common/IERC2981Setter.sol';\\n\\n/**\\n * @dev This implements the standard OwlProtocol `ERC721` contract that is an\\n * extension of Openzeppelin's `ERC721BurnableUpgradeable`. Initializations\\n * happens through initializers for compatibility with a EIP1167 minimal-proxy\\n * deployment strategy. No external mint functions are defined.\\n */\\nabstract contract ERC721Base is ERC721BurnableUpgradeable, OwlBase, BaseURI, ERC2981Setter {\\n    //https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private __gap;\\n\\n    /**********************\\n        Initialization\\n    **********************/\\n    function __ERC721Base_init(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _initBaseURI,\\n        address _feeReceiver,\\n        uint96 _feeNumerator\\n    ) internal {\\n        __ContractURI_init_unchained(_admin, _initContractURI);\\n        __RouterReceiver_init_unchained(_gsnForwarder);\\n        __OwlBase_init_unchained(_admin);\\n\\n        __ERC721_init_unchained(_name, _symbol);\\n        __BaseURI_init_unchained(_admin, _initBaseURI);\\n        __ERC2981Setter_init_unchained(_admin, _feeReceiver, _feeNumerator);\\n        __ERC721Base_init_unchained();\\n    }\\n\\n    function __ERC721Base_init_unchained() internal {\\n        if (AddressUpgradeable.isContract(ERC1820_REGISTRY)) {\\n            registry.updateERC165Cache(address(this), type(IERC2981Setter).interfaceId);\\n            registry.updateERC165Cache(address(this), type(IERC721Upgradeable).interfaceId);\\n            registry.setInterfaceImplementer(address(this), type(IERC2981Setter).interfaceId | ONE, address(this));\\n            registry.setInterfaceImplementer(address(this), type(IERC721Upgradeable).interfaceId | ONE, address(this));\\n        }\\n    }\\n\\n    /**********************\\n          Interaction\\n    **********************/\\n    /**\\n     * @dev Overrides OZ internal baseURI getter.\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return StorageSlotString.getStringSlot(_BASE_URI_SLOT).value;\\n    }\\n\\n    /**\\n     * @inheritdoc OwlBase\\n     */\\n    function _msgSender() internal view override(OwlBase, ContextUpgradeable) returns (address) {\\n        return OwlBase._msgSender();\\n    }\\n\\n    /**\\n     * @inheritdoc OwlBase\\n     */\\n    function _msgData() internal view override(OwlBase, ContextUpgradeable) returns (bytes calldata) {\\n        return OwlBase._msgData();\\n    }\\n\\n    /**\\n     * @inheritdoc OwlBase\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OwlBase, ERC721Upgradeable, ERC2981Setter, BaseURI)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x7d512791e7cb9ef493540c91d8ddcc91d842109b07befdc6b455472d476067e5\",\"license\":\"MIT\"},\"contracts/assets/ERC721/ERC721MintableAutoId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {CountersUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol';\\nimport {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\n\\nimport {ERC721Base} from './ERC721Base.sol';\\nimport {IERC721MintableAutoId} from './IERC721MintableAutoId.sol';\\n\\n/**\\n * @dev This implements the standard OwlProtocol `ERC721` contract that is an\\n * extension of Openzeppelin's `ERC721BurnableUpgradeable`. Initializations\\n * happens through initializers for compatibility with a EIP1167 minimal-proxy\\n * deployment strategy.\\n */\\ncontract ERC721MintableAutoId is ERC721Base, IERC721MintableAutoId {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    bytes32 internal constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n\\n    // Auto-incrementing tokenIds\\n    CountersUpgradeable.Counter private nextId; //1 slot\\n\\n    //https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[49] private __gap;\\n\\n    constructor() {}\\n\\n    /**********************\\n        Initialization\\n    **********************/\\n\\n    /**\\n     * @dev Initializes an ERC721MintableAutoId contract\\n     * @param _admin admin for contract\\n     * @param _initContractURI uri for contract metadata description\\n     * @param _gsnForwarder GSN Trusted forwarder\\n     * @param _name name for contract\\n     * @param _symbol symbol for contract\\n     * @param _initBaseURI base URI for contract\\n     * @param _feeReceiver address of receiver of royalty fees\\n     * @param _feeNumerator numerator of royalty fee percentage (numerator / 10000)\\n     */\\n    function initialize(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _initBaseURI,\\n        address _feeReceiver,\\n        uint96 _feeNumerator\\n    ) external virtual initializer {\\n        __ERC721MintableAutoId_init(\\n            _admin,\\n            _initContractURI,\\n            _gsnForwarder,\\n            _name,\\n            _symbol,\\n            _initBaseURI,\\n            _feeReceiver,\\n            _feeNumerator\\n        );\\n    }\\n\\n    /**\\n     * @dev Initializes contract through beacon proxy (replaces constructor in\\n     * proxy pattern)\\n     */\\n    function proxyInitialize(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _initBaseURI,\\n        address _feeReceiver,\\n        uint96 _feeNumerator\\n    ) external virtual onlyInitializing {\\n        __ERC721MintableAutoId_init(\\n            _admin,\\n            _initContractURI,\\n            _gsnForwarder,\\n            _name,\\n            _symbol,\\n            _initBaseURI,\\n            _feeReceiver,\\n            _feeNumerator\\n        );\\n    }\\n\\n    function __ERC721MintableAutoId_init(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _initBaseURI,\\n        address _feeReceiver,\\n        uint96 _feeNumerator\\n    ) internal {\\n        __ContractURI_init_unchained(_admin, _initContractURI);\\n        __RouterReceiver_init_unchained(_gsnForwarder);\\n        __OwlBase_init_unchained(_admin);\\n\\n        __ERC721_init_unchained(_name, _symbol);\\n        __BaseURI_init_unchained(_admin, _initBaseURI);\\n        __ERC2981Setter_init_unchained(_admin, _feeReceiver, _feeNumerator);\\n        __ERC721Base_init_unchained();\\n        __ERC721MintableAutoId_init_unchained(_admin);\\n    }\\n\\n    function __ERC721MintableAutoId_init_unchained(address _minterRole) internal {\\n        _grantRole(MINTER_ROLE, _minterRole);\\n        if (AddressUpgradeable.isContract(ERC1820_REGISTRY)) {\\n            registry.updateERC165Cache(address(this), type(IERC721MintableAutoId).interfaceId);\\n            registry.setInterfaceImplementer(\\n                address(this),\\n                type(IERC721MintableAutoId).interfaceId | ONE,\\n                address(this)\\n            );\\n        }\\n\\n        //Start at 1\\n        nextId.increment();\\n    }\\n\\n    /**********************\\n          Interaction\\n    **********************/\\n\\n    /**\\n     * @notice Must have MINTER_ROLE\\n     * @dev Allows MINTER_ROLE to mint NFTs\\n     * @param to address to\\n     */\\n    function mint(address to) public virtual onlyRole(MINTER_ROLE) returns (uint256) {\\n        uint256 tokenId = nextId.current();\\n        nextId.increment();\\n\\n        _mint(to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @notice Must have MINTER_ROLE\\n     * @dev Allows caller to mint NFTs (safeMint)\\n     * @param to address to\\n     */\\n    function safeMint(address to) public virtual onlyRole(MINTER_ROLE) returns (uint256) {\\n        uint256 tokenId = nextId.current();\\n        nextId.increment();\\n\\n        _safeMint(to, tokenId, '');\\n\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId hash of the interface testing for\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC721MintableAutoId).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xd7518fb857e8258b5d4ae905bb6ebf27cbfb4cfd13c7e06f274ad91cb2cdbae2\",\"license\":\"MIT\"},\"contracts/assets/ERC721/IERC721MintableAutoId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * Interface for nested NFT that can be minted with auto-Id.\\n */\\ninterface IERC721MintableAutoId {\\n    /***** Minting *****/\\n    function mint(address to) external returns (uint256);\\n    function safeMint(address to) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x925cd324edb14711006c0c88c99cbd3333c6b283cf03ac8856f6040805161dd9\",\"license\":\"MIT\"},\"contracts/assets/common/ERC2981Setter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {ERC2981Upgradeable} from '@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol';\\n\\nimport {IERC2981Setter} from './IERC2981Setter.sol';\\n\\n/**\\n * @dev ERC2981 with access control public functions\\n */\\nabstract contract ERC2981Setter is AccessControlUpgradeable, ERC2981Upgradeable, IERC2981Setter {\\n    bytes32 internal constant ROYALTY_ROLE = keccak256('ROYALTY_ROLE');\\n\\n    /**\\n     * @dev ERC2981Setter chained initialization\\n     * @param _royaltyRole write role\\n     * @param _royaltyReceiver initial royalty receiver\\n     * @param _feeNumerator fee numerator\\n     */\\n    function __ERC2981Setter_init(\\n        address _royaltyRole,\\n        address _royaltyReceiver,\\n        uint96 _feeNumerator\\n    ) internal {\\n        __ERC2981Setter_init_unchained(_royaltyRole, _royaltyReceiver, _feeNumerator);\\n    }\\n\\n    /**\\n     * @dev ERC2981Setter unchained initialization\\n     * @param _royaltyRole write role\\n     * @param _royaltyReceiver initial royalty receiver\\n     * @param _feeNumerator fee numerator\\n     */\\n    function __ERC2981Setter_init_unchained(\\n        address _royaltyRole,\\n        address _royaltyReceiver,\\n        uint96 _feeNumerator\\n    ) internal {\\n        _grantRole(ROYALTY_ROLE, _royaltyRole);\\n        _setDefaultRoyalty(_royaltyReceiver, _feeNumerator);\\n    }\\n\\n    /**\\n     * @dev exposing `_setTokenRoyalty`\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyRole(ROYALTY_ROLE) {\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Exposing `_setDefaultRoyalty`\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyRole(ROYALTY_ROLE) {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId hash of the interface testing for\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlUpgradeable, ERC2981Upgradeable)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC2981Setter).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbdf00f92cb6a8204a08214cfb6146630ee62a2386cc1744f6f17844ba03185f0\",\"license\":\"MIT\"},\"contracts/assets/common/IERC2981Setter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard setter\\n */\\ninterface IERC2981Setter  {\\n    /**\\n     * @dev exposing `_setTokenRoyalty`\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external;\\n\\n    /**\\n     * @dev Exposing `_setDefaultRoyalty`\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n}\\n\",\"keccak256\":\"0x57b8a826f5bc10fcafb3f862b6fc158a14506e72ca0b568caee488dc0ffc8d8b\",\"license\":\"MIT\"},\"contracts/common/BaseURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {IBaseURI} from './IBaseURI.sol';\\nimport {StorageSlotString} from '../utils/StorageSlotString.sol';\\n\\n/**\\n * @dev Implements contract uri getter/setter\\n */\\ncontract BaseURI is AccessControlUpgradeable, IBaseURI {\\n    bytes32 internal constant BASE_URI_ROLE = keccak256('BASE_URI_ROLE');\\n    bytes32 internal constant _BASE_URI_SLOT = keccak256('BASE_URI');\\n\\n    /**\\n     * @dev BaseURI chained initialization\\n     * @param _baseUriRole write role\\n     * @param _initBaseURI initial contract uri\\n     */\\n    function __BaseURI_init(address _baseUriRole, string memory _initBaseURI) internal {\\n        __BaseURI_init_unchained(_baseUriRole, _initBaseURI);\\n    }\\n\\n    /**\\n     * @dev BaseURI unchained initialization.\\n     * @param _baseUriRole write role\\n     * @param _initBaseURI initial contract uri\\n     */\\n    function __BaseURI_init_unchained(address _baseUriRole, string memory _initBaseURI) internal {\\n        _grantRole(BASE_URI_ROLE, _baseUriRole);\\n        StorageSlotString.getStringSlot(_BASE_URI_SLOT).value = _initBaseURI;\\n    }\\n\\n    /**\\n     * @dev Returns collection-wide URI-accessible metadata\\n     */\\n    function baseURI() public view returns (string memory) {\\n        return StorageSlotString.getStringSlot(_BASE_URI_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Set contract uri\\n     */\\n    function setBaseURI(string memory uri) external onlyRole(BASE_URI_ROLE) {\\n        StorageSlotString.getStringSlot(_BASE_URI_SLOT).value = uri;\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IBaseURI).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x0512e97c4bd6d5660ea1b03c0d8f9a1801149c225105a2b7f8262cfe242b5d52\",\"license\":\"MIT\"},\"contracts/common/ContractURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {IContractURI} from './IContractURI.sol';\\nimport {StorageSlotString} from '../utils/StorageSlotString.sol';\\n\\n/**\\n * @dev Implements contract uri getter/setter\\n */\\ncontract ContractURI is AccessControlUpgradeable, IContractURI {\\n    bytes32 internal constant CONTRACT_URI_ROLE = keccak256('CONTRACT_URI_ROLE');\\n    bytes32 internal constant _CONTRACT_URI_SLOT = keccak256('CONTRACT_URI');\\n\\n    /**\\n     * @dev ContractURI chained initialization\\n     * @param _contractUriRole write role\\n     * @param _initContractURI initial contract uri\\n     */\\n    function __ContractURI_init(address _contractUriRole, string memory _initContractURI) internal {\\n        __ContractURI_init_unchained(_contractUriRole, _initContractURI);\\n    }\\n\\n    /**\\n     * @dev ContractURI unchained initialization.\\n     * @param _contractUriRole write role\\n     * @param _initContractURI initial contract uri\\n     */\\n    function __ContractURI_init_unchained(address _contractUriRole, string memory _initContractURI) internal {\\n        _grantRole(CONTRACT_URI_ROLE, _contractUriRole);\\n        StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value = _initContractURI;\\n    }\\n\\n    /**\\n     * @dev Returns collection-wide URI-accessible metadata\\n     */\\n    function contractURI() public view returns (string memory) {\\n        return StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Set contract uri\\n     */\\n    function setContractURI(string memory uri) external onlyRole(CONTRACT_URI_ROLE) {\\n        StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value = uri;\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IContractURI).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd8dc6ad13d314f7e0e42a0103200bf2e17a1f004776b2bec4ff00fd333429414\",\"license\":\"MIT\"},\"contracts/common/IBaseURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev IBaseURI defines metadata for a contract's assets. A 1:N relationship between contract address + id and metadata uri. Used by standards such as ERC721, ERC1155\\n */\\ninterface IBaseURI {\\n    function baseURI() external view returns (string memory);\\n    function setBaseURI(string memory uri) external;\\n}\\n\",\"keccak256\":\"0xad29356d8f8869e9ae16ac947e179f48792f15c587094c340cf7cf8b4c642839\",\"license\":\"MIT\"},\"contracts/common/IContractURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev IContractURI defines a contract with metadata. A 1:1 relationship between contract address and metdata uri.\\n */\\ninterface IContractURI {\\n    function contractURI() external view returns (string memory);\\n    function setContractURI(string memory uri) external;\\n}\\n\",\"keccak256\":\"0xec2f10bd854049d89466c7c7a145eba628e69e6e688f5c8fdab16f7aa6adf094\",\"license\":\"MIT\"},\"contracts/common/IOwlBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { IAccessControlUpgradeable } from '@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol';\\nimport { IContractURI } from './IContractURI.sol';\\nimport { IRouterReceiver } from './IRouterReceiver.sol';\\n\\n/**\\n * IOwlBase interface\\n */\\ninterface IOwlBase is IAccessControlUpgradeable, IContractURI, IRouterReceiver {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xaac3c3501e7083b0e9385f92b16909932b10bca004c575fa30703309cc318448\",\"license\":\"MIT\"},\"contracts/common/IRouterReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * IRouterReceiver defines OpenGSN Interfaces\\n */\\ninterface IRouterReceiver {\\n    function isTrustedForwarder(address forwarder) external view returns (bool);\\n    function versionRecipient() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0x27f0c495d085cbd04415b72d86942255e7d7e4283a01da87f7bf459b6cd0ac46\",\"license\":\"MIT\"},\"contracts/common/OwlBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport {UUPSUpgradeable} from '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport {IERC1820RegistryUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol';\\nimport {ERC1820ImplementerUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/ERC1820ImplementerUpgradeable.sol';\\nimport {ContractURI} from './ContractURI.sol';\\nimport {RouterReceiver} from './RouterReceiver.sol';\\nimport {IOwlBase} from './IOwlBase.sol';\\n\\n/**\\n * @dev Base for all OwlProtocol contracts\\n *\\n * Implements several required mechanisms for all OwlProtocol contracts to\\n * utilize:\\n * - OpenGSN support (gasless transactions)\\n * - Consistent contract versioning\\n * - Consistent access control\\n * - UUPS contract upgrade support\\n */\\ncontract OwlBase is\\n    ContextUpgradeable,\\n    AccessControlUpgradeable,\\n    UUPSUpgradeable,\\n    ContractURI,\\n    RouterReceiver,\\n    ERC1820ImplementerUpgradeable,\\n    IOwlBase\\n{\\n    // Consistent version across all contracts\\n    string internal constant _version = 'v0.1';\\n    address constant ERC1820_REGISTRY = 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24;\\n    bytes32 constant ONE = 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    IERC1820RegistryUpgradeable constant registry = IERC1820RegistryUpgradeable(ERC1820_REGISTRY);\\n\\n    /**\\n        Chained / Unchained\\n        https://forum.openzeppelin.com/t/difference-between-init-and-init-unchained/25255/3\\n\\n        Chained: constructor header replacement (parent inherited contracts)\\n        Unchained: constructor replacement (self init)\\n\\n     */\\n    /**\\n     * @dev OwlBase chained initialization\\n     * @param _admin address to assign owner rights\\n     * @param _forwarder OpenGSN forwarder address (if desired).\\n     */\\n    function __OwlBase_init(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _forwarder\\n    ) internal {\\n        __ContractURI_init_unchained(_admin, _initContractURI);\\n        __RouterReceiver_init_unchained(_forwarder);\\n\\n        __OwlBase_init_unchained(_admin);\\n    }\\n\\n    /**\\n     * @dev OwlBase unchained initialization.\\n     * @param _admin address to assign owner rights\\n     */\\n    function __OwlBase_init_unchained(address _admin) internal {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        if (AddressUpgradeable.isContract(ERC1820_REGISTRY)) {\\n            registry.updateERC165Cache(address(this), type(IOwlBase).interfaceId);\\n            registry.setInterfaceImplementer(address(this), type(IOwlBase).interfaceId | ONE, address(this));\\n        }\\n    }\\n\\n    /**\\n     * @notice Only callable by admins\\n     * @dev UUPS function to authorize upgrades\\n     * @param newImplementation newImplementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    /**\\n     * @dev Returns the implementation address.\\n     */\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /**\\n     * @dev OwlProtocol contract version. Used to determine compatibility\\n     * interoperable with other Owl contracts.\\n     */\\n    function version() external pure virtual returns (string memory) {\\n        return _version;\\n    }\\n\\n    /** Overrides */\\n    function _msgSender() internal view virtual override(RouterReceiver, ContextUpgradeable) returns (address) {\\n        return RouterReceiver._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(RouterReceiver, ContextUpgradeable) returns (bytes calldata) {\\n        return RouterReceiver._msgData();\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlUpgradeable, ContractURI, RouterReceiver)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOwlBase).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf296b1eaf7add0db769e09c517d6128141568de96f3a817456f0c0ce9c5e826e\",\"license\":\"MIT\"},\"contracts/common/RouterReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {IRouterReceiver} from './IRouterReceiver.sol';\\n\\n/**\\n * @dev Implements OpenGSN Config\\n */\\ncontract RouterReceiver is AccessControlUpgradeable, IRouterReceiver {\\n    bytes32 internal constant ROUTER_ROLE = keccak256('ROUTER_ROLE');\\n\\n    /**\\n     * @dev RouterReceiver chained initialization\\n     * @param _router router role\\n     */\\n    function __RouterReceiver_init(address _router) internal {\\n        __RouterReceiver_init_unchained(_router);\\n    }\\n\\n    /**\\n     * @dev RouterReceiver unchained initialization.\\n     * @param _router router role\\n     */\\n    function __RouterReceiver_init_unchained(address _router) internal {\\n        _grantRole(ROUTER_ROLE, _router);\\n    }\\n\\n    /**\\n     * @dev Returns OpenGSN contract version (used for compatibility checks)\\n     */\\n    function versionRecipient() external pure virtual returns (string memory) {\\n        return '2.2.6';\\n    }\\n\\n    /**\\n     * @dev Determine is an address a GSN trusted forwarder.\\n     * @param forwarder address to query\\n     * @return OpenGSN trusted forwarder status\\n     */\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return hasRole(ROUTER_ROLE, forwarder);\\n    }\\n\\n    /**\\n     * @notice the following 3 functions are all required for OpenGSN integration\\n     * @dev Support for meta transactions\\n     * @return ret either msg.sender or user who called transaction through a relayer\\n     */\\n    function _msgSender() internal view virtual override returns (address ret) {\\n        if (msg.data.length >= 20 && hasRole(ROUTER_ROLE, msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * @dev Support for meta transactions\\n     * @return msgData from either msg.sender or from user who called through relayer\\n     */\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (msg.data.length >= 20 && hasRole(ROUTER_ROLE, msg.sender)) {\\n            return msg.data[0:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IRouterReceiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x92ef1efa23fce0e51555009c49489e1002ae8588358876400c356070df050f3f\",\"license\":\"MIT\"},\"contracts/utils/StorageSlotString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing strings to specific storage slots.\\n* Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *   bytes32 internal constant _CONTRACT_URI_SLOT = keccak256('CONTRACT_URI');\\n *\\n *   function contractURI() public view returns (string memory) {\\n *       return StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value;\\n *   }\\n *\\n *   function setContractURI(string memory uri) external onlyRole(CONTRACT_URI_ROLE) {\\n *       StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value = uri;\\n *   }\\n * }\\n * ```\\n */\\nlibrary StorageSlotString {\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd63ecf1ae3fdcb6c6cb7202602feb6df5c44179aa013535fa9a27d1114e6f43a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0806040523461003157306080526147a990816100378239608051818181610e2e01528181611188015261129e0152f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461031f57806304634d8d1461031657806306fdde031461030d578063081812fc14610304578063095ea7b3146102fb57806323b872dd146102f2578063248a9ca3146102e9578063249cb3fa146102e05780632a55205a146102d75780632bb09c9e146102ce5780632f2ff15d146102c557806336568abe146102bc5780633659cfe6146102b357806340d097c3146102aa57806342842e0e146102a157806342966c6814610298578063486ff0cd1461028f5780634f1ef2861461028657806352d1902d1461027d57806354fd4d501461027457806355f804b31461026b578063572b6c05146102625780635944c753146102595780636352211e146102505780636a627842146102475780636c0360eb1461023e57806370a08231146102355780637c401e7f1461022c57806391d1485414610223578063938e3d7b1461021a57806395d89b4114610211578063a217fddf14610208578063a22cb465146101ff578063aaf10f42146101f6578063b88d4fde146101ed578063c87b56dd146101e4578063d547741f146101db578063e8a3d485146101d25763e985e9c5146101ca57600080fd5b61000e611f38565b5061000e611e81565b5061000e611e41565b5061000e611cff565b5061000e611cb0565b5061000e611c79565b5061000e611b25565b5061000e611b08565b5061000e611a60565b5061000e611995565b5061000e61194e565b5061000e6117e0565b5061000e61173e565b5061000e611674565b5061000e61163a565b5061000e61161b565b5061000e611515565b5061000e6114b6565b5061000e6113c0565b5061000e611350565b5061000e61128a565b5061000e61114a565b5061000e611103565b5061000e610ff8565b5061000e610fb1565b5061000e610f54565b5061000e610e0a565b5061000e610d1e565b5061000e610c5d565b5061000e610b74565b5061000e610900565b5061000e61087a565b5061000e61084a565b5061000e6107c5565b5061000e610651565b5061000e610620565b5061000e610547565b5061000e61048e565b5061000e61033a565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5761038960043561035b81610328565b63ffffffff60e01b16632ab2ef8160e01b811490811561038d575b5060405190151581529081906020820190565b0390f35b632e93c56f60e11b8114915081156103a7575b5038610376565b63152a902d60e11b8114915081156103c1575b50386103a0565b63073f6c8b60e31b8114915081156103db575b50386103ba565b63054fd4d560e41b8114915081156103f5575b50386103d4565b6303e8939960e31b81149150811561040f575b50386103ee565b633d96f4ff60e11b14905038610408565b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b60c435906001600160a01b038216820361000e57565b604435906001600160601b038216820361000e57565b60e435906001600160601b038216820361000e57565b503461000e57604036600319011261000e576104a8610420565b6024356001600160601b038116810361000e576104cc916104c7611f8a565b614416565b005b600091031261000e57565b918091926000905b8282106104f95750116104f2575050565b6000910152565b915080602091830151818601520182916104e1565b90602091610527815180928185528580860191016104d9565b601f01601f1916010190565b90602061054492818152019061050e565b90565b503461000e5760008060031936011261061d57604051908060975461056b81612c72565b808552916001918083169081156105fc57506001146105a1575b6103898561059581870382610a31565b60405191829182610533565b9250609783527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff95b8284106105e457505050810160200161059582610389610585565b805460208587018101919091529093019281016105c9565b60ff1916602087015250506040840192506105959150839050610389610585565b80fd5b503461000e57602036600319011261000e57602061063f600435612d78565b6040516001600160a01b039091168152f35b503461000e57604036600319011261000e5761066b610420565b60243561067781612c4f565b6001600160a01b0380821693918183168514610741576104cc946106c292601436101560008161070e575b50156107085736601319013560601c5b16149081156106c7575b50612d06565b6131d6565b61070291506106d461465b565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b386106bc565b336106b2565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff91505416386106a2565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e576104cc6107d736610790565b916014361015600081610817575b501561080a576108056108008436601319013560601c612f0f565b612db6565b613048565b6108056108008433612f0f565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff91505416386107e5565b503461000e57602036600319011261000e5760043560005260fb6020526020600160406000200154604051908152f35b503461000e57604036600319011261000e5760ff6108c1610899610436565b60043560005261015f60205260406000209060018060a01b0316600052602052604060002090565b5460009116156108f8575060207fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b604051908152f35b6020906108f0565b503461000e57604036600319011261000e57600435600052610192602052604060002060405190610930826109c0565b546001600160a01b03811680835260a09190911c60208301521561099b575b61097f61271061096e6001600160601b036020850151166024356133e2565b92519204916001600160a01b031690565b604080516001600160a01b039290921682526020820192909252f35b506109a46133bb565b61094f565b50634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b038211176109db57604052565b6109e36109a9565b604052565b6001600160401b0381116109db57604052565b602081019081106001600160401b038211176109db57604052565b606081019081106001600160401b038211176109db57604052565b90601f801991011681019081106001600160401b038211176109db57604052565b60405190610a5f826109c0565b565b6020906001600160401b038111610a7e575b601f01601f19160190565b610a866109a9565b610a73565b81601f8201121561000e57803590610aa282610a61565b92610ab06040519485610a31565b8284526020838301011161000e57816000926020809301838601378301015290565b61010060031982011261000e57610ae7610420565b916001600160401b0360243581811161000e5783610b0791600401610a8b565b926044356001600160a01b038116810361000e579260643583811161000e5782610b3391600401610a8b565b9260843581811161000e5783610b4b91600401610a8b565b9260a43591821161000e57610b6291600401610a8b565b90610b6b61044c565b90610544610478565b503461000e57610bd1610b8636610ad2565b9560009897989591959492945498610bb560ff8b60081c1615809b819c610c4f575b8115610c2f575b50613986565b89610bc8600160ff196000541617600055565b610c1657613a49565b610bd757005b610be761ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b610c2a61010061ff00196000541617600055565b613a49565b303b15915081610c41575b5038610baf565b6001915060ff161438610c3a565b600160ff8216109150610ba8565b503461000e5760408060031936011261000e5760043590610c7c610436565b60009280845260fb602052610c96600184862001546123c2565b80845260fb60209081528385206001600160a01b03841660009081529152604090205460ff1615610cc657505051f35b80845260fb60209081528385206001600160a01b0384166000908152915260409020805460ff191660011790556001600160a01b0380610d0461465b565b169216906000805160206146b4833981519152858551a451f35b503461000e57604036600319011261000e57610d38610436565b6014361015600081610dd7575b5015610dd15736601319013560601c5b6001600160a01b0390811690821603610d74576104cc906004356126f3565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b33610d55565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff9150541638610d45565b503461000e57602036600319011261000e57610e24610420565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190610e5d308414156127fe565b610e7a60008051602061471483398151915293828554161461285f565b610e826120ba565b60405190610e8f826109fb565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610ec95750506104cc91506129d5565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610f24575b50610f115760405162461bcd60e51b815280610f0d60048201612986565b0390fd5b6104cc93610f1f9114612928565b612b7d565b610f4691925060203d8111610f4d575b610f3e8183610a31565b81019061290c565b9038610eef565b503d610f34565b503461000e57602036600319011261000e576020610f70610420565b610f7861217c565b6108f0610fac6101f5928354936001850190558360405191610f99836109fb565b60008352610fa782826141cb565b6132ad565b612eef565b503461000e576104cc610fc336610790565b9060405192602084018481106001600160401b03821117610feb575b60405260008452612e19565b610ff36109a9565b610fdf565b503461000e57602036600319011261000e576000600435601436101582816110d0575b5082146110c3576110376108008236601319013560601c612f0f565b61104081612c4f565b61104982613180565b6001600160a01b0316808352609a602052604083208054919291600181106110b6575b84190190558083526099602052604080842080546001600160a01b0319169055519183907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8285a4f35b6110be612fdf565b61106c565b6110376108008233612f0f565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff915054163861101b565b503461000e57600036600319011261000e57610389604051611124816109c0565b6005815264191719171b60d91b602082015260405191829160208352602083019061050e565b50604036600319011261000e5761115f610420565b6024356001600160401b03811161000e5761117e903690600401610a8b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169291906111b8308514156127fe565b6111d560008051602061471483398151915294828654161461285f565b6111dd6120ba565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156112135750506104cc91506129d5565b6020600491604094939451928380926352d1902d60e01b825286165afa6000918161126a575b506112575760405162461bcd60e51b815280610f0d60048201612986565b6104cc936112659114612928565b612a65565b61128391925060203d8111610f4d57610f3e8183610a31565b9038611239565b503461000e57600036600319011261000e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036112e5576040516000805160206147148339815191528152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e57600036600319011261000e57610389604051611371816109c0565b600481526376302e3160e01b602082015260405191829160208352602083019061050e565b602060031982011261000e57600435906001600160401b03821161000e5761054491600401610a8b565b503461000e576113cf36611396565b6113d761223e565b80516001600160401b0381116114a9575b6000805160206146d48339815191529061140b816114068454612c72565b613c61565b602080601f8311600114611446575081929360009261143b575b50508160011b916000199060031b1c1916179055005b015190503880611425565b90601f19831694611455612cac565b926000905b878210611491575050836001959610611478575b505050811b019055005b015160001960f88460031b161c1916905538808061146e565b8060018596829496860151815501950193019061145a565b6114b16109a9565b6113e8565b503461000e57602036600319011261000e57602060ff6115096114d7610420565b60008051602061475483398151915260005260fb845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57606036600319011261000e5761152f610436565b611537610462565b90611540611f8a565b6115576127106001600160601b03841611156143b7565b6001600160a01b038116156115d6576115976104cc92611587611578610a52565b6001600160a01b039094168452565b6001600160601b03166020830152565b6115ae600435600052610192602052604060002090565b815160209092015160a01b6001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606490fd5b503461000e57602036600319011261000e57602061063f600435612c4f565b503461000e57602036600319011261000e576020611656610420565b61165e61217c565b6108f06101f580549283916001830190556141cb565b503461000e5760008060031936011261061d5760405190806000805160206146d4833981519152908154906116a882612c72565b8086529260019280841690811561171a57506001146116d2575b6103898661059581880382610a31565b815292506000805160206146f48339815191525b82841061170257505050810160200161059582610389386116c2565b805460208587018101919091529093019281016116e6565b60ff19166020880152505060408501935061059592508491506103899050386116c2565b503461000e57602036600319011261000e576001600160a01b03611760610420565b16801561178957600052609a602052610389604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b503461000e576117ef36610ad2565b949093969561180860ff60009594955460081c166139e9565b61181187612485565b80516001600160401b038111611941575b60008051602061473483398151915291611845826118408554612c72565b613ccd565b60209081601f84116001146118c257506118aa9897969461189e94846118a498956104cc9e95611890956000926118b7575b50508160011b916000199060031b1c19161790556126a4565b61189989614594565b613b48565b856144ac565b836142e8565b6118b2613f24565b6140cd565b015190503880611877565b9190601f1984166118d1612cd0565b936000905b828210611929575050946001856104cc9e95611890956118aa9e9d9c9a956118a49c9961189e9b10611910575b505050811b0190556126a4565b015160001960f88460031b161c19169055388080611903565b806001869782949787015181550196019401906118d6565b6119496109a9565b611822565b503461000e57604036600319011261000e57602060ff61150961196f610436565b60043560005260fb845260406000209060018060a01b0316600052602052604060002090565b503461000e576119a436611396565b6119ac612300565b80516001600160401b038111611a53575b600080516020614734833981519152906119db816118408454612c72565b602080601f8311600114611a0a575081929360009261143b5750508160011b916000199060031b1c1916179055005b90601f19831694611a19612cd0565b926000905b878210611a3b57505083600195961061147857505050811b019055005b80600185968294968601518155019501930190611a1e565b611a5b6109a9565b6119bd565b503461000e5760008060031936011261061d576040519080609854611a8481612c72565b808552916001918083169081156105fc5750600114611aad576103898561059581870382610a31565b9250609883527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d8145b828410611af057505050810160200161059582610389610585565b80546020858701810191909152909301928101611ad5565b503461000e57600036600319011261000e57602060405160008152f35b503461000e5760408060031936011261000e57611b40610420565b9060243591821515830361000e576014361015600081611c45575b5015611c3e5736601319013560601c905b6001600160a01b03818116921690818314611bfa57611bf485611be3600097611bd27f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3195878b52609c602052898b209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b855190151581529081906020820190565b0390a351f35b835162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b3390611b6c565b600080516020614754833981519152815260fb60209081529084902033600090815291526040902060ff9150541638611b5b565b503461000e57600036600319011261000e57600080516020614714833981519152546040516001600160a01b039091168152602090f35b503461000e57608036600319011261000e57611cca610420565b611cd2610436565b606435916001600160401b03831161000e57611cf56104cc933690600401610a8b565b9160443591612e19565b503461000e5760208060031936011261000e57600435600081815260996020526040902054611d38906001600160a01b03161515612c03565b60405190828260006000805160206146d48339815191528054611d5a81612c72565b80855291600191808316908115611e205750600114611dd5575b505050611d8392500383610a31565b815115611dc25761038992611db4611d9d6105959361349e565b611dae60405195869485019061246e565b9061246e565b03601f198101835282610a31565b505050610389611dd06128c0565b610595565b60009081526000805160206146f483398151915295935091905b818310611e08575087945050820101611d833880611d74565b85548884018501529485019487945091830191611def565b965050505050505060ff191683830152611d83826040810185923880611d74565b503461000e57604036600319011261000e576104cc600435611e61610436565b908060005260fb602052611e7c6001604060002001546123c2565b6126f3565b503461000e5760008060031936011261061d57604051908060008051602061473483398151915290815490611eb582612c72565b8086529260019280841690811561171a5750600114611ede576103898661059581880382610a31565b815292507feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c6975b828410611f2057505050810160200161059582610389386116c2565b80546020858701810191909152909301928101611f04565b503461000e57604036600319011261000e57602060ff611509611f59610420565b611f61610436565b6001600160a01b039182166000908152609c865260408082209290931681526020919091522090565b6014361015600081612087575b50156120815736601319013560601c5b6001600160a01b03811660009081527fef93721591a8283ebcbc635d4596270f18296615bf2ad2acc05699794bf14331602052604090205460ff1615611fea5750565b610f0d9061204c9061206990612008906001600160a01b03166135cf565b611db4612013613666565b611dae604051958694611dae602087017f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260170190565b7001034b99036b4b9b9b4b733903937b6329607d1b815260110190565b60405162461bcd60e51b815291829160048301610533565b33611fa7565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff9150541638611f97565b6014361015600081612149575b50156121435736601319013560601c5b6001600160a01b03811660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604090205460ff161561211a5750565b610f0d9061204c9061206990612138906001600160a01b03166135cf565b611db46120136136f6565b336120d7565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff91505416386120c7565b601436101560008161220b575b50156122055736601319013560601c5b6001600160a01b03811660009081527f72f2994cda805697ff5940dc92bd4118d9d7058b657a897ee8a2023e4f673434602052604090205460ff16156121dc5750565b610f0d9061204c90612069906121fa906001600160a01b03166135cf565b611db4612013613767565b33612199565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff9150541638612189565b60143610156000816122cd575b50156122c75736601319013560601c5b6001600160a01b03811660009081527f248dd836b57784724b19977de4d97082a3dc8c769beb80c8f7fb5af2bb22b29a602052604090205460ff161561229e5750565b610f0d9061204c90612069906122bc906001600160a01b03166135cf565b611db46120136137f7565b3361225b565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff915054163861224b565b601436101560008161238f575b50156123895736601319013560601c5b6001600160a01b03811660009081527fd79c98b0e2162ca3184e1e6688bf8c1c5461f86efaaae3675641a8fbeb306445602052604090205460ff16156123605750565b610f0d9061204c906120699061237e906001600160a01b03166135cf565b611db4612013613887565b3361231d565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff915054163861230d565b601436101560008161243b575b50156124355736601319013560601c5b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff161561240e575050565b612069610f0d92611db461201361242f61204c9560018060a01b03166135cf565b92613917565b336123df565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff91505416386123cf565b90612481602092828151948592016104d9565b0190565b6001600160a01b03811660009081527fd79c98b0e2162ca3184e1e6688bf8c1c5461f86efaaae3675641a8fbeb306445602052604090207f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c159060ff905b5416156124ed575050565b600081815260fb602090815260408083206001600160a01b03861684529091529020805460ff191660011790556001600160a01b038061252b61465b565b169216906000805160206146b48339815191526000604051a4565b6001600160a01b03811660009081527f72f2994cda805697ff5940dc92bd4118d9d7058b657a897ee8a2023e4f673434602052604090207f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a69060ff906124e2565b6001600160a01b03811660009081527f248dd836b57784724b19977de4d97082a3dc8c769beb80c8f7fb5af2bb22b29a602052604090207ff372640890c51dda497431936a65d3bb1ddf67b1c27cd6cdf578ce883c4f5c369060ff906124e2565b6001600160a01b03811660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604081205460ff161561264c575050565b80805260fb602090815260408083206001600160a01b038516600090815292529020805460ff191660011790556001600160a01b038061268a61465b565b169216906000805160206146b483398151915281604051a4565b6001600160a01b03811660009081527f452ae8ad28077a8dde36d329380df9bfd96077640c4bb696c45031c2933e8ad8602052604090206000805160206147548339815191529060ff906124e2565b60009080825260fb60205260ff61271f84604085209060018060a01b0316600052602052604060002090565b541661272a57505050565b80825260fb602090815260408084206001600160a01b038616600090815292529020805460ff191690556014361015806127cd575b156127a6577ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b36601319013560601c5b6040516001600160a01b03918216959091169390a4565b7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b3361278f565b50600080516020614754833981519152825260fb60209081526040808420336000908152925290205460ff1661275f565b1561280557565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561286657565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b604051906128cd826109fb565b60008252565b60405190608082018281106001600160401b038211176128ff575b604052604282526060366020840137565b6129076109a9565b6128ee565b9081602091031261000e575190565b506040513d6000823e3d90fd5b1561292f57565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b60809060208152602e60208201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960408201526d6f6e206973206e6f74205555505360901b60608201520190565b803b15612a0a5760008051602061471483398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b612a6e816129d5565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590612b75575b612ab457505050565b813b15612b24575060008281926020612b2195519201905af4612ad5612bd3565b60405191612ae283610a16565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b6040840152613401565b50565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b506001612aab565b612b86816129d5565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590612bcb57612ab457505050565b506000612aab565b3d15612bfe573d90612be482610a61565b91612bf26040519384610a31565b82523d6000602084013e565b606090565b15612c0a57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152609960205260409020546001600160a01b0316610544811515612c03565b90600182811c92168015612ca2575b6020831014612c8c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612c81565b6000805160206146d48339815191526000526000805160206146f483398151915290565b6000805160206147348339815191526000527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c69790565b15612d0d57565b60405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608490fd5b600081815260996020526040902054612d9b906001600160a01b03161515612c03565b6000908152609b60205260409020546001600160a01b031690565b15612dbd57565b60405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b6064820152608490fd5b91610a5f9391610fac93600060143610159081612e69575b5015612e5c57612e4c6108008436601319013560601c612f0f565b612e57838383613048565b613376565b612e4c6108008433612f0f565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff9150541638612e31565b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b15612ef657565b60405162461bcd60e51b815280610f0d60048201612e9c565b6001600160a01b0380612f2184612c4f565b169281831692848414948515612f57575b50508315612f41575b50505090565b612f4d91929350612d78565b1614388080612f3b565b6000908152609c602090815260408083206001600160a01b03949094168352929052205460ff1693503880612f32565b15612f8e57565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b60018110613006575b6000190190565b61300e612fdf565b612fff565b6001906001198111613023570190565b612481612fdf565b801960301161303b575b60300190565b613043612fdf565b613035565b9061305283612c4f565b6001600160a01b03838116929091821683900361312d576130a16131049282169461307e861515612f87565b61308787613180565b6001600160a01b03166000908152609a6020526040902090565b6130ab8154612ff6565b90556001600160a01b0381166000908152609a602052604090206130cf8154613013565b90556130e5856000526099602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b6000818152609b6020526040812080546001600160a01b03191690556001600160a01b036131ad83612c4f565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b6000828152609b6020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b038061320f84612c4f565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e575161054481610328565b610544939260809260018060a01b03168252600060208301526040820152816060820152019061050e565b6001600160a01b0391821681529116602082015260408101919091526080606082018190526105449291019061050e565b909190803b1561336e576132e7916020916132c661465b565b946000604051809681958294630a85bd0160e11b9a8b855260048501613251565b03926001600160a01b03165af16000918161333e575b506133305761330a612bd3565b8051908161332b5760405162461bcd60e51b815280610f0d60048201612e9c565b602001fd5b6001600160e01b0319161490565b61336091925060203d8111613367575b6133588183610a31565b81019061323c565b90386132fd565b503d61334e565b505050600190565b92909190823b156133b2576132e792602092600061339261465b565b9660405196879586948593630a85bd0160e11b9b8c86526004860161327c565b50505050600190565b604051906133c8826109c0565b610191546001600160a01b038116835260a01c6020830152565b80600019048211811515166133f5570290565b6133fd612fdf565b0290565b9091901561340d575090565b81511561341d5750805190602001fd5b60405162461bcd60e51b815260206004820152908190610f0d90602483019061050e565b50634e487b7160e01b600052603260045260246000fd5b602090805115613466570190565b612481613441565b602190805160011015613466570190565b90602091805182101561349157010190565b613499613441565b010190565b801561355957806000908282935b61353357506134ba83610a61565b926134c86040519485610a31565b80845281601f196134d883610a61565b013660208701375b6134ea5750505090565b6134f390612ff6565b90600a9061351e61350e61350884840661302b565b60ff1690565b60f81b6001600160f81b03191690565b841a61352a848761347f565b530490816134e0565b926001600a91600019811461354c575b019304806134ac565b613554612fdf565b613543565b50604051613566816109c0565b60018152600360fc1b602082015290565b8015613006576000190190565b1561358b57565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b604051906135dc82610a16565b602a8252604036602084013760306135f383613458565b5360786135ff8361346e565b536029905b6001821161361757610544915015613584565b80600f61365392166010811015613659575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a613649848661347f565b5360041c91613577565b90613604565b613661613441565b613629565b7feb54e1feee3ae17add098cbf58a47457bf5f7c3a89ceab263cbdb01b3da6d98e61368f6128d3565b90603061369b83613458565b5360786136a78361346e565b536041905b600182116136bf57610544915015613584565b80600f6136f092166010811015613659576f181899199a1a9b1b9c1cb0b131b232b360811b901a613649848661347f565b906136ac565b60006137006128d3565b90603061370c83613458565b5360786137188361346e565b536041905b6001821161373057610544915015613584565b80600f61376192166010811015613659576f181899199a1a9b1b9c1cb0b131b232b360811b901a613649848661347f565b9061371d565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66137906128d3565b90603061379c83613458565b5360786137a88361346e565b536041905b600182116137c057610544915015613584565b80600f6137f192166010811015613659576f181899199a1a9b1b9c1cb0b131b232b360811b901a613649848661347f565b906137ad565b7ff372640890c51dda497431936a65d3bb1ddf67b1c27cd6cdf578ce883c4f5c366138206128d3565b90603061382c83613458565b5360786138388361346e565b536041905b6001821161385057610544915015613584565b80600f61388192166010811015613659576f181899199a1a9b1b9c1cb0b131b232b360811b901a613649848661347f565b9061383d565b7f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c156138b06128d3565b9060306138bc83613458565b5360786138c88361346e565b536041905b600182116138e057610544915015613584565b80600f61391192166010811015613659576f181899199a1a9b1b9c1cb0b131b232b360811b901a613649848661347f565b906138cd565b61391f6128d3565b90603061392b83613458565b5360786139378361346e565b536041905b6001821161394f57610544915015613584565b80600f61398092166010811015613659576f181899199a1a9b1b9c1cb0b131b232b360811b901a613649848661347f565b9061393c565b1561398d57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b156139f057565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b959391909796949297613a5b87612485565b80516001600160401b038111613b3b575b60008051602061473483398151915291613a8a826118408554612c72565b60209081601f8411600114613ad557506118aa9897969461189e94846118a49895610a5f9e9f95611890956000926118b75750508160011b916000199060031b1c19161790556126a4565b9190601f198416613ae4612cd0565b936000905b828210613b2357505094600185610a5f9e9f95611890956118aa9e9d9c9a956118a49c9961189e9b1061191057505050811b0190556126a4565b80600186978294978701518155019601940190613ae9565b613b436109a9565b613a6c565b90613b5a60ff60005460081c166139e9565b81516001600160401b038111613c54575b613b7f81613b7a609754612c72565b613d4b565b602080601f8311600114613bc157508190610a5f94600092613bb6575b50508160011b916000199060031b1c191617609755613e2d565b015190503880613b9c565b919293601f198416613bf560976000527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff990565b936000905b828210613c3c575050916001939185610a5f97969410613c23575b505050811b01609755613e2d565b015160001960f88460031b161c19169055388080613c15565b80600186978294978701518155019601940190613bfa565b613c5c6109a9565b613b6b565b601f8111613c6d575050565b6000906000805160206146d483398151915282526000805160206146f4833981519152906020601f850160051c83019410613cc3575b601f0160051c01915b828110613cb857505050565b818155600101613cac565b9092508290613ca3565b601f8111613cd9575050565b60009060008051602061473483398151915282527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c697906020601f850160051c83019410613d41575b601f0160051c01915b828110613d3657505050565b818155600101613d2a565b9092508290613d21565b601f8111613d57575050565b600090609782527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9906020601f850160051c83019410613db2575b601f0160051c01915b828110613da757505050565b818155600101613d9b565b9092508290613d92565b601f8111613dc8575050565b600090609882527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d814906020601f850160051c83019410613e23575b601f0160051c01915b828110613e1857505050565b818155600101613e0c565b9092508290613e03565b9081516001600160401b038111613f17575b613e5381613e4e609854612c72565b613dbc565b602080601f8311600114613e8f5750819293600092613e84575b50508160011b916000199060031b1c191617609855565b015190503880613e6d565b90601f19831694613ec260986000527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d81490565b926000905b878210613eff575050836001959610613ee6575b505050811b01609855565b015160001960f88460031b161c19169055388080613edb565b80600185968294968601518155019501930190613ec7565b613f1f6109a9565b613e3f565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b613f425750565b803b1561000e5760405163a41e7d5160e01b808252306004830152632e93c56f60e11b6024830152600091828160448183885af180156140c0575b6140ad575b50823b15614069576040519081523060048201526380ac58cd60e01b6024820152818160448183875af180156140a0575b61408d575b50813b1561061d576040516329965a1d60e01b80825230600483018190526001635d278adf60e01b036024840152604483015290828160648183885af18015614080575b61406d575b50823b1561406957604051908152306004820181905260016340562c6760e11b0360248301526044820152918290818381606481015b03925af1801561405c575b6140495750565b80614056610a5f926109e8565b806104ce565b61406461291b565b614042565b5080fd5b8061405661407a926109e8565b38614001565b61408861291b565b613ffc565b8061405661409a926109e8565b38613fb8565b6140a861291b565b613fb3565b806140566140ba926109e8565b38613f82565b6140c861291b565b613f7d565b6140d690612546565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b614102575b50610a5f6101f560018154019055565b803b1561000e5760405163a41e7d5160e01b8152306004820152632ab2ef8160e01b6024820152600090818160448183875af180156141be575b6141ab575b50813b1561061d576040516329965a1d60e01b81523060048201819052600163155977c160e11b0360248301526044820152918290606490829084905af1801561419e575b156140f25780614056614198926109e8565b386140f2565b6141a661291b565b614186565b806140566141b8926109e8565b38614141565b6141c661291b565b61413c565b6001600160a01b0381169081156142a4576000838152609960205260409020546001600160a01b031661425f576001600160a01b0381166000908152609a60205260409020614235919061421f8154613013565b90556130e5846000526099602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b6001600160a01b03811660009081527fef93721591a8283ebcbc635d4596270f18296615bf2ad2acc05699794bf143316020526040902054610a5f939291907feb54e1feee3ae17add098cbf58a47457bf5f7c3a89ceab263cbdb01b3da6d98e9060ff1615614359575b5050614416565b600081815260fb602090815260408083206001600160a01b03861684529091529020805460ff191660011790556001600160a01b038061439761465b565b169216906000805160206146b48339815191526000604051a43880614352565b156143be57565b60405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608490fd5b906001600160601b038116916144306127108411156143b7565b6001600160a01b031691821561446757602060405161444e816109c0565b848152015260a01b6001600160a01b0319161761019155565b60405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606490fd5b6144b8909291926125a7565b81516001600160401b038111614587575b6000805160206146d4833981519152906144e7816114068454612c72565b602080601f8311600114614523575081929394600092614518575b50508160011b916000199060031b1c1916179055565b015190503880614502565b90601f19831695614532612cac565b926000905b88821061456f57505083600195969710614556575b505050811b019055565b015160001960f88460031b161c1916905538808061454c565b80600185968294968601518155019501930190614537565b61458f6109a9565b6144c9565b61459d90612608565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b6145bb5750565b803b1561000e5760405163a41e7d5160e01b815230600482015263054fd4d560e41b6024820152600090818160448183875af1801561464e575b61463b575b50813b1561061d576040516329965a1d60e01b8152306004820181905260016354fd4d5160e01b036024830152604482015291829081838160648101614037565b80614056614648926109e8565b386145fa565b61465661291b565b6145f5565b60143610158061467b575b156146775736601319013560601c90565b3390565b503360009081527f452ae8ad28077a8dde36d329380df9bfd96077640c4bb696c45031c2933e8ad8602052604090205460ff1661466656fe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0da9f9158fe70cb34800ad178a5ece6c5a90de2e6ce3d18ac99a750313884ef86f19bfbe9c1d469104dfe3a613f5f31e0356b89c1b110180555c05774e09befab4360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc59c86eba0f8c3c9659b86fb2776edca2ff990d1509243e9705ae43a6831558c67a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb2a26469706673582212205aee871c3ad71914cf2156abf507573e6b398417186493a6b998ce3ee6bac6c164736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461031f57806304634d8d1461031657806306fdde031461030d578063081812fc14610304578063095ea7b3146102fb57806323b872dd146102f2578063248a9ca3146102e9578063249cb3fa146102e05780632a55205a146102d75780632bb09c9e146102ce5780632f2ff15d146102c557806336568abe146102bc5780633659cfe6146102b357806340d097c3146102aa57806342842e0e146102a157806342966c6814610298578063486ff0cd1461028f5780634f1ef2861461028657806352d1902d1461027d57806354fd4d501461027457806355f804b31461026b578063572b6c05146102625780635944c753146102595780636352211e146102505780636a627842146102475780636c0360eb1461023e57806370a08231146102355780637c401e7f1461022c57806391d1485414610223578063938e3d7b1461021a57806395d89b4114610211578063a217fddf14610208578063a22cb465146101ff578063aaf10f42146101f6578063b88d4fde146101ed578063c87b56dd146101e4578063d547741f146101db578063e8a3d485146101d25763e985e9c5146101ca57600080fd5b61000e611f38565b5061000e611e81565b5061000e611e41565b5061000e611cff565b5061000e611cb0565b5061000e611c79565b5061000e611b25565b5061000e611b08565b5061000e611a60565b5061000e611995565b5061000e61194e565b5061000e6117e0565b5061000e61173e565b5061000e611674565b5061000e61163a565b5061000e61161b565b5061000e611515565b5061000e6114b6565b5061000e6113c0565b5061000e611350565b5061000e61128a565b5061000e61114a565b5061000e611103565b5061000e610ff8565b5061000e610fb1565b5061000e610f54565b5061000e610e0a565b5061000e610d1e565b5061000e610c5d565b5061000e610b74565b5061000e610900565b5061000e61087a565b5061000e61084a565b5061000e6107c5565b5061000e610651565b5061000e610620565b5061000e610547565b5061000e61048e565b5061000e61033a565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e5761038960043561035b81610328565b63ffffffff60e01b16632ab2ef8160e01b811490811561038d575b5060405190151581529081906020820190565b0390f35b632e93c56f60e11b8114915081156103a7575b5038610376565b63152a902d60e11b8114915081156103c1575b50386103a0565b63073f6c8b60e31b8114915081156103db575b50386103ba565b63054fd4d560e41b8114915081156103f5575b50386103d4565b6303e8939960e31b81149150811561040f575b50386103ee565b633d96f4ff60e11b14905038610408565b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b60c435906001600160a01b038216820361000e57565b604435906001600160601b038216820361000e57565b60e435906001600160601b038216820361000e57565b503461000e57604036600319011261000e576104a8610420565b6024356001600160601b038116810361000e576104cc916104c7611f8a565b614416565b005b600091031261000e57565b918091926000905b8282106104f95750116104f2575050565b6000910152565b915080602091830151818601520182916104e1565b90602091610527815180928185528580860191016104d9565b601f01601f1916010190565b90602061054492818152019061050e565b90565b503461000e5760008060031936011261061d57604051908060975461056b81612c72565b808552916001918083169081156105fc57506001146105a1575b6103898561059581870382610a31565b60405191829182610533565b9250609783527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff95b8284106105e457505050810160200161059582610389610585565b805460208587018101919091529093019281016105c9565b60ff1916602087015250506040840192506105959150839050610389610585565b80fd5b503461000e57602036600319011261000e57602061063f600435612d78565b6040516001600160a01b039091168152f35b503461000e57604036600319011261000e5761066b610420565b60243561067781612c4f565b6001600160a01b0380821693918183168514610741576104cc946106c292601436101560008161070e575b50156107085736601319013560601c5b16149081156106c7575b50612d06565b6131d6565b61070291506106d461465b565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b386106bc565b336106b2565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff91505416386106a2565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e576104cc6107d736610790565b916014361015600081610817575b501561080a576108056108008436601319013560601c612f0f565b612db6565b613048565b6108056108008433612f0f565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff91505416386107e5565b503461000e57602036600319011261000e5760043560005260fb6020526020600160406000200154604051908152f35b503461000e57604036600319011261000e5760ff6108c1610899610436565b60043560005261015f60205260406000209060018060a01b0316600052602052604060002090565b5460009116156108f8575060207fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b604051908152f35b6020906108f0565b503461000e57604036600319011261000e57600435600052610192602052604060002060405190610930826109c0565b546001600160a01b03811680835260a09190911c60208301521561099b575b61097f61271061096e6001600160601b036020850151166024356133e2565b92519204916001600160a01b031690565b604080516001600160a01b039290921682526020820192909252f35b506109a46133bb565b61094f565b50634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b038211176109db57604052565b6109e36109a9565b604052565b6001600160401b0381116109db57604052565b602081019081106001600160401b038211176109db57604052565b606081019081106001600160401b038211176109db57604052565b90601f801991011681019081106001600160401b038211176109db57604052565b60405190610a5f826109c0565b565b6020906001600160401b038111610a7e575b601f01601f19160190565b610a866109a9565b610a73565b81601f8201121561000e57803590610aa282610a61565b92610ab06040519485610a31565b8284526020838301011161000e57816000926020809301838601378301015290565b61010060031982011261000e57610ae7610420565b916001600160401b0360243581811161000e5783610b0791600401610a8b565b926044356001600160a01b038116810361000e579260643583811161000e5782610b3391600401610a8b565b9260843581811161000e5783610b4b91600401610a8b565b9260a43591821161000e57610b6291600401610a8b565b90610b6b61044c565b90610544610478565b503461000e57610bd1610b8636610ad2565b9560009897989591959492945498610bb560ff8b60081c1615809b819c610c4f575b8115610c2f575b50613986565b89610bc8600160ff196000541617600055565b610c1657613a49565b610bd757005b610be761ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b610c2a61010061ff00196000541617600055565b613a49565b303b15915081610c41575b5038610baf565b6001915060ff161438610c3a565b600160ff8216109150610ba8565b503461000e5760408060031936011261000e5760043590610c7c610436565b60009280845260fb602052610c96600184862001546123c2565b80845260fb60209081528385206001600160a01b03841660009081529152604090205460ff1615610cc657505051f35b80845260fb60209081528385206001600160a01b0384166000908152915260409020805460ff191660011790556001600160a01b0380610d0461465b565b169216906000805160206146b4833981519152858551a451f35b503461000e57604036600319011261000e57610d38610436565b6014361015600081610dd7575b5015610dd15736601319013560601c5b6001600160a01b0390811690821603610d74576104cc906004356126f3565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b33610d55565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff9150541638610d45565b503461000e57602036600319011261000e57610e24610420565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169190610e5d308414156127fe565b610e7a60008051602061471483398151915293828554161461285f565b610e826120ba565b60405190610e8f826109fb565b600082527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610ec95750506104cc91506129d5565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610f24575b50610f115760405162461bcd60e51b815280610f0d60048201612986565b0390fd5b6104cc93610f1f9114612928565b612b7d565b610f4691925060203d8111610f4d575b610f3e8183610a31565b81019061290c565b9038610eef565b503d610f34565b503461000e57602036600319011261000e576020610f70610420565b610f7861217c565b6108f0610fac6101f5928354936001850190558360405191610f99836109fb565b60008352610fa782826141cb565b6132ad565b612eef565b503461000e576104cc610fc336610790565b9060405192602084018481106001600160401b03821117610feb575b60405260008452612e19565b610ff36109a9565b610fdf565b503461000e57602036600319011261000e576000600435601436101582816110d0575b5082146110c3576110376108008236601319013560601c612f0f565b61104081612c4f565b61104982613180565b6001600160a01b0316808352609a602052604083208054919291600181106110b6575b84190190558083526099602052604080842080546001600160a01b0319169055519183907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8285a4f35b6110be612fdf565b61106c565b6110376108008233612f0f565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff915054163861101b565b503461000e57600036600319011261000e57610389604051611124816109c0565b6005815264191719171b60d91b602082015260405191829160208352602083019061050e565b50604036600319011261000e5761115f610420565b6024356001600160401b03811161000e5761117e903690600401610a8b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169291906111b8308514156127fe565b6111d560008051602061471483398151915294828654161461285f565b6111dd6120ba565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156112135750506104cc91506129d5565b6020600491604094939451928380926352d1902d60e01b825286165afa6000918161126a575b506112575760405162461bcd60e51b815280610f0d60048201612986565b6104cc936112659114612928565b612a65565b61128391925060203d8111610f4d57610f3e8183610a31565b9038611239565b503461000e57600036600319011261000e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036112e5576040516000805160206147148339815191528152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e57600036600319011261000e57610389604051611371816109c0565b600481526376302e3160e01b602082015260405191829160208352602083019061050e565b602060031982011261000e57600435906001600160401b03821161000e5761054491600401610a8b565b503461000e576113cf36611396565b6113d761223e565b80516001600160401b0381116114a9575b6000805160206146d48339815191529061140b816114068454612c72565b613c61565b602080601f8311600114611446575081929360009261143b575b50508160011b916000199060031b1c1916179055005b015190503880611425565b90601f19831694611455612cac565b926000905b878210611491575050836001959610611478575b505050811b019055005b015160001960f88460031b161c1916905538808061146e565b8060018596829496860151815501950193019061145a565b6114b16109a9565b6113e8565b503461000e57602036600319011261000e57602060ff6115096114d7610420565b60008051602061475483398151915260005260fb845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57606036600319011261000e5761152f610436565b611537610462565b90611540611f8a565b6115576127106001600160601b03841611156143b7565b6001600160a01b038116156115d6576115976104cc92611587611578610a52565b6001600160a01b039094168452565b6001600160601b03166020830152565b6115ae600435600052610192602052604060002090565b815160209092015160a01b6001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606490fd5b503461000e57602036600319011261000e57602061063f600435612c4f565b503461000e57602036600319011261000e576020611656610420565b61165e61217c565b6108f06101f580549283916001830190556141cb565b503461000e5760008060031936011261061d5760405190806000805160206146d4833981519152908154906116a882612c72565b8086529260019280841690811561171a57506001146116d2575b6103898661059581880382610a31565b815292506000805160206146f48339815191525b82841061170257505050810160200161059582610389386116c2565b805460208587018101919091529093019281016116e6565b60ff19166020880152505060408501935061059592508491506103899050386116c2565b503461000e57602036600319011261000e576001600160a01b03611760610420565b16801561178957600052609a602052610389604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b503461000e576117ef36610ad2565b949093969561180860ff60009594955460081c166139e9565b61181187612485565b80516001600160401b038111611941575b60008051602061473483398151915291611845826118408554612c72565b613ccd565b60209081601f84116001146118c257506118aa9897969461189e94846118a498956104cc9e95611890956000926118b7575b50508160011b916000199060031b1c19161790556126a4565b61189989614594565b613b48565b856144ac565b836142e8565b6118b2613f24565b6140cd565b015190503880611877565b9190601f1984166118d1612cd0565b936000905b828210611929575050946001856104cc9e95611890956118aa9e9d9c9a956118a49c9961189e9b10611910575b505050811b0190556126a4565b015160001960f88460031b161c19169055388080611903565b806001869782949787015181550196019401906118d6565b6119496109a9565b611822565b503461000e57604036600319011261000e57602060ff61150961196f610436565b60043560005260fb845260406000209060018060a01b0316600052602052604060002090565b503461000e576119a436611396565b6119ac612300565b80516001600160401b038111611a53575b600080516020614734833981519152906119db816118408454612c72565b602080601f8311600114611a0a575081929360009261143b5750508160011b916000199060031b1c1916179055005b90601f19831694611a19612cd0565b926000905b878210611a3b57505083600195961061147857505050811b019055005b80600185968294968601518155019501930190611a1e565b611a5b6109a9565b6119bd565b503461000e5760008060031936011261061d576040519080609854611a8481612c72565b808552916001918083169081156105fc5750600114611aad576103898561059581870382610a31565b9250609883527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d8145b828410611af057505050810160200161059582610389610585565b80546020858701810191909152909301928101611ad5565b503461000e57600036600319011261000e57602060405160008152f35b503461000e5760408060031936011261000e57611b40610420565b9060243591821515830361000e576014361015600081611c45575b5015611c3e5736601319013560601c905b6001600160a01b03818116921690818314611bfa57611bf485611be3600097611bd27f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3195878b52609c602052898b209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b855190151581529081906020820190565b0390a351f35b835162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b3390611b6c565b600080516020614754833981519152815260fb60209081529084902033600090815291526040902060ff9150541638611b5b565b503461000e57600036600319011261000e57600080516020614714833981519152546040516001600160a01b039091168152602090f35b503461000e57608036600319011261000e57611cca610420565b611cd2610436565b606435916001600160401b03831161000e57611cf56104cc933690600401610a8b565b9160443591612e19565b503461000e5760208060031936011261000e57600435600081815260996020526040902054611d38906001600160a01b03161515612c03565b60405190828260006000805160206146d48339815191528054611d5a81612c72565b80855291600191808316908115611e205750600114611dd5575b505050611d8392500383610a31565b815115611dc25761038992611db4611d9d6105959361349e565b611dae60405195869485019061246e565b9061246e565b03601f198101835282610a31565b505050610389611dd06128c0565b610595565b60009081526000805160206146f483398151915295935091905b818310611e08575087945050820101611d833880611d74565b85548884018501529485019487945091830191611def565b965050505050505060ff191683830152611d83826040810185923880611d74565b503461000e57604036600319011261000e576104cc600435611e61610436565b908060005260fb602052611e7c6001604060002001546123c2565b6126f3565b503461000e5760008060031936011261061d57604051908060008051602061473483398151915290815490611eb582612c72565b8086529260019280841690811561171a5750600114611ede576103898661059581880382610a31565b815292507feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c6975b828410611f2057505050810160200161059582610389386116c2565b80546020858701810191909152909301928101611f04565b503461000e57604036600319011261000e57602060ff611509611f59610420565b611f61610436565b6001600160a01b039182166000908152609c865260408082209290931681526020919091522090565b6014361015600081612087575b50156120815736601319013560601c5b6001600160a01b03811660009081527fef93721591a8283ebcbc635d4596270f18296615bf2ad2acc05699794bf14331602052604090205460ff1615611fea5750565b610f0d9061204c9061206990612008906001600160a01b03166135cf565b611db4612013613666565b611dae604051958694611dae602087017f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260170190565b7001034b99036b4b9b9b4b733903937b6329607d1b815260110190565b60405162461bcd60e51b815291829160048301610533565b33611fa7565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff9150541638611f97565b6014361015600081612149575b50156121435736601319013560601c5b6001600160a01b03811660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604090205460ff161561211a5750565b610f0d9061204c9061206990612138906001600160a01b03166135cf565b611db46120136136f6565b336120d7565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff91505416386120c7565b601436101560008161220b575b50156122055736601319013560601c5b6001600160a01b03811660009081527f72f2994cda805697ff5940dc92bd4118d9d7058b657a897ee8a2023e4f673434602052604090205460ff16156121dc5750565b610f0d9061204c90612069906121fa906001600160a01b03166135cf565b611db4612013613767565b33612199565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff9150541638612189565b60143610156000816122cd575b50156122c75736601319013560601c5b6001600160a01b03811660009081527f248dd836b57784724b19977de4d97082a3dc8c769beb80c8f7fb5af2bb22b29a602052604090205460ff161561229e5750565b610f0d9061204c90612069906122bc906001600160a01b03166135cf565b611db46120136137f7565b3361225b565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff915054163861224b565b601436101560008161238f575b50156123895736601319013560601c5b6001600160a01b03811660009081527fd79c98b0e2162ca3184e1e6688bf8c1c5461f86efaaae3675641a8fbeb306445602052604090205460ff16156123605750565b610f0d9061204c906120699061237e906001600160a01b03166135cf565b611db4612013613887565b3361231d565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff915054163861230d565b601436101560008161243b575b50156124355736601319013560601c5b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff161561240e575050565b612069610f0d92611db461201361242f61204c9560018060a01b03166135cf565b92613917565b336123df565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff91505416386123cf565b90612481602092828151948592016104d9565b0190565b6001600160a01b03811660009081527fd79c98b0e2162ca3184e1e6688bf8c1c5461f86efaaae3675641a8fbeb306445602052604090207f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c159060ff905b5416156124ed575050565b600081815260fb602090815260408083206001600160a01b03861684529091529020805460ff191660011790556001600160a01b038061252b61465b565b169216906000805160206146b48339815191526000604051a4565b6001600160a01b03811660009081527f72f2994cda805697ff5940dc92bd4118d9d7058b657a897ee8a2023e4f673434602052604090207f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a69060ff906124e2565b6001600160a01b03811660009081527f248dd836b57784724b19977de4d97082a3dc8c769beb80c8f7fb5af2bb22b29a602052604090207ff372640890c51dda497431936a65d3bb1ddf67b1c27cd6cdf578ce883c4f5c369060ff906124e2565b6001600160a01b03811660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604081205460ff161561264c575050565b80805260fb602090815260408083206001600160a01b038516600090815292529020805460ff191660011790556001600160a01b038061268a61465b565b169216906000805160206146b483398151915281604051a4565b6001600160a01b03811660009081527f452ae8ad28077a8dde36d329380df9bfd96077640c4bb696c45031c2933e8ad8602052604090206000805160206147548339815191529060ff906124e2565b60009080825260fb60205260ff61271f84604085209060018060a01b0316600052602052604060002090565b541661272a57505050565b80825260fb602090815260408084206001600160a01b038616600090815292529020805460ff191690556014361015806127cd575b156127a6577ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b36601319013560601c5b6040516001600160a01b03918216959091169390a4565b7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b3361278f565b50600080516020614754833981519152825260fb60209081526040808420336000908152925290205460ff1661275f565b1561280557565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561286657565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b604051906128cd826109fb565b60008252565b60405190608082018281106001600160401b038211176128ff575b604052604282526060366020840137565b6129076109a9565b6128ee565b9081602091031261000e575190565b506040513d6000823e3d90fd5b1561292f57565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b60809060208152602e60208201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960408201526d6f6e206973206e6f74205555505360901b60608201520190565b803b15612a0a5760008051602061471483398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b612a6e816129d5565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590612b75575b612ab457505050565b813b15612b24575060008281926020612b2195519201905af4612ad5612bd3565b60405191612ae283610a16565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b6040840152613401565b50565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b506001612aab565b612b86816129d5565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590612bcb57612ab457505050565b506000612aab565b3d15612bfe573d90612be482610a61565b91612bf26040519384610a31565b82523d6000602084013e565b606090565b15612c0a57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152609960205260409020546001600160a01b0316610544811515612c03565b90600182811c92168015612ca2575b6020831014612c8c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612c81565b6000805160206146d48339815191526000526000805160206146f483398151915290565b6000805160206147348339815191526000527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c69790565b15612d0d57565b60405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608490fd5b600081815260996020526040902054612d9b906001600160a01b03161515612c03565b6000908152609b60205260409020546001600160a01b031690565b15612dbd57565b60405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b6064820152608490fd5b91610a5f9391610fac93600060143610159081612e69575b5015612e5c57612e4c6108008436601319013560601c612f0f565b612e57838383613048565b613376565b612e4c6108008433612f0f565b600080516020614754833981519152815260fb602090815260409182902033600090815291522060ff9150541638612e31565b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b15612ef657565b60405162461bcd60e51b815280610f0d60048201612e9c565b6001600160a01b0380612f2184612c4f565b169281831692848414948515612f57575b50508315612f41575b50505090565b612f4d91929350612d78565b1614388080612f3b565b6000908152609c602090815260408083206001600160a01b03949094168352929052205460ff1693503880612f32565b15612f8e57565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b60018110613006575b6000190190565b61300e612fdf565b612fff565b6001906001198111613023570190565b612481612fdf565b801960301161303b575b60300190565b613043612fdf565b613035565b9061305283612c4f565b6001600160a01b03838116929091821683900361312d576130a16131049282169461307e861515612f87565b61308787613180565b6001600160a01b03166000908152609a6020526040902090565b6130ab8154612ff6565b90556001600160a01b0381166000908152609a602052604090206130cf8154613013565b90556130e5856000526099602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b6000818152609b6020526040812080546001600160a01b03191690556001600160a01b036131ad83612c4f565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b6000828152609b6020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b038061320f84612c4f565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e575161054481610328565b610544939260809260018060a01b03168252600060208301526040820152816060820152019061050e565b6001600160a01b0391821681529116602082015260408101919091526080606082018190526105449291019061050e565b909190803b1561336e576132e7916020916132c661465b565b946000604051809681958294630a85bd0160e11b9a8b855260048501613251565b03926001600160a01b03165af16000918161333e575b506133305761330a612bd3565b8051908161332b5760405162461bcd60e51b815280610f0d60048201612e9c565b602001fd5b6001600160e01b0319161490565b61336091925060203d8111613367575b6133588183610a31565b81019061323c565b90386132fd565b503d61334e565b505050600190565b92909190823b156133b2576132e792602092600061339261465b565b9660405196879586948593630a85bd0160e11b9b8c86526004860161327c565b50505050600190565b604051906133c8826109c0565b610191546001600160a01b038116835260a01c6020830152565b80600019048211811515166133f5570290565b6133fd612fdf565b0290565b9091901561340d575090565b81511561341d5750805190602001fd5b60405162461bcd60e51b815260206004820152908190610f0d90602483019061050e565b50634e487b7160e01b600052603260045260246000fd5b602090805115613466570190565b612481613441565b602190805160011015613466570190565b90602091805182101561349157010190565b613499613441565b010190565b801561355957806000908282935b61353357506134ba83610a61565b926134c86040519485610a31565b80845281601f196134d883610a61565b013660208701375b6134ea5750505090565b6134f390612ff6565b90600a9061351e61350e61350884840661302b565b60ff1690565b60f81b6001600160f81b03191690565b841a61352a848761347f565b530490816134e0565b926001600a91600019811461354c575b019304806134ac565b613554612fdf565b613543565b50604051613566816109c0565b60018152600360fc1b602082015290565b8015613006576000190190565b1561358b57565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b604051906135dc82610a16565b602a8252604036602084013760306135f383613458565b5360786135ff8361346e565b536029905b6001821161361757610544915015613584565b80600f61365392166010811015613659575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a613649848661347f565b5360041c91613577565b90613604565b613661613441565b613629565b7feb54e1feee3ae17add098cbf58a47457bf5f7c3a89ceab263cbdb01b3da6d98e61368f6128d3565b90603061369b83613458565b5360786136a78361346e565b536041905b600182116136bf57610544915015613584565b80600f6136f092166010811015613659576f181899199a1a9b1b9c1cb0b131b232b360811b901a613649848661347f565b906136ac565b60006137006128d3565b90603061370c83613458565b5360786137188361346e565b536041905b6001821161373057610544915015613584565b80600f61376192166010811015613659576f181899199a1a9b1b9c1cb0b131b232b360811b901a613649848661347f565b9061371d565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66137906128d3565b90603061379c83613458565b5360786137a88361346e565b536041905b600182116137c057610544915015613584565b80600f6137f192166010811015613659576f181899199a1a9b1b9c1cb0b131b232b360811b901a613649848661347f565b906137ad565b7ff372640890c51dda497431936a65d3bb1ddf67b1c27cd6cdf578ce883c4f5c366138206128d3565b90603061382c83613458565b5360786138388361346e565b536041905b6001821161385057610544915015613584565b80600f61388192166010811015613659576f181899199a1a9b1b9c1cb0b131b232b360811b901a613649848661347f565b9061383d565b7f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c156138b06128d3565b9060306138bc83613458565b5360786138c88361346e565b536041905b600182116138e057610544915015613584565b80600f61391192166010811015613659576f181899199a1a9b1b9c1cb0b131b232b360811b901a613649848661347f565b906138cd565b61391f6128d3565b90603061392b83613458565b5360786139378361346e565b536041905b6001821161394f57610544915015613584565b80600f61398092166010811015613659576f181899199a1a9b1b9c1cb0b131b232b360811b901a613649848661347f565b9061393c565b1561398d57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b156139f057565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b959391909796949297613a5b87612485565b80516001600160401b038111613b3b575b60008051602061473483398151915291613a8a826118408554612c72565b60209081601f8411600114613ad557506118aa9897969461189e94846118a49895610a5f9e9f95611890956000926118b75750508160011b916000199060031b1c19161790556126a4565b9190601f198416613ae4612cd0565b936000905b828210613b2357505094600185610a5f9e9f95611890956118aa9e9d9c9a956118a49c9961189e9b1061191057505050811b0190556126a4565b80600186978294978701518155019601940190613ae9565b613b436109a9565b613a6c565b90613b5a60ff60005460081c166139e9565b81516001600160401b038111613c54575b613b7f81613b7a609754612c72565b613d4b565b602080601f8311600114613bc157508190610a5f94600092613bb6575b50508160011b916000199060031b1c191617609755613e2d565b015190503880613b9c565b919293601f198416613bf560976000527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff990565b936000905b828210613c3c575050916001939185610a5f97969410613c23575b505050811b01609755613e2d565b015160001960f88460031b161c19169055388080613c15565b80600186978294978701518155019601940190613bfa565b613c5c6109a9565b613b6b565b601f8111613c6d575050565b6000906000805160206146d483398151915282526000805160206146f4833981519152906020601f850160051c83019410613cc3575b601f0160051c01915b828110613cb857505050565b818155600101613cac565b9092508290613ca3565b601f8111613cd9575050565b60009060008051602061473483398151915282527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c697906020601f850160051c83019410613d41575b601f0160051c01915b828110613d3657505050565b818155600101613d2a565b9092508290613d21565b601f8111613d57575050565b600090609782527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9906020601f850160051c83019410613db2575b601f0160051c01915b828110613da757505050565b818155600101613d9b565b9092508290613d92565b601f8111613dc8575050565b600090609882527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d814906020601f850160051c83019410613e23575b601f0160051c01915b828110613e1857505050565b818155600101613e0c565b9092508290613e03565b9081516001600160401b038111613f17575b613e5381613e4e609854612c72565b613dbc565b602080601f8311600114613e8f5750819293600092613e84575b50508160011b916000199060031b1c191617609855565b015190503880613e6d565b90601f19831694613ec260986000527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d81490565b926000905b878210613eff575050836001959610613ee6575b505050811b01609855565b015160001960f88460031b161c19169055388080613edb565b80600185968294968601518155019501930190613ec7565b613f1f6109a9565b613e3f565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b613f425750565b803b1561000e5760405163a41e7d5160e01b808252306004830152632e93c56f60e11b6024830152600091828160448183885af180156140c0575b6140ad575b50823b15614069576040519081523060048201526380ac58cd60e01b6024820152818160448183875af180156140a0575b61408d575b50813b1561061d576040516329965a1d60e01b80825230600483018190526001635d278adf60e01b036024840152604483015290828160648183885af18015614080575b61406d575b50823b1561406957604051908152306004820181905260016340562c6760e11b0360248301526044820152918290818381606481015b03925af1801561405c575b6140495750565b80614056610a5f926109e8565b806104ce565b61406461291b565b614042565b5080fd5b8061405661407a926109e8565b38614001565b61408861291b565b613ffc565b8061405661409a926109e8565b38613fb8565b6140a861291b565b613fb3565b806140566140ba926109e8565b38613f82565b6140c861291b565b613f7d565b6140d690612546565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b614102575b50610a5f6101f560018154019055565b803b1561000e5760405163a41e7d5160e01b8152306004820152632ab2ef8160e01b6024820152600090818160448183875af180156141be575b6141ab575b50813b1561061d576040516329965a1d60e01b81523060048201819052600163155977c160e11b0360248301526044820152918290606490829084905af1801561419e575b156140f25780614056614198926109e8565b386140f2565b6141a661291b565b614186565b806140566141b8926109e8565b38614141565b6141c661291b565b61413c565b6001600160a01b0381169081156142a4576000838152609960205260409020546001600160a01b031661425f576001600160a01b0381166000908152609a60205260409020614235919061421f8154613013565b90556130e5846000526099602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b6001600160a01b03811660009081527fef93721591a8283ebcbc635d4596270f18296615bf2ad2acc05699794bf143316020526040902054610a5f939291907feb54e1feee3ae17add098cbf58a47457bf5f7c3a89ceab263cbdb01b3da6d98e9060ff1615614359575b5050614416565b600081815260fb602090815260408083206001600160a01b03861684529091529020805460ff191660011790556001600160a01b038061439761465b565b169216906000805160206146b48339815191526000604051a43880614352565b156143be57565b60405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608490fd5b906001600160601b038116916144306127108411156143b7565b6001600160a01b031691821561446757602060405161444e816109c0565b848152015260a01b6001600160a01b0319161761019155565b60405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606490fd5b6144b8909291926125a7565b81516001600160401b038111614587575b6000805160206146d4833981519152906144e7816114068454612c72565b602080601f8311600114614523575081929394600092614518575b50508160011b916000199060031b1c1916179055565b015190503880614502565b90601f19831695614532612cac565b926000905b88821061456f57505083600195969710614556575b505050811b019055565b015160001960f88460031b161c1916905538808061454c565b80600185968294968601518155019501930190614537565b61458f6109a9565b6144c9565b61459d90612608565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b6145bb5750565b803b1561000e5760405163a41e7d5160e01b815230600482015263054fd4d560e41b6024820152600090818160448183875af1801561464e575b61463b575b50813b1561061d576040516329965a1d60e01b8152306004820181905260016354fd4d5160e01b036024830152604482015291829081838160648101614037565b80614056614648926109e8565b386145fa565b61465661291b565b6145f5565b60143610158061467b575b156146775736601319013560601c90565b3390565b503360009081527f452ae8ad28077a8dde36d329380df9bfd96077640c4bb696c45031c2933e8ad8602052604090205460ff1661466656fe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0da9f9158fe70cb34800ad178a5ece6c5a90de2e6ce3d18ac99a750313884ef86f19bfbe9c1d469104dfe3a613f5f31e0356b89c1b110180555c05774e09befab4360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc59c86eba0f8c3c9659b86fb2776edca2ff990d1509243e9705ae43a6831558c67a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb2a26469706673582212205aee871c3ad71914cf2156abf507573e6b398417186493a6b998ce3ee6bac6c164736f6c634300080e0033",
  "devdoc": {
    "details": "This implements the standard OwlProtocol `ERC721` contract that is an extension of Openzeppelin's `ERC721BurnableUpgradeable`. Initializations happens through initializers for compatibility with a EIP1167 minimal-proxy deployment strategy.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baseURI()": {
        "details": "Returns collection-wide URI-accessible metadata"
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "canImplementInterfaceForAddress(bytes32,address)": {
        "details": "See {IERC1820Implementer-canImplementInterfaceForAddress}."
      },
      "contractURI()": {
        "details": "Returns collection-wide URI-accessible metadata"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getImplementation()": {
        "details": "Returns the implementation address."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,string,address,string,string,string,address,uint96)": {
        "details": "Initializes an ERC721MintableAutoId contract",
        "params": {
          "_admin": "admin for contract",
          "_feeNumerator": "numerator of royalty fee percentage (numerator / 10000)",
          "_feeReceiver": "address of receiver of royalty fees",
          "_gsnForwarder": "GSN Trusted forwarder",
          "_initBaseURI": "base URI for contract",
          "_initContractURI": "uri for contract metadata description",
          "_name": "name for contract",
          "_symbol": "symbol for contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isTrustedForwarder(address)": {
        "details": "Determine is an address a GSN trusted forwarder.",
        "params": {
          "forwarder": "address to query"
        },
        "returns": {
          "_0": "OpenGSN trusted forwarder status"
        }
      },
      "mint(address)": {
        "details": "Allows MINTER_ROLE to mint NFTs",
        "params": {
          "to": "address to"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "proxyInitialize(address,string,address,string,string,string,address,uint96)": {
        "details": "Initializes contract through beacon proxy (replaces constructor in proxy pattern)"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeMint(address)": {
        "details": "Allows caller to mint NFTs (safeMint)",
        "params": {
          "to": "address to"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "Set contract uri"
      },
      "setContractURI(string)": {
        "details": "Set contract uri"
      },
      "setDefaultRoyalty(address,uint96)": {
        "details": "Exposing `_setDefaultRoyalty`"
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "details": "exposing `_setTokenRoyalty`"
      },
      "supportsInterface(bytes4)": {
        "details": "ERC165 Support",
        "params": {
          "interfaceId": "hash of the interface testing for"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "version()": {
        "details": "OwlProtocol contract version. Used to determine compatibility interoperable with other Owl contracts."
      },
      "versionRecipient()": {
        "details": "Returns OpenGSN contract version (used for compatibility checks)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1451,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1454,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1433,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7523,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8038,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5166,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "_name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 5168,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "_symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 5172,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "_owners",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5176,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "_balances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5180,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5186,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6028,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 6212,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 426,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "_roles",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)421_storage)"
      },
      {
        "astId": 725,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1730,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8071,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "351",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8117,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7006,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "401",
        "type": "t_struct(RoyaltyInfo)7003_storage"
      },
      {
        "astId": 7011,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "402",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)7003_storage)"
      },
      {
        "astId": 7191,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "__gap",
        "offset": 0,
        "slot": "403",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 9976,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "__gap",
        "offset": 0,
        "slot": "451",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10447,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "nextId",
        "offset": 0,
        "slot": "501",
        "type": "t_struct(Counter)7530_storage"
      },
      {
        "astId": 10451,
        "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
        "label": "__gap",
        "offset": 0,
        "slot": "502",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)421_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)421_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)7003_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981Upgradeable.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)7003_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)7530_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 7529,
            "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)421_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 418,
            "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 420,
            "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoyaltyInfo)7003_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981Upgradeable.RoyaltyInfo",
        "members": [
          {
            "astId": 7000,
            "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7002,
            "contract": "contracts/assets/ERC721/ERC721MintableAutoId.sol:ERC721MintableAutoId",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}