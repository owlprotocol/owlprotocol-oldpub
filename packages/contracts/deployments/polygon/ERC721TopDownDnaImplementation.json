{
  "address": "0xe20fC3c22B5057ed5C2B2A2b23D74761B71a0641",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "childTokenAddress",
          "type": "address"
        }
      ],
      "name": "AddressNotChild",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "childTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "childTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentChildTokenId",
          "type": "uint256"
        }
      ],
      "name": "ChildTokenAlreadyAssigned",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "parentOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "parentTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "childTokenId",
          "type": "uint256"
        }
      ],
      "name": "AttachedChild",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "parentOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "parentTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "childTokenId",
          "type": "uint256"
        }
      ],
      "name": "DetachedChild",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "childContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "childTokenId",
          "type": "uint256"
        }
      ],
      "name": "attachChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interfaceHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canImplementInterfaceForAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "childContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "childTokenId",
          "type": "uint256"
        }
      ],
      "name": "detachChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChildContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDna",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_initContractURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_gsnForwarder",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_initBaseURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feeNumerator",
          "type": "uint96"
        },
        {
          "internalType": "address[]",
          "name": "_childContracts",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "dna",
          "type": "bytes"
        }
      ],
      "name": "mintWithDna",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "parentTokenIdOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_initContractURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_gsnForwarder",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_initBaseURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_feeNumerator",
          "type": "uint96"
        },
        {
          "internalType": "address[]",
          "name": "_childContracts",
          "type": "address[]"
        }
      ],
      "name": "proxyInitialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "rootOwnerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "dna",
          "type": "bytes"
        }
      ],
      "name": "safeMintWithDna",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setDefaultRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeNumerator",
          "type": "uint96"
        }
      ],
      "name": "setTokenRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "dna",
          "type": "bytes"
        }
      ],
      "name": "updateDna",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "2fe98e12c0031ec2a7dec3df9237bffc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childTokenAddress\",\"type\":\"address\"}],\"name\":\"AddressNotChild\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"childTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentChildTokenId\",\"type\":\"uint256\"}],\"name\":\"ChildTokenAlreadyAssigned\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"parentTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"childTokenId\",\"type\":\"uint256\"}],\"name\":\"AttachedChild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"parentTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"childTokenId\",\"type\":\"uint256\"}],\"name\":\"DetachedChild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"childTokenId\",\"type\":\"uint256\"}],\"name\":\"attachChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canImplementInterfaceForAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"childTokenId\",\"type\":\"uint256\"}],\"name\":\"detachChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChildContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDna\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_initContractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_gsnForwarder\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address[]\",\"name\":\"_childContracts\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"dna\",\"type\":\"bytes\"}],\"name\":\"mintWithDna\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"parentTokenIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_initContractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_gsnForwarder\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_feeNumerator\",\"type\":\"uint96\"},{\"internalType\":\"address[]\",\"name\":\"_childContracts\",\"type\":\"address[]\"}],\"name\":\"proxyInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rootOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"dna\",\"type\":\"bytes\"}],\"name\":\"safeMintWithDna\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dna\",\"type\":\"bytes\"}],\"name\":\"updateDna\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721TopDownDNA\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"attachChild(uint256,address,uint256)\":{\"details\":\"Attach a child NFT, external function. Implements security checks.      In addition, address(this) must be approved to transfer childTokenId (operator or specific tokenId).\",\"params\":{\"childContract\":\"to attach\",\"childTokenId\":\"to attach\",\"tokenId\":\"stored in this contract\"}},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"details\":\"Returns collection-wide URI-accessible metadata\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"canImplementInterfaceForAddress(bytes32,address)\":{\"details\":\"See {IERC1820Implementer-canImplementInterfaceForAddress}.\"},\"contractURI()\":{\"details\":\"Returns collection-wide URI-accessible metadata\"},\"detachChild(uint256,address,uint256)\":{\"details\":\"Detach a child NFT, external function. Implements security checks.\",\"params\":{\"childContract\":\"to detach\",\"childTokenId\":\"to detach\",\"tokenId\":\"stored in this contract\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getChildContracts()\":{\"details\":\"Get child contracts that define attachment attributes\"},\"getDna(uint256)\":{\"details\":\"Getter for dna of tokenId\",\"params\":{\"tokenId\":\"to get\"},\"returns\":{\"_0\":\"dna of tokenId\"}},\"getImplementation()\":{\"details\":\"Returns the implementation address.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,string,address,string,string,string,address,uint96,address[])\":{\"details\":\"Initializes an ERC721MintableAutoId contract.      Protected with `initializer` modifier.\",\"params\":{\"_admin\":\"admin for contract\",\"_childContracts\":\"child ERC721TopDownDNA contracts\",\"_feeNumerator\":\"numerator of royalty fee percentage (numerator / 10000)\",\"_feeReceiver\":\"address of receiver of royalty fees\",\"_gsnForwarder\":\"GSN Trusted forwarder\",\"_initBaseURI\":\"base URI for contract\",\"_initContractURI\":\"uri for contract metadata description\",\"_name\":\"name for contract\",\"_symbol\":\"symbol for contract\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isTrustedForwarder(address)\":{\"details\":\"Determine is an address a GSN trusted forwarder.\",\"params\":{\"forwarder\":\"address to query\"},\"returns\":{\"_0\":\"OpenGSN trusted forwarder status\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Safety check, only accept child contracts & operator == address(this)\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"proxyInitialize(address,string,address,string,string,string,address,uint96,address[])\":{\"details\":\"Same as initialize but designed for usage with proxies.      Protected with `onlyInitializing` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"rootOwnerOf(uint256)\":{\"details\":\"Get the root owner of the parent token by recursing up the ownership tree until we react a non-ERC721TopDown address (EOA or contract).\",\"params\":{\"tokenId\":\"tokenId\"},\"returns\":{\"_0\":\"ownerOfAddress EOA or non-ERC721TopDown contract\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"Set contract uri\"},\"setContractURI(string)\":{\"details\":\"Set contract uri\"},\"setDefaultRoyalty(address,uint96)\":{\"details\":\"Exposing `_setDefaultRoyalty`\"},\"setTokenRoyalty(uint256,address,uint96)\":{\"details\":\"exposing `_setTokenRoyalty`\"},\"supportsInterface(bytes4)\":{\"details\":\"ERC165 Support\",\"params\":{\"interfaceId\":\"XOR of the external functions of the interface\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"returns uri for token metadata. If no baseURI, returns Dna as string\",\"params\":{\"tokenId\":\"tokenId metadata to fetch\"},\"returns\":{\"_0\":\"uri at which metadata is housed\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"updateDna(uint256,bytes)\":{\"details\":\"Change dna of a tokenId\",\"params\":{\"dna\":\"for the provided tokenId\",\"tokenId\":\"to change\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"version()\":{\"details\":\"OwlProtocol contract version. Used to determine compatibility interoperable with other Owl contracts.\"},\"versionRecipient()\":{\"details\":\"Returns OpenGSN contract version (used for compatibility checks)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"updateDna(uint256,bytes)\":{\"notice\":\"Must have DNA_ROLE\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/assets/ERC721/ERC721TopDownDna.sol\":\"ERC721TopDownDna\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa8ff557539dcfed5706eddde2aa929e06bb1764e71aa8c1048a78970bf3ca37d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa7dbff7171ac06a023a5ca52c2138ac711037b2146b9197a52e5de4f9183e04d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\\n    function __ERC2981_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC2981_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981Upgradeable\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x1ad46ec868f3cbf4331949daad82a6b2d846f2f3944cf0d53805f2296c30593b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/Base64Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64Upgradeable {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xe5e4e0d8e42c3d922808e127da779fede3bc382c1fc19665c5663e118027f7f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC1820ImplementerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC1820Implementer.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1820ImplementerUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC1820Implementer} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\\n * declare their willingness to be implementers.\\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\\n * registration to be complete.\\n */\\ncontract ERC1820ImplementerUpgradeable is Initializable, IERC1820ImplementerUpgradeable {\\n    function __ERC1820Implementer_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1820Implementer_init_unchained() internal onlyInitializing {\\n    }\\n    bytes32 private constant _ERC1820_ACCEPT_MAGIC = keccak256(\\\"ERC1820_ACCEPT_MAGIC\\\");\\n\\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bytes32)\\n    {\\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\\n    }\\n\\n    /**\\n     * @dev Declares the contract as willing to be an implementer of\\n     * `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer} and\\n     * {IERC1820Registry-interfaceHash}.\\n     */\\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\\n        _supportedInterfaces[interfaceHash][account] = true;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2666448e505df89f06bc8b5e8ae83ed3b5411e54fb69694510ec3620269534b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820ImplementerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Implementer.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for an ERC1820 implementer, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\\n * Used by contracts that will be registered as implementers in the\\n * {IERC1820Registry}.\\n */\\ninterface IERC1820ImplementerUpgradeable {\\n    /**\\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\\n     * implements `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xce35b9f17b74b88eb612b1ae727a25e3d91129c254beba840e9de2006b872978\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/introspection/IERC1820Registry.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820RegistryUpgradeable {\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc4b50ac2351fc9eb8e89b0a039d794db665e7e93bbc83c70da0e683bfc801971\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x8defa7c9cc7cc4eb529daff535eff833f76a4cb424f85a08524eeea15e071a55\",\"license\":\"MIT\"},\"contracts/assets/ERC721/ERC721Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\n\\nimport {IERC721Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport {ERC721Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\\nimport {ERC721BurnableUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol';\\n\\nimport {StorageSlotString} from '../../utils/StorageSlotString.sol';\\n\\nimport {OwlBase} from '../../common/OwlBase.sol';\\nimport {BaseURI} from '../../common/BaseURI.sol';\\nimport {ERC2981Setter} from '../common/ERC2981Setter.sol';\\nimport {IERC2981Setter} from '../common/IERC2981Setter.sol';\\n\\n/**\\n * @dev This implements the standard OwlProtocol `ERC721` contract that is an\\n * extension of Openzeppelin's `ERC721BurnableUpgradeable`. Initializations\\n * happens through initializers for compatibility with a EIP1167 minimal-proxy\\n * deployment strategy. No external mint functions are defined.\\n */\\nabstract contract ERC721Base is ERC721BurnableUpgradeable, OwlBase, BaseURI, ERC2981Setter {\\n    //https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private __gap;\\n\\n    /**********************\\n        Initialization\\n    **********************/\\n    function __ERC721Base_init(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _initBaseURI,\\n        address _feeReceiver,\\n        uint96 _feeNumerator\\n    ) internal {\\n        __ContractURI_init_unchained(_admin, _initContractURI);\\n        __RouterReceiver_init_unchained(_gsnForwarder);\\n        __OwlBase_init_unchained(_admin);\\n\\n        __ERC721_init_unchained(_name, _symbol);\\n        __BaseURI_init_unchained(_admin, _initBaseURI);\\n        __ERC2981Setter_init_unchained(_admin, _feeReceiver, _feeNumerator);\\n        __ERC721Base_init_unchained();\\n    }\\n\\n    function __ERC721Base_init_unchained() internal {\\n        if (AddressUpgradeable.isContract(ERC1820_REGISTRY)) {\\n            registry.updateERC165Cache(address(this), type(IERC2981Setter).interfaceId);\\n            registry.updateERC165Cache(address(this), type(IERC721Upgradeable).interfaceId);\\n            registry.setInterfaceImplementer(address(this), type(IERC2981Setter).interfaceId | ONE, address(this));\\n            registry.setInterfaceImplementer(address(this), type(IERC721Upgradeable).interfaceId | ONE, address(this));\\n        }\\n    }\\n\\n    /**********************\\n          Interaction\\n    **********************/\\n    /**\\n     * @dev Overrides OZ internal baseURI getter.\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return StorageSlotString.getStringSlot(_BASE_URI_SLOT).value;\\n    }\\n\\n    /**\\n     * @inheritdoc OwlBase\\n     */\\n    function _msgSender() internal view override(OwlBase, ContextUpgradeable) returns (address) {\\n        return OwlBase._msgSender();\\n    }\\n\\n    /**\\n     * @inheritdoc OwlBase\\n     */\\n    function _msgData() internal view override(OwlBase, ContextUpgradeable) returns (bytes calldata) {\\n        return OwlBase._msgData();\\n    }\\n\\n    /**\\n     * @inheritdoc OwlBase\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(OwlBase, ERC721Upgradeable, ERC2981Setter, BaseURI)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x7d512791e7cb9ef493540c91d8ddcc91d842109b07befdc6b455472d476067e5\",\"license\":\"MIT\"},\"contracts/assets/ERC721/ERC721TopDown.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC721ReceiverUpgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol';\\nimport {IERC721Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport {IERC165Upgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol';\\n\\nimport {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport {EnumerableSetUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol';\\n\\nimport {ERC721Base} from './ERC721Base.sol';\\nimport {IERC721TopDown} from './IERC721TopDown.sol';\\nimport {ERC721TopDownLib, Unauthorized, AddressNotChild} from './ERC721TopDownLib.sol';\\n\\n/**\\n * @dev Nested Top Down ERC721. Parents can own child tokens among fixed set of child contracts.\\n */\\nabstract contract ERC721TopDown is ERC721Base, IERC721TopDown, IERC721ReceiverUpgradeable {\\n    using AddressUpgradeable for address;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    //Child contracts\\n    EnumerableSetUpgradeable.AddressSet internal childContracts; //2 slots\\n\\n    // Adding 1 allows 0 to be the null value\\n    // There can only be one child token per contract\\n    // childTokenContract => childTokenId => tokenId\\n    mapping(address => mapping(uint256 => uint256)) public parentTokenIdOf;\\n    // tokenId => childTokenContract => childTokenId\\n    mapping(uint256 => mapping(address => uint256)) internal childTokenIdOf;\\n\\n    //https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[46] private __gap;\\n\\n    /**\\n     * Initialize ERC721TopDown\\n     * @param _childContracts child contracts that can be owned\\n     */\\n    function __ERC721TopDown_init_unchained(address[] memory _childContracts) internal {\\n        if (AddressUpgradeable.isContract(ERC1820_REGISTRY)) {\\n            registry.updateERC165Cache(address(this), type(IERC721ReceiverUpgradeable).interfaceId);\\n            registry.updateERC165Cache(address(this), type(IERC721TopDown).interfaceId);\\n            registry.setInterfaceImplementer(\\n                address(this),\\n                type(IERC721ReceiverUpgradeable).interfaceId | ONE,\\n                address(this)\\n            );\\n            registry.setInterfaceImplementer(address(this), type(IERC721TopDown).interfaceId | ONE, address(this));\\n        }\\n\\n        for (uint256 i = 0; i < _childContracts.length; i++) childContracts.add(_childContracts[i]);\\n    }\\n\\n    /***** Getters *****/\\n    /**\\n     * @dev Get child contracts that define attachment attributes\\n     */\\n    function getChildContracts() public view returns (address[] memory) {\\n        return childContracts.values();\\n    }\\n\\n    /***** Ownership ******/\\n    /**\\n     * @inheritdoc IERC721TopDown\\n     */\\n    function rootOwnerOf(uint256 tokenId) public view returns (address) {\\n        address parentContractAddress = ownerOf(tokenId);\\n        address childContractAddress = address(this);\\n\\n        while (ERC721TopDownLib.isERC721TopDown(parentContractAddress)) {\\n            tokenId = IERC721TopDown(parentContractAddress).parentTokenIdOf(childContractAddress, tokenId);\\n            (parentContractAddress, childContractAddress) = (\\n                IERC721Upgradeable(parentContractAddress).ownerOf(tokenId),\\n                parentContractAddress\\n            );\\n        }\\n\\n        return parentContractAddress;\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * owner == spender || approved(tokenId) == spender || operator(owner, spender) == true\\n     */\\n    function isApprovedOrRootOwner(\\n        address rootOwner,\\n        uint256 tokenId,\\n        address spender\\n    ) internal view returns (bool) {\\n        return spender == rootOwner || isApprovedForAll(rootOwner, spender) || getApproved(tokenId) == spender;\\n    }\\n\\n    /**\\n     * @dev Returns wether `spender` is allowed to manage `childTokenId`.\\n     * Approvals only work if parentTokenOwner = childOwner.\\n     * owner == spender || approved(tokenId) == spender || operator(owner, spender) == true\\n     */\\n    function isChildApprovedOrRootOwner(\\n        address childContract,\\n        address childOwner,\\n        uint256 childTokenId,\\n        address spender,\\n        address parentOwner\\n    ) internal view returns (bool) {\\n        return\\n            spender == childOwner ||\\n            ((IERC721Upgradeable(childContract).isApprovedForAll(childOwner, spender) ||\\n                IERC721Upgradeable(childContract).getApproved(childTokenId) == spender) && childOwner == parentOwner);\\n    }\\n\\n    /***** Child NFTs *****/\\n    /**\\n     * @dev Attach a child NFT, external function. Implements security checks.\\n     *      In addition, address(this) must be approved to transfer childTokenId (operator or specific tokenId).\\n     * @param tokenId stored in this contract\\n     * @param childContract to attach\\n     * @param childTokenId to attach\\n     */\\n    function attachChild(\\n        uint256 tokenId,\\n        address childContract,\\n        uint256 childTokenId\\n    ) external {\\n        //Check if childContract supported\\n        if (!childContracts.contains(childContract)) revert AddressNotChild(childContract);\\n\\n        //Check if currentChildTokenId assigned\\n\\n        //Ownership checks (both for parentOwner & spender)\\n        address spender = _msgSender();\\n        //Token\\n        address rootOwner = rootOwnerOf(tokenId);\\n        bool isApproved = isApprovedOrRootOwner(rootOwner, tokenId, spender);\\n        if (!isApproved) revert Unauthorized(spender, address(this), tokenId);\\n\\n        //Child Token\\n        address childOwner = IERC721Upgradeable(childContract).ownerOf(childTokenId);\\n        //Check childTokenId spender\\n        bool isChildApprovedOrOwner = isChildApprovedOrRootOwner(\\n            childContract,\\n            childOwner,\\n            childTokenId,\\n            spender,\\n            rootOwner\\n        );\\n\\n        if (!isChildApprovedOrOwner) revert Unauthorized(spender, childContract, childTokenId);\\n\\n        ERC721TopDownLib.attachChild(parentTokenIdOf, childTokenIdOf, childOwner, tokenId, childContract, childTokenId);\\n        emit AttachedChild(rootOwner, tokenId, childContract, childTokenId);\\n    }\\n\\n    /**\\n     * @dev Detach a child NFT, external function. Implements security checks.\\n     * @param tokenId stored in this contract\\n     * @param childContract to detach\\n     * @param childTokenId to detach\\n     */\\n    function detachChild(\\n        uint256 tokenId,\\n        address childContract,\\n        uint256 childTokenId\\n    ) external {\\n        //Ownership checks (both for parentOwner & spender)\\n        address spender = _msgSender();\\n        //Token\\n        address rootOwner = rootOwnerOf(tokenId);\\n        bool isApproved = isApprovedOrRootOwner(rootOwner, tokenId, spender);\\n        if (!isApproved) revert Unauthorized(spender, address(this), tokenId);\\n\\n        //No child approval checks, as these are inherited by parent token\\n        //State updates, transfer child token & update mappings\\n        ERC721TopDownLib.detachChild(parentTokenIdOf, childTokenIdOf, rootOwner, tokenId, childContract, childTokenId);\\n        emit DetachedChild(rootOwner, tokenId, childContract, childTokenId);\\n    }\\n\\n    /***** Overrides ******/\\n    /**\\n     * @dev Safety check, only accept child contracts & operator == address(this)\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address,\\n        uint256 tokenId,\\n        bytes memory\\n    ) external view override(IERC721ReceiverUpgradeable) returns (bytes4) {\\n        // Only child contracts can send NFTs into this contract\\n        address tokenAddress = msg.sender;\\n        //Pull-only transfers sent by this contract\\n        if (operator != address(this)) revert Unauthorized(operator, tokenAddress, tokenId);\\n\\n        if (!childContracts.contains(tokenAddress)) revert AddressNotChild(tokenAddress);\\n        return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721Base\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC721TopDown).interfaceId ||\\n            interfaceId == type(IERC721ReceiverUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xdd76bc40fc2a63e247d24df75bd193ce78f6c4630ad04204c665a2bc65a14771\",\"license\":\"MIT\"},\"contracts/assets/ERC721/ERC721TopDownDna.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC721Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport {IERC165Upgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol';\\n\\nimport {CountersUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol';\\nimport {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport {Base64Upgradeable} from '@openzeppelin/contracts-upgradeable/utils/Base64Upgradeable.sol';\\nimport {EnumerableSetUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol';\\n\\nimport {ERC721TopDown} from './ERC721TopDown.sol';\\nimport {IERC721Dna} from './IERC721Dna.sol';\\nimport {IERC721TopDownDna} from './IERC721TopDownDna.sol';\\nimport {Unauthorized, AddressNotChild} from './ERC721TopDownLib.sol';\\n\\n/**\\n * @dev ERC721TopDownDNA\\n */\\ncontract ERC721TopDownDna is ERC721TopDown, IERC721Dna, IERC721TopDownDna {\\n    using Base64Upgradeable for bytes;\\n    using AddressUpgradeable for address;\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    bytes32 internal constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n    bytes32 internal constant DNA_ROLE = keccak256('DNA_ROLE');\\n\\n    // Auto-incrementing tokenIds\\n    CountersUpgradeable.Counter private nextId; //1 slot\\n    // tokenId => dna\\n    mapping(uint256 => bytes) internal inherentDna;\\n\\n    //https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[48] private __gap;\\n\\n    constructor() {}\\n\\n    /**\\n     * @inheritdoc IERC721TopDownDna\\n     */\\n    function initialize(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _initBaseURI,\\n        address _feeReceiver,\\n        uint96 _feeNumerator,\\n        address[] memory _childContracts\\n    ) external initializer {\\n        __ERC721TopDownDna_init(\\n            _admin,\\n            _initContractURI,\\n            _gsnForwarder,\\n            _name,\\n            _symbol,\\n            _initBaseURI,\\n            _feeReceiver,\\n            _feeNumerator,\\n            _childContracts\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721TopDownDna\\n     */\\n    function proxyInitialize(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _initBaseURI,\\n        address _feeReceiver,\\n        uint96 _feeNumerator,\\n        address[] memory _childContracts\\n    ) external onlyInitializing {\\n        __ERC721TopDownDna_init(\\n            _admin,\\n            _initContractURI,\\n            _gsnForwarder,\\n            _name,\\n            _symbol,\\n            _initBaseURI,\\n            _feeReceiver,\\n            _feeNumerator,\\n            _childContracts\\n        );\\n    }\\n\\n    /**\\n     * @dev Initialize ERC721TopDownDna + dependencies\\n     */\\n    function __ERC721TopDownDna_init(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _initBaseURI,\\n        address _feeReceiver,\\n        uint96 _feeNumerator,\\n        address[] memory _childContracts\\n    ) internal {\\n        __ContractURI_init_unchained(_admin, _initContractURI);\\n        __RouterReceiver_init_unchained(_gsnForwarder);\\n        __OwlBase_init_unchained(_admin);\\n\\n        __ERC721_init_unchained(_name, _symbol);\\n        __BaseURI_init_unchained(_admin, _initBaseURI);\\n        __ERC2981Setter_init_unchained(_admin, _feeReceiver, _feeNumerator);\\n        __ERC721Base_init_unchained();\\n\\n        __ERC721TopDown_init_unchained(_childContracts);\\n        __ERC721TopDownDna_init_unchained(_admin, _admin);\\n    }\\n\\n    /**\\n     * Initialize ERC721TopDownDna\\n     * @param _minterRole minter permissions\\n     * @param _dnaRole dna permissions\\n     */\\n    function __ERC721TopDownDna_init_unchained(address _minterRole, address _dnaRole) internal {\\n        _grantRole(MINTER_ROLE, _minterRole);\\n        _grantRole(DNA_ROLE, _dnaRole);\\n\\n        if (AddressUpgradeable.isContract(ERC1820_REGISTRY)) {\\n            registry.updateERC165Cache(address(this), type(IERC721TopDownDna).interfaceId);\\n            registry.setInterfaceImplementer(address(this), type(IERC721TopDownDna).interfaceId | ONE, address(this));\\n        }\\n\\n        //Start at 1\\n        nextId.increment();\\n    }\\n\\n    /***** Minting *****/\\n    /**\\n     * @inheritdoc IERC721Dna\\n     */\\n    function mintWithDna(address to, bytes memory dna) public onlyRole(MINTER_ROLE) returns (uint256) {\\n        uint256 tokenId = nextId.current();\\n        nextId.increment();\\n        inherentDna[tokenId] = dna;\\n        _mint(to, tokenId);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Dna\\n     */\\n    function safeMintWithDna(address to, bytes memory dna) public onlyRole(MINTER_ROLE) returns (uint256) {\\n        uint256 tokenId = nextId.current();\\n        nextId.increment();\\n        inherentDna[tokenId] = dna;\\n        _safeMint(to, tokenId, '');\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Dna\\n     */\\n    function updateDna(uint256 tokenId, bytes memory dna) external onlyRole(DNA_ROLE) {\\n        //Ownership checks (both for parentOwner & spender)\\n        address spender = _msgSender();\\n        address rootOwner = rootOwnerOf(tokenId);\\n\\n        bool isApproved = isApprovedOrRootOwner(rootOwner, tokenId, spender);\\n        if (!isApproved) revert Unauthorized(spender, address(this), tokenId);\\n\\n        inherentDna[tokenId] = dna;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Dna\\n     */\\n    function getDna(uint256 tokenId) public view returns (bytes memory) {\\n        _requireMinted(tokenId);\\n        address[] memory childContractAddresses = childContracts.values();\\n        bytes[] memory childDnas = new bytes[](childContractAddresses.length);\\n\\n        for (uint256 i = 0; i < childContractAddresses.length; i++) {\\n            address childContract = childContractAddresses[i];\\n            uint256 childTokenId = childTokenIdOf[tokenId][childContract];\\n            bytes memory childDna;\\n            if (childTokenId != 0) {\\n                childDna = ERC721TopDownDna(childContract).getDna(childTokenId);\\n            } else {\\n                childDna = new bytes(0);\\n            }\\n            childDnas[i] = childDna;\\n        }\\n\\n        //Decode recursively as (bytes, bytes[])\\n        bytes memory dna = abi.encode(inherentDna[tokenId], childDnas);\\n        return dna;\\n    }\\n\\n    /***** Dna *****/\\n    /**\\n     * @dev returns uri for token metadata. If no baseURI, returns Dna as string\\n     * @param tokenId tokenId metadata to fetch\\n     * @return uri at which metadata is housed\\n     */\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        bytes memory dnaRaw = getDna(tokenId);\\n        string memory dnaString = dnaRaw.encode();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, dnaString)) : dnaString;\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721TopDown\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC721Dna).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x1c4129ada1fcf3d429af3abc867127cc851a5cebe54336e6f4bd45dca90ea865\",\"license\":\"MIT\"},\"contracts/assets/ERC721/ERC721TopDownLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC165Upgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol';\\nimport {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport {EnumerableSetUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol';\\nimport {IERC721Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport {IERC721TopDown} from './IERC721TopDown.sol';\\n\\nerror AddressNotChild(address childTokenAddress);\\nerror TokenIdZero();\\nerror ChildTokenAlreadyAssigned(address childTokenAddress, uint256 childTokenId, uint256 currentChildTokenId);\\nerror ChildTokenNotAttached(uint256 tokenId, address childTokenAddress);\\nerror Unauthorized(address owner, address tokenAddress, uint256 tokenId);\\n\\nlibrary ERC721TopDownLib {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    /**\\n     * @dev check if address is ERC721 Top Down\\n     * @param contractAddress EOA, non-ERC721TopDown, ERC721TopDown\\n     */\\n    function isERC721TopDown(address contractAddress) internal view returns (bool) {\\n        //Case 0: EOA\\n        if (!AddressUpgradeable.isContract(contractAddress)) return false;\\n        //Case 1: Non-ERC721TopDown\\n        try IERC165Upgradeable(contractAddress).supportsInterface(type(IERC721TopDown).interfaceId) returns (\\n            bool supported\\n        ) {\\n            if (!supported) {\\n                //Non-ERC721TopDown\\n                return false;\\n            } else {\\n                return true;\\n            }\\n        } catch {\\n            //Non-IERC165, Non-ERC721TopDown\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attach a child NFT, internal function. Implements state changes.\\n     * @param parentTokenIdOf parent tokenId mapping\\n     * @param childTokenIdOf child tokenId mapping\\n     * @param from owner of tokenId\\n     * @param tokenId stored in this contract\\n     * @param childContract to attach\\n     * @param childTokenId to attach\\n     */\\n    function attachChild(\\n        mapping(address => mapping(uint256 => uint256)) storage parentTokenIdOf,\\n        mapping(uint256 => mapping(address => uint256)) storage childTokenIdOf,\\n        address from,\\n        uint256 tokenId,\\n        address childContract,\\n        uint256 childTokenId\\n    ) internal {\\n        uint256 currentChildTokenId = childTokenIdOf[tokenId][childContract];\\n        if (currentChildTokenId != 0)\\n            revert ChildTokenAlreadyAssigned(childContract, childTokenId, currentChildTokenId);\\n\\n        childTokenIdOf[tokenId][childContract] = childTokenId;\\n        parentTokenIdOf[childContract][childTokenId] = tokenId;\\n\\n        IERC721Upgradeable(childContract).safeTransferFrom(from, address(this), childTokenId);\\n    }\\n\\n    /**\\n     * @dev Attach a child NFT, internal function. Implements state changes.\\n     * @param parentTokenIdOf parent tokenId mapping\\n     * @param childTokenIdOf child tokenId mapping\\n     * @param to owner of tokenId\\n     * @param tokenId stored in this contract\\n     * @param childContract to attach\\n     * @param childTokenId to attach\\n     */\\n    function detachChild(\\n        mapping(address => mapping(uint256 => uint256)) storage parentTokenIdOf,\\n        mapping(uint256 => mapping(address => uint256)) storage childTokenIdOf,\\n        address to,\\n        uint256 tokenId,\\n        address childContract,\\n        uint256 childTokenId\\n    ) internal {\\n        uint256 currentChildTokenId = childTokenIdOf[tokenId][childContract];\\n        if (currentChildTokenId != childTokenId)\\n            revert ChildTokenAlreadyAssigned(childContract, childTokenId, currentChildTokenId);\\n\\n        delete childTokenIdOf[tokenId][childContract];\\n        delete parentTokenIdOf[childContract][childTokenId];\\n\\n        IERC721Upgradeable(childContract).safeTransferFrom(address(this), to, childTokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7ce91465772e0e90ad7e47cae4ef59686f0b1c098369462a5455546bd1e2ebaf\",\"license\":\"MIT\"},\"contracts/assets/ERC721/IERC721Dna.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * Interface for NFT with encoded attributes.\\n */\\ninterface IERC721Dna {\\n    /***** DNA  ******/\\n    function mintWithDna(address to, bytes memory dna) external returns (uint256);\\n\\n    function safeMintWithDna(address to, bytes memory dna) external returns (uint256);\\n\\n    /***** DNA *****/\\n    /**\\n     * @dev Getter for dna of tokenId\\n     * @param tokenId to get\\n     * @return dna of tokenId\\n     */\\n    function getDna(uint256 tokenId) external returns (bytes memory);\\n\\n    /**\\n     * @notice Must have DNA_ROLE\\n     * @dev Change dna of a tokenId\\n     * @param tokenId to change\\n     * @param dna for the provided tokenId\\n     */\\n    function updateDna(uint256 tokenId, bytes memory dna) external;\\n}\\n\",\"keccak256\":\"0xdd07aed069a591d04c8bc5fc47b8448438481a7e5c1e29ceea6e679bc1da5c6e\",\"license\":\"MIT\"},\"contracts/assets/ERC721/IERC721TopDown.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * Interface for nested NFT that can own other NFTs.\\n */\\ninterface IERC721TopDown {\\n    event AttachedChild(\\n        address indexed parentOwner,\\n        uint256 indexed parentTokenId,\\n        address indexed childContract,\\n        uint256 childTokenId\\n    );\\n    event DetachedChild(\\n        address indexed parentOwner,\\n        uint256 indexed parentTokenId,\\n        address indexed childContract,\\n        uint256 childTokenId\\n    );\\n\\n    function getChildContracts() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Get parentTokenId of locked child nft\\n     */\\n    function parentTokenIdOf(address childContract, uint256 childTokenId) external view returns (uint256);\\n\\n    /**\\n     * @dev Get the root owner of the parent token by recursing up the ownership tree\\n     * until we react a non-ERC721TopDown address (EOA or contract).\\n     * @param tokenId tokenId\\n     * @return ownerOfAddress EOA or non-ERC721TopDown contract\\n     */\\n    function rootOwnerOf(uint256 tokenId) external view returns (address);\\n\\n    /***** Child NFTs *****/\\n    /**\\n     * @dev Attach a child NFT\\n     * @param parentTokenId stored in this contract\\n     * @param childContract to attach\\n     * @param childTokenId to attach\\n     */\\n    function attachChild(\\n        uint256 parentTokenId,\\n        address childContract,\\n        uint256 childTokenId\\n    ) external;\\n\\n    /**\\n     * @dev Detach a child NFT\\n     * @param parentTokenId stored in this contract\\n     * @param childContract to detach\\n     * @param childTokenId to detach\\n     */\\n    function detachChild(\\n        uint256 parentTokenId,\\n        address childContract,\\n        uint256 childTokenId\\n    ) external;\\n}\\n\",\"keccak256\":\"0x78945284f9df8f7a8a4b66676405dcba715d9fc06296e6a14d1b1cb579a4aa95\",\"license\":\"MIT\"},\"contracts/assets/ERC721/IERC721TopDownDna.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * Interface for NFT with encoded attributes.\\n */\\ninterface IERC721TopDownDna {\\n    /**\\n     * @dev Initializes an ERC721MintableAutoId contract.\\n     *      Protected with `initializer` modifier.\\n     * @param _admin admin for contract\\n     * @param _initContractURI uri for contract metadata description\\n     * @param _gsnForwarder GSN Trusted forwarder\\n     * @param _name name for contract\\n     * @param _symbol symbol for contract\\n     * @param _initBaseURI base URI for contract\\n     * @param _feeReceiver address of receiver of royalty fees\\n     * @param _feeNumerator numerator of royalty fee percentage (numerator / 10000)\\n     * @param _childContracts child ERC721TopDownDNA contracts\\n     */\\n    function initialize(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _initBaseURI,\\n        address _feeReceiver,\\n        uint96 _feeNumerator,\\n        address[] memory _childContracts\\n    ) external;\\n\\n    /**\\n     * @dev Same as initialize but designed for usage with proxies.\\n     *      Protected with `onlyInitializing` modifier.\\n     */\\n    function proxyInitialize(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _initBaseURI,\\n        address _feeReceiver,\\n        uint96 _feeNumerator,\\n        address[] memory _childContracts\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4e4d787032ed18037b1e9a3e45d8ad2f6c6f3a475a5ad7d4fd179fbd415eadd2\",\"license\":\"MIT\"},\"contracts/assets/common/ERC2981Setter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {ERC2981Upgradeable} from '@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol';\\n\\nimport {IERC2981Setter} from './IERC2981Setter.sol';\\n\\n/**\\n * @dev ERC2981 with access control public functions\\n */\\nabstract contract ERC2981Setter is AccessControlUpgradeable, ERC2981Upgradeable, IERC2981Setter {\\n    bytes32 internal constant ROYALTY_ROLE = keccak256('ROYALTY_ROLE');\\n\\n    /**\\n     * @dev ERC2981Setter chained initialization\\n     * @param _royaltyRole write role\\n     * @param _royaltyReceiver initial royalty receiver\\n     * @param _feeNumerator fee numerator\\n     */\\n    function __ERC2981Setter_init(\\n        address _royaltyRole,\\n        address _royaltyReceiver,\\n        uint96 _feeNumerator\\n    ) internal {\\n        __ERC2981Setter_init_unchained(_royaltyRole, _royaltyReceiver, _feeNumerator);\\n    }\\n\\n    /**\\n     * @dev ERC2981Setter unchained initialization\\n     * @param _royaltyRole write role\\n     * @param _royaltyReceiver initial royalty receiver\\n     * @param _feeNumerator fee numerator\\n     */\\n    function __ERC2981Setter_init_unchained(\\n        address _royaltyRole,\\n        address _royaltyReceiver,\\n        uint96 _feeNumerator\\n    ) internal {\\n        _grantRole(ROYALTY_ROLE, _royaltyRole);\\n        _setDefaultRoyalty(_royaltyReceiver, _feeNumerator);\\n    }\\n\\n    /**\\n     * @dev exposing `_setTokenRoyalty`\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyRole(ROYALTY_ROLE) {\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Exposing `_setDefaultRoyalty`\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external onlyRole(ROYALTY_ROLE) {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId hash of the interface testing for\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlUpgradeable, ERC2981Upgradeable)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC2981Setter).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbdf00f92cb6a8204a08214cfb6146630ee62a2386cc1744f6f17844ba03185f0\",\"license\":\"MIT\"},\"contracts/assets/common/IERC2981Setter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard setter\\n */\\ninterface IERC2981Setter  {\\n    /**\\n     * @dev exposing `_setTokenRoyalty`\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external;\\n\\n    /**\\n     * @dev Exposing `_setDefaultRoyalty`\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) external;\\n}\\n\",\"keccak256\":\"0x57b8a826f5bc10fcafb3f862b6fc158a14506e72ca0b568caee488dc0ffc8d8b\",\"license\":\"MIT\"},\"contracts/common/BaseURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {IBaseURI} from './IBaseURI.sol';\\nimport {StorageSlotString} from '../utils/StorageSlotString.sol';\\n\\n/**\\n * @dev Implements contract uri getter/setter\\n */\\ncontract BaseURI is AccessControlUpgradeable, IBaseURI {\\n    bytes32 internal constant BASE_URI_ROLE = keccak256('BASE_URI_ROLE');\\n    bytes32 internal constant _BASE_URI_SLOT = keccak256('BASE_URI');\\n\\n    /**\\n     * @dev BaseURI chained initialization\\n     * @param _baseUriRole write role\\n     * @param _initBaseURI initial contract uri\\n     */\\n    function __BaseURI_init(address _baseUriRole, string memory _initBaseURI) internal {\\n        __BaseURI_init_unchained(_baseUriRole, _initBaseURI);\\n    }\\n\\n    /**\\n     * @dev BaseURI unchained initialization.\\n     * @param _baseUriRole write role\\n     * @param _initBaseURI initial contract uri\\n     */\\n    function __BaseURI_init_unchained(address _baseUriRole, string memory _initBaseURI) internal {\\n        _grantRole(BASE_URI_ROLE, _baseUriRole);\\n        StorageSlotString.getStringSlot(_BASE_URI_SLOT).value = _initBaseURI;\\n    }\\n\\n    /**\\n     * @dev Returns collection-wide URI-accessible metadata\\n     */\\n    function baseURI() public view returns (string memory) {\\n        return StorageSlotString.getStringSlot(_BASE_URI_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Set contract uri\\n     */\\n    function setBaseURI(string memory uri) external onlyRole(BASE_URI_ROLE) {\\n        StorageSlotString.getStringSlot(_BASE_URI_SLOT).value = uri;\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IBaseURI).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x0512e97c4bd6d5660ea1b03c0d8f9a1801149c225105a2b7f8262cfe242b5d52\",\"license\":\"MIT\"},\"contracts/common/ContractURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {IContractURI} from './IContractURI.sol';\\nimport {StorageSlotString} from '../utils/StorageSlotString.sol';\\n\\n/**\\n * @dev Implements contract uri getter/setter\\n */\\ncontract ContractURI is AccessControlUpgradeable, IContractURI {\\n    bytes32 internal constant CONTRACT_URI_ROLE = keccak256('CONTRACT_URI_ROLE');\\n    bytes32 internal constant _CONTRACT_URI_SLOT = keccak256('CONTRACT_URI');\\n\\n    /**\\n     * @dev ContractURI chained initialization\\n     * @param _contractUriRole write role\\n     * @param _initContractURI initial contract uri\\n     */\\n    function __ContractURI_init(address _contractUriRole, string memory _initContractURI) internal {\\n        __ContractURI_init_unchained(_contractUriRole, _initContractURI);\\n    }\\n\\n    /**\\n     * @dev ContractURI unchained initialization.\\n     * @param _contractUriRole write role\\n     * @param _initContractURI initial contract uri\\n     */\\n    function __ContractURI_init_unchained(address _contractUriRole, string memory _initContractURI) internal {\\n        _grantRole(CONTRACT_URI_ROLE, _contractUriRole);\\n        StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value = _initContractURI;\\n    }\\n\\n    /**\\n     * @dev Returns collection-wide URI-accessible metadata\\n     */\\n    function contractURI() public view returns (string memory) {\\n        return StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Set contract uri\\n     */\\n    function setContractURI(string memory uri) external onlyRole(CONTRACT_URI_ROLE) {\\n        StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value = uri;\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IContractURI).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd8dc6ad13d314f7e0e42a0103200bf2e17a1f004776b2bec4ff00fd333429414\",\"license\":\"MIT\"},\"contracts/common/IBaseURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev IBaseURI defines metadata for a contract's assets. A 1:N relationship between contract address + id and metadata uri. Used by standards such as ERC721, ERC1155\\n */\\ninterface IBaseURI {\\n    function baseURI() external view returns (string memory);\\n    function setBaseURI(string memory uri) external;\\n}\\n\",\"keccak256\":\"0xad29356d8f8869e9ae16ac947e179f48792f15c587094c340cf7cf8b4c642839\",\"license\":\"MIT\"},\"contracts/common/IContractURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev IContractURI defines a contract with metadata. A 1:1 relationship between contract address and metdata uri.\\n */\\ninterface IContractURI {\\n    function contractURI() external view returns (string memory);\\n    function setContractURI(string memory uri) external;\\n}\\n\",\"keccak256\":\"0xec2f10bd854049d89466c7c7a145eba628e69e6e688f5c8fdab16f7aa6adf094\",\"license\":\"MIT\"},\"contracts/common/IOwlBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { IAccessControlUpgradeable } from '@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol';\\nimport { IContractURI } from './IContractURI.sol';\\nimport { IRouterReceiver } from './IRouterReceiver.sol';\\n\\n/**\\n * IOwlBase interface\\n */\\ninterface IOwlBase is IAccessControlUpgradeable, IContractURI, IRouterReceiver {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xaac3c3501e7083b0e9385f92b16909932b10bca004c575fa30703309cc318448\",\"license\":\"MIT\"},\"contracts/common/IRouterReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * IRouterReceiver defines OpenGSN Interfaces\\n */\\ninterface IRouterReceiver {\\n    function isTrustedForwarder(address forwarder) external view returns (bool);\\n    function versionRecipient() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0x27f0c495d085cbd04415b72d86942255e7d7e4283a01da87f7bf459b6cd0ac46\",\"license\":\"MIT\"},\"contracts/common/OwlBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport {UUPSUpgradeable} from '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport {IERC1820RegistryUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol';\\nimport {ERC1820ImplementerUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/ERC1820ImplementerUpgradeable.sol';\\nimport {ContractURI} from './ContractURI.sol';\\nimport {RouterReceiver} from './RouterReceiver.sol';\\nimport {IOwlBase} from './IOwlBase.sol';\\n\\n/**\\n * @dev Base for all OwlProtocol contracts\\n *\\n * Implements several required mechanisms for all OwlProtocol contracts to\\n * utilize:\\n * - OpenGSN support (gasless transactions)\\n * - Consistent contract versioning\\n * - Consistent access control\\n * - UUPS contract upgrade support\\n */\\ncontract OwlBase is\\n    ContextUpgradeable,\\n    AccessControlUpgradeable,\\n    UUPSUpgradeable,\\n    ContractURI,\\n    RouterReceiver,\\n    ERC1820ImplementerUpgradeable,\\n    IOwlBase\\n{\\n    // Consistent version across all contracts\\n    string internal constant _version = 'v0.1';\\n    address constant ERC1820_REGISTRY = 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24;\\n    bytes32 constant ONE = 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    IERC1820RegistryUpgradeable constant registry = IERC1820RegistryUpgradeable(ERC1820_REGISTRY);\\n\\n    /**\\n        Chained / Unchained\\n        https://forum.openzeppelin.com/t/difference-between-init-and-init-unchained/25255/3\\n\\n        Chained: constructor header replacement (parent inherited contracts)\\n        Unchained: constructor replacement (self init)\\n\\n     */\\n    /**\\n     * @dev OwlBase chained initialization\\n     * @param _admin address to assign owner rights\\n     * @param _forwarder OpenGSN forwarder address (if desired).\\n     */\\n    function __OwlBase_init(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _forwarder\\n    ) internal {\\n        __ContractURI_init_unchained(_admin, _initContractURI);\\n        __RouterReceiver_init_unchained(_forwarder);\\n\\n        __OwlBase_init_unchained(_admin);\\n    }\\n\\n    /**\\n     * @dev OwlBase unchained initialization.\\n     * @param _admin address to assign owner rights\\n     */\\n    function __OwlBase_init_unchained(address _admin) internal {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        if (AddressUpgradeable.isContract(ERC1820_REGISTRY)) {\\n            registry.updateERC165Cache(address(this), type(IOwlBase).interfaceId);\\n            registry.setInterfaceImplementer(address(this), type(IOwlBase).interfaceId | ONE, address(this));\\n        }\\n    }\\n\\n    /**\\n     * @notice Only callable by admins\\n     * @dev UUPS function to authorize upgrades\\n     * @param newImplementation newImplementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    /**\\n     * @dev Returns the implementation address.\\n     */\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /**\\n     * @dev OwlProtocol contract version. Used to determine compatibility\\n     * interoperable with other Owl contracts.\\n     */\\n    function version() external pure virtual returns (string memory) {\\n        return _version;\\n    }\\n\\n    /** Overrides */\\n    function _msgSender() internal view virtual override(RouterReceiver, ContextUpgradeable) returns (address) {\\n        return RouterReceiver._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(RouterReceiver, ContextUpgradeable) returns (bytes calldata) {\\n        return RouterReceiver._msgData();\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlUpgradeable, ContractURI, RouterReceiver)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOwlBase).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf296b1eaf7add0db769e09c517d6128141568de96f3a817456f0c0ce9c5e826e\",\"license\":\"MIT\"},\"contracts/common/RouterReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {IRouterReceiver} from './IRouterReceiver.sol';\\n\\n/**\\n * @dev Implements OpenGSN Config\\n */\\ncontract RouterReceiver is AccessControlUpgradeable, IRouterReceiver {\\n    bytes32 internal constant ROUTER_ROLE = keccak256('ROUTER_ROLE');\\n\\n    /**\\n     * @dev RouterReceiver chained initialization\\n     * @param _router router role\\n     */\\n    function __RouterReceiver_init(address _router) internal {\\n        __RouterReceiver_init_unchained(_router);\\n    }\\n\\n    /**\\n     * @dev RouterReceiver unchained initialization.\\n     * @param _router router role\\n     */\\n    function __RouterReceiver_init_unchained(address _router) internal {\\n        _grantRole(ROUTER_ROLE, _router);\\n    }\\n\\n    /**\\n     * @dev Returns OpenGSN contract version (used for compatibility checks)\\n     */\\n    function versionRecipient() external pure virtual returns (string memory) {\\n        return '2.2.6';\\n    }\\n\\n    /**\\n     * @dev Determine is an address a GSN trusted forwarder.\\n     * @param forwarder address to query\\n     * @return OpenGSN trusted forwarder status\\n     */\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return hasRole(ROUTER_ROLE, forwarder);\\n    }\\n\\n    /**\\n     * @notice the following 3 functions are all required for OpenGSN integration\\n     * @dev Support for meta transactions\\n     * @return ret either msg.sender or user who called transaction through a relayer\\n     */\\n    function _msgSender() internal view virtual override returns (address ret) {\\n        if (msg.data.length >= 20 && hasRole(ROUTER_ROLE, msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * @dev Support for meta transactions\\n     * @return msgData from either msg.sender or from user who called through relayer\\n     */\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (msg.data.length >= 20 && hasRole(ROUTER_ROLE, msg.sender)) {\\n            return msg.data[0:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IRouterReceiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x92ef1efa23fce0e51555009c49489e1002ae8588358876400c356070df050f3f\",\"license\":\"MIT\"},\"contracts/utils/StorageSlotString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing strings to specific storage slots.\\n* Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *   bytes32 internal constant _CONTRACT_URI_SLOT = keccak256('CONTRACT_URI');\\n *\\n *   function contractURI() public view returns (string memory) {\\n *       return StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value;\\n *   }\\n *\\n *   function setContractURI(string memory uri) external onlyRole(CONTRACT_URI_ROLE) {\\n *       StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value = uri;\\n *   }\\n * }\\n * ```\\n */\\nlibrary StorageSlotString {\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd63ecf1ae3fdcb6c6cb7202602feb6df5c44179aa013535fa9a27d1114e6f43a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0806040523461003257306080526159c6908162000038823960805181818161100e0152818161130e01526114240152f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a7146103bf57806304634d8d146103b657806306fdde03146103ad578063081812fc146103a4578063095ea7b31461039b5780630d567b9b146103925780631489f1fb14610389578063150b7a021461038057806323b872dd14610377578063248a9ca31461036e578063249cb3fa146103655780632a55205a1461035c5780632f2ff15d1461035357806336568abe1461034a5780633659cfe614610341578063422627c31461033857806342842e0e1461032f57806342966c681461032657806343a61a8e1461031d578063486ff0cd146103145780634f1ef2861461030b57806352d1902d1461030257806354fd4d50146102f957806355f804b3146102f0578063572b6c05146102e75780635944c753146102de5780635ca8a958146102d55780636352211e146102cc5780636c0360eb146102c357806370a08231146102ba57806370bed434146102b157806374ca69fb146102a857806390dcf02d1461029f57806391d1485414610296578063938e3d7b1461028d57806395d89b4114610284578063a217fddf1461027b578063a22cb46514610272578063aaf10f4214610269578063abc8507914610260578063b88d4fde14610257578063c87b56dd1461024e578063d3a342a814610245578063d547741f1461023c578063de02a59314610233578063e8a3d4851461022a5763e985e9c51461022257600080fd5b61000e6126fd565b5061000e612621565b5061000e6125d4565b5061000e612591565b5061000e6123ee565b5061000e612339565b5061000e61231e565b5061000e612232565b5061000e6121fb565b5061000e6120f3565b5061000e6120cc565b5061000e612024565b5061000e611f59565b5061000e611f0e565b5061000e611dec565b5061000e611ca7565b5061000e611b2b565b5061000e611947565b5061000e61191b565b5061000e6118fc565b5061000e6117bb565b5061000e6116b1565b5061000e61163c565b5061000e611546565b5061000e6114d6565b5061000e611410565b5061000e6112fa565b5061000e61127b565b5061000e61125c565b5061000e6111a9565b5061000e611162565b5061000e61112e565b5061000e610fe6565b5061000e610f45565b5061000e610e80565b5061000e610ddc565b5061000e610d52565b5061000e610d22565b5061000e610cf1565b5061000e610c38565b5061000e6108f7565b5061000e610814565b5061000e61071f565b5061000e6106ee565b5061000e610615565b5061000e610558565b5061000e6103da565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e576104296004356103fb816103c8565b63ffffffff60e01b1663fa98174d60e01b811490811561042d575b5060405190151581529081906020820190565b0390f35b6357d877d560e01b8114915081156104e1575b811561044e575b5038610416565b632e93c56f60e11b811491508115610468575b5038610447565b63152a902d60e11b811491508115610482575b5038610461565b63073f6c8b60e31b81149150811561049c575b503861047b565b63054fd4d560e41b8114915081156104b6575b5038610495565b6303e8939960e31b8114915081156104d0575b50386104af565b633d96f4ff60e11b149050386104c9565b630a85bd0160e11b81149150610440565b6001600160a01b0381160361000e57565b60043590610510826104f2565b565b60443590610510826104f2565b60c43590610510826104f2565b604435906001600160601b038216820361000e57565b60e435906001600160601b038216820361000e57565b503461000e57604036600319011261000e57600435610576816104f2565b6024356001600160601b038116810361000e5761059a9161059561275a565b615673565b005b600091031261000e57565b918091926000905b8282106105c75750116105c0575050565b6000910152565b915080602091830151818601520182916105af565b906020916105f5815180928185528580860191016105a7565b601f01601f1916010190565b9060206106129281815201906105dc565b90565b503461000e576000806003193601126106eb576040519080609754610639816136d7565b808552916001918083169081156106ca575060011461066f575b6104298561066381870382610b50565b60405191829182610601565b9250609783527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff95b8284106106b257505050810160200161066382610429610653565b80546020858701810191909152909301928101610697565b60ff1916602087015250506040840192506106639150839050610429610653565b80fd5b503461000e57602036600319011261000e57602061070d6004356138ac565b6040516001600160a01b039091168152f35b503461000e57604036600319011261000e5760043561073d816104f2565b602435610749816136b4565b6001600160a01b03808216939181831685146107c55761059a9461077f9261076f6158b8565b1614908115610784575b5061383a565b613ca8565b6107bf91506107916158b8565b6001600160a01b039182166000908152609c6020908152604080832093909416825291909152205460ff1690565b38610779565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b503461000e576000806003193601126106eb5760405180916101f5908154808452602080940190819383527f734ccdfecf0c98f1f610e13e821eeaab95dc92184ba090032ab8cf544a28f16790835b8181106108c05750505084610879910385610b50565b60405193838594850191818652518092526040850193925b8281106108a057505050500390f35b83516001600160a01b031685528695509381019392810192600101610891565b825484529286019260019283019201610863565b606090600319011261000e57600435906024356108f0816104f2565b9060443590565b503461000e57610906366108d4565b9161090f6158b8565b9261091982614112565b93610925818487614219565b15610a96575061095b83610944846000526101f8602052604060002090565b9060018060a01b0316600052602052604060002090565b54818103610a6457506000938461098185610944866000526101f8602052604060002090565b55846109b3836109a48760018060a01b03166000526101f7602052604060002090565b90600052602052604060002090565b556001600160a01b0393841693843b15610a6057604051632142170760e11b81523060048201526001600160a01b0383166024820152604481018490527f4e2e76c4f3eda2c1e7e010b9702b3814359d2c7d1f363c816c2f11051008c14292908781606481838b5af18015610a53575b610a3a575b506040519384521691602090a4604051f35b80610a47610a4d92610adf565b8061059c565b38610a28565b610a5b613380565b610a23565b8580fd5b60405163abeb503f60e01b81526001600160a01b038516600482015260248101929092526044820152606490fd5b0390fd5b60405163218f7b0b60e11b81526001600160a01b03919091166004820152306024820152604481019290925250606490fd5b50634e487b7160e01b600052604160045260246000fd5b6001600160401b038111610af257604052565b610afa610ac8565b604052565b604081019081106001600160401b03821117610af257604052565b602081019081106001600160401b03821117610af257604052565b606081019081106001600160401b03821117610af257604052565b90601f801991011681019081106001600160401b03821117610af257604052565b6040519061051082610aff565b6020906001600160401b038111610b9b575b601f01601f19160190565b610ba3610ac8565b610b90565b81601f8201121561000e57803590610bbf82610b7e565b92610bcd6040519485610b50565b8284526020838301011161000e57816000926020809301838601378301015290565b90608060031983011261000e57600435610c08816104f2565b91602435610c15816104f2565b9160443591606435906001600160401b03821161000e5761061291600401610ba8565b503461000e57610c4736610bef565b50919050306001600160a01b03821603610c9b573360009081526101f6602052604090205415610c8357604051630a85bd0160e11b8152602090f35b604051637e5e9fb560e01b8152336004820152602490fd5b60405163218f7b0b60e11b81526001600160a01b039190911660048201523360248201526044810191909152606490fd5b606090600319011261000e57600435610ce4816104f2565b906024356108f0816104f2565b503461000e5761059a610d0336610ccc565b91610d1d610d1884610d136158b8565b6139ee565b6138ea565b613b1a565b503461000e57602036600319011261000e5760043560005260fb6020526020600160406000200154604051908152f35b503461000e57604036600319011261000e5760ff610d9d602435610d75816104f2565b60043560005261015f60205260406000209060018060a01b0316600052602052604060002090565b546000911615610dd4575060207fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b604051908152f35b602090610dcc565b503461000e57604036600319011261000e57600435600052610192602052604060002060405190610e0c82610aff565b546001600160a01b0380821680845260a09290921c60208401529015610e70575b610e51610e496001600160601b03602085015116602435613efc565b612710900490565b915160408051929091166001600160a01b031682526020820192909252f35b9050610e7a613eb0565b90610e2d565b503461000e5760408060031936011261000e5760043590602435610ea3816104f2565b60009280845260fb602052610ebd60018486200154612dc5565b80845260fb60209081528385206001600160a01b03841660009081529152604090205460ff1615610eed57505051f35b80845260fb60209081528385206001600160a01b0384166000908152915260409020805460ff191660011790556001600160a01b0380610f2b6158b8565b16921690600080516020615911833981519152858551a451f35b503461000e57604036600319011261000e57602435610f63816104f2565b6001600160a01b0380610f746158b8565b1690821603610f895761059a90600435613181565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b503461000e57602036600319011261000e57600435611004816104f2565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116919061103d30841415613217565b61105a600080516020615951833981519152938285541614613278565b6110626128fc565b61106a6132ec565b906110967f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1690565b156110a757505061059a915061343a565b6020600491604094939451928380926352d1902d60e01b825286165afa600091816110fe575b506110eb5760405162461bcd60e51b815280610a92600482016133eb565b61059a936110f9911461338d565b6134ca565b61112091925060203d8111611127575b6111188183610b50565b810190613371565b90386110cd565b503d61110e565b503461000e57602036600319011261000e5761042961114e60043561518a565b6040519182916020835260208301906105dc565b503461000e5761059a61117436610ccc565b9060405192602084018481106001600160401b0382111761119c575b6040526000845261394d565b6111a4610ac8565b611190565b503461000e57602036600319011261000e576004356111cd610d1882610d136158b8565b6111d6816136b4565b6111df82613c52565b6001600160a01b03166000818152609a6020526040812080549193916001811061124f575b6000190190558083526099602052604080842080546001600160a01b0319169055519183907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8285a4f35b611257613abe565b611204565b503461000e57602036600319011261000e57602061070d600435614112565b503461000e57600036600319011261000e5761042960405161129c81610aff565b6005815264191719171b60d91b60208201526040519182916020835260208301906105dc565b90604060031983011261000e576004356112db816104f2565b91602435906001600160401b03821161000e5761061291600401610ba8565b50611304366112c2565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692919061133e30851415613217565b61135b600080516020615951833981519152948286541614613278565b6113636128fc565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561139957505061059a915061343a565b6020600491604094939451928380926352d1902d60e01b825286165afa600091816113f0575b506113dd5760405162461bcd60e51b815280610a92600482016133eb565b61059a936113eb911461338d565b6135e2565b61140991925060203d8111611127576111188183610b50565b90386113bf565b503461000e57600036600319011261000e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316300361146b576040516000805160206159518339815191528152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e57600036600319011261000e576104296040516114f781610aff565b600481526376302e3160e01b60208201526040519182916020835260208301906105dc565b602060031982011261000e57600435906001600160401b03821161000e5761061291600401610ba8565b503461000e576115553661151c565b61155d6129d5565b80516001600160401b03811161162f575b600080516020615931833981519152906115918161158c84546136d7565b6146a7565b602080601f83116001146115cc57508192936000926115c1575b50508160011b916000199060031b1c1916179055005b0151905038806115ab565b90601f198316946115db613711565b926000905b8782106116175750508360019596106115fe575b505050811b019055005b015160001960f88460031b161c191690553880806115f4565b806001859682949686015181550195019301906115e0565b611637610ac8565b61156e565b503461000e57602036600319011261000e57602060ff6116a5600435611661816104f2565b7f7a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb260005260fb845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b503461000e57606036600319011261000e576024356116cf816104f2565b6116d761052c565b906116e061275a565b6116f76127106001600160601b0384161115615614565b6001600160a01b038116156117765761173761059a92611727611718610b71565b6001600160a01b039094168452565b6001600160601b03166020830152565b61174e600435600052610192602052604060002090565b815160209092015160a01b6001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606490fd5b503461000e576117ca366112c2565b906117d3612ad1565b6102279081549160019081840190558260005260209061022882526040600020918551956001600160401b0387116118ef575b61181a8761181486546136d7565b86614824565b81601f88116001146118795750958061185e95949381936104299960009461186e575b50501b916000199060031b1c19161790555b826118586132d9565b91614fd4565b6040519081529081906020820190565b01519250388061183d565b9190601f19881661188f86600052602060002090565b936000905b8282106118d85750509161185e9695949391896104299a94106118bf575b505050811b01905561184f565b015160001960f88460031b161c191690553880806118b2565b808786978294978701518155019601940190611894565b6118f7610ac8565b611806565b503461000e57602036600319011261000e57602061070d6004356136b4565b503461000e57600036600319011261000e5761042960405161114e816119408161377d565b0382610b50565b503461000e57602036600319011261000e57600435611965816104f2565b6001600160a01b0316801561199657600052609a602052610429604060002054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608490fd5b6020906001600160401b038111611a06575b60051b0190565b611a0e610ac8565b6119ff565b81601f8201121561000e57803591611a2a836119ed565b92611a386040519485610b50565b808452602092838086019260051b82010192831161000e578301905b828210611a62575050505090565b8380918335611a70816104f2565b815201910190611a54565b61012060031982011261000e57611a90610503565b916001600160401b0360243581811161000e5783611ab091600401610ba8565b92611ab9610512565b9260643583811161000e5782611ad191600401610ba8565b9260843581811161000e5783611ae991600401610ba8565b9260a43582811161000e5781611b0191600401610ba8565b92611b0a61051f565b92611b13610542565b926101043591821161000e5761061291600401611a13565b503461000e57611b3a36611a7b565b9590949193929796611b5360ff60005460081c16614410565b611b5c88612ea0565b80516001600160401b038111611c9a575b60008051602061597183398151915291611b9082611b8b85546136d7565b614715565b60209081601f8411600114611c17575094611bdf611bf39561059a9d9585611bed96611c069e9d9b96611bf99d9b600092611c0c575b50508160011b916000199060031b1c1916179055613120565b611be88b6157f1565b614577565b87615709565b85615545565b611c01614955565b614b2a565b80614db0565b015190503880611bc6565b9190601f198416611c26613747565b936000905b828210611c825750509561059a9d95600186611c069e9d9b96611bf99d9b96611bdf96611bed9a611bf39d10611c69575b505050811b019055613120565b015160001960f88460031b161c19169055388080611c5c565b80600186978294978701518155019601940190611c2b565b611ca2610ac8565b611b6d565b503461000e57604036600319011261000e576001600160401b0360043560243582811161000e57611cdc903690600401610ba8565b91611ce5612bcd565b611ced6158b8565b611d008184611cfb81614112565b614219565b15610a9657506000918252602090610228825260408320918451918211611ddf575b611d3682611d3085546136d7565b85614824565b80601f8311600114611d725750839482939492611d67575b50508160011b916000199060031b1c1916179055604051f35b015190503880611d4e565b90601f19831695611d8885600052602060002090565b9286905b888210611dc757505083600195969710611dae575b505050811b019055604051f35b015160001960f88460031b161c19169055388080611da1565b80600185968294968601518155019501930190611d8c565b611de7610ac8565b611d22565b503461000e57611dfb366112c2565b90611e04612ad1565b6102279081549160019081840190558260005260209061022882526040600020918551956001600160401b038711611f01575b611e458761181486546136d7565b81601f8811600114611e8a575095808061185e96948896946104299a600094611e7f575b50501b916000199060031b1c1916179055614eb7565b015192503880611e69565b9190601f198816611ea086600052602060002090565b936000905b828210611eea5750509261185e96949289926104299a8a989610611ed1575b505050811b019055614eb7565b015160001960f88460031b161c19169055388080611ec4565b808786978294978701518155019601940190611ea5565b611f09610ac8565b611e37565b503461000e57604036600319011261000e57602060ff6116a5602435611f33816104f2565b60043560005260fb845260406000209060018060a01b0316600052602052604060002090565b503461000e57611f683661151c565b611f70612cc9565b80516001600160401b038111612017575b60008051602061597183398151915290611f9f81611b8b84546136d7565b602080601f8311600114611fce57508192936000926115c15750508160011b916000199060031b1c1916179055005b90601f19831694611fdd613747565b926000905b878210611fff5750508360019596106115fe57505050811b019055005b80600185968294968601518155019501930190611fe2565b61201f610ac8565b611f81565b503461000e576000806003193601126106eb576040519080609854612048816136d7565b808552916001918083169081156106ca5750600114612071576104298561066381870382610b50565b9250609883527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d8145b8284106120b457505050810160200161066382610429610653565b80546020858701810191909152909301928101612099565b503461000e57600036600319011261000e57602060405160008152f35b8015150361000e57565b503461000e57604036600319011261000e57600435612111816104f2565b6024359061211e826120e9565b6121266158b8565b6001600160a01b03828116939116918284146121b6578161219f7f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319361218e6121b19487600052609c60205260406000209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b60405190151581529081906020820190565b0390a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b503461000e57600036600319011261000e57600080516020615951833981519152546040516001600160a01b039091168152602090f35b503461000e5761229261224436611a7b565b966000999899969196959295949394549961227660ff8c60081c1615809c819d612310575b81156122f0575b506143ad565b8a612289600160ff196000541617600055565b6122d757614470565b61229857005b6122a861ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6122eb61010061ff00196000541617600055565b614470565b303b15915081612302575b5038612270565b6001915060ff1614386122fb565b600160ff8216109150612269565b503461000e5761059a61233036610bef565b9291909161394d565b503461000e5760208060031936011261000e57600435600081815260996020526040902054610429929190612378906001600160a01b03161515613668565b6123a061239b604051926123968461238f8161377d565b0385610b50565b61518a565b615303565b81519092909182156123e6578293610663936123c66040519687948680870191016105a7565b82016123da825180938680850191016105a7565b01038084520182610b50565b505050610663565b503461000e576123fd366108d4565b6001600160a01b0382811660008181526101f660205260409020549094939015612426565b1590565b61256e576124326158b8565b9061243c85614112565b9161244b612422828886614219565b61253e576040516331a9108f60e11b815260048101869052906020826024818b5afa918215612531575b600092612501575b5061248e6124228583898688614257565b6124d05750847f6c062bd0d2c75cb8047b8bbb9fb7dfdfc4102b14c87dc24a782f74b8aa01747a949392876124c29361545d565b6040519384521691602090a4005b60405163218f7b0b60e11b81526001600160a01b039182166004820152921660248301525060448101849052606490fd5b61252391925060203d811161252a575b61251b8183610b50565b8101906140fd565b903861247d565b503d612511565b612539613380565b612475565b60405163218f7b0b60e11b81526001600160a01b0391909116600482015230602482015260448101869052606490fd5b604051637e5e9fb560e01b81526001600160a01b03919091166004820152602490fd5b503461000e57604036600319011261000e5761059a6024356004356125b5826104f2565b8060005260fb6020526125cf600160406000200154612dc5565b613181565b503461000e57604036600319011261000e576004356125f2816104f2565b60018060a01b03166000526101f760205260406000206024356000526020526020604060002054604051908152f35b503461000e576000806003193601126106eb57604051908060008051602061597183398151915290815490612655826136d7565b808652926001928084169081156126d9575060011461267f575b6104298661066381880382610b50565b815292507feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c6975b8284106126c1575050508101602001610663826104293861266f565b805460208587018101919091529093019281016126a5565b60ff191660208801525050604085019350610663925084915061042990503861266f565b503461000e57604036600319011261000e57602060ff6116a5600435612722816104f2565b6024359061272f826104f2565b60018060a01b0316600052609c845260406000209060018060a01b0316600052602052604060002090565b6127626158b8565b6001600160a01b03811660009081527fef93721591a8283ebcbc635d4596270f18296615bf2ad2acc05699794bf1433160205260409020547feb54e1feee3ae17add098cbf58a47457bf5f7c3a89ceab263cbdb01b3da6d98e919060ff16156127c9575050565b6127db906001600160a01b0316614010565b906127e4613306565b9060306127f083613f72565b5360786127fc83613f88565b5360415b600181116128ad57610a926037612895866128878761281f8815613fc5565b6128816040519586947f416363657373436f6e74726f6c3a206163636f756e74200000000000000000006020870152612861815180926020858a0191016105a7565b8501017001034b99036b4b9b9b4b733903937b6329607d1b815260110190565b90612e89565b03601f198101835282610b50565b60405162461bcd60e51b815291829160048301610601565b9080600f6128ea921660108110156128ef575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a6128e08486613f99565b5360041c91613fb8565b612800565b6128f7613f5b565b6128c0565b6129046158b8565b6001600160a01b03811660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604090205460ff16156129475750565b612959906001600160a01b0316614010565b6000612963613306565b90603061296f83613f72565b53607861297b83613f88565b5360415b6001811161299e57610a926037612895866128878761281f8815613fc5565b9080600f6129d0921660108110156128ef576f181899199a1a9b1b9c1cb0b131b232b360811b901a6128e08486613f99565b61297f565b6129dd6158b8565b6001600160a01b03811660009081527f248dd836b57784724b19977de4d97082a3dc8c769beb80c8f7fb5af2bb22b29a60205260409020547ff372640890c51dda497431936a65d3bb1ddf67b1c27cd6cdf578ce883c4f5c36919060ff1615612a44575050565b612a56906001600160a01b0316614010565b90612a5f613306565b906030612a6b83613f72565b536078612a7783613f88565b5360415b60018111612a9a57610a926037612895866128878761281f8815613fc5565b9080600f612acc921660108110156128ef576f181899199a1a9b1b9c1cb0b131b232b360811b901a6128e08486613f99565b612a7b565b612ad96158b8565b6001600160a01b03811660009081527f72f2994cda805697ff5940dc92bd4118d9d7058b657a897ee8a2023e4f67343460205260409020547f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6919060ff1615612b40575050565b612b52906001600160a01b0316614010565b90612b5b613306565b906030612b6783613f72565b536078612b7383613f88565b5360415b60018111612b9657610a926037612895866128878761281f8815613fc5565b9080600f612bc8921660108110156128ef576f181899199a1a9b1b9c1cb0b131b232b360811b901a6128e08486613f99565b612b77565b612bd56158b8565b6001600160a01b03811660009081527ff6b3b573835566942f1e744a5cfac64038b4dbd5b3e9f0797d1b7269bba4970160205260409020547fd81e3d287dc343b6afbd738eeed3ca0a2b77921a595a475a4e43ed25b38ceb2f919060ff1615612c3c575050565b612c4e906001600160a01b0316614010565b90612c57613306565b906030612c6383613f72565b536078612c6f83613f88565b5360415b60018111612c9257610a926037612895866128878761281f8815613fc5565b9080600f612cc4921660108110156128ef576f181899199a1a9b1b9c1cb0b131b232b360811b901a6128e08486613f99565b612c73565b612cd16158b8565b6001600160a01b03811660009081527fd79c98b0e2162ca3184e1e6688bf8c1c5461f86efaaae3675641a8fbeb30644560205260409020547f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c15919060ff1615612d38575050565b612d4a906001600160a01b0316614010565b90612d53613306565b906030612d5f83613f72565b536078612d6b83613f88565b5360415b60018111612d8e57610a926037612895866128878761281f8815613fc5565b9080600f612dc0921660108110156128ef576f181899199a1a9b1b9c1cb0b131b232b360811b901a6128e08486613f99565b612d6f565b612dcd6158b8565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff1615612dfc575050565b612e0e906001600160a01b0316614010565b90612e17613306565b906030612e2383613f72565b536078612e2f83613f88565b5360415b60018111612e5257610a926037612895866128878761281f8815613fc5565b9080600f612e84921660108110156128ef576f181899199a1a9b1b9c1cb0b131b232b360811b901a6128e08486613f99565b612e33565b90612e9c602092828151948592016105a7565b0190565b6001600160a01b03811660009081527fd79c98b0e2162ca3184e1e6688bf8c1c5461f86efaaae3675641a8fbeb306445602052604090207f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c159060ff905b541615612f08575050565b600081815260fb602090815260408083206001600160a01b03861684529091529020805460ff191660011790556001600160a01b0380612f466158b8565b169216906000805160206159118339815191526000604051a4565b6001600160a01b03811660009081527f72f2994cda805697ff5940dc92bd4118d9d7058b657a897ee8a2023e4f673434602052604090207f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a69060ff90612efd565b6001600160a01b03811660009081527ff6b3b573835566942f1e744a5cfac64038b4dbd5b3e9f0797d1b7269bba49701602052604090207fd81e3d287dc343b6afbd738eeed3ca0a2b77921a595a475a4e43ed25b38ceb2f9060ff90612efd565b6001600160a01b03811660009081527f248dd836b57784724b19977de4d97082a3dc8c769beb80c8f7fb5af2bb22b29a602052604090207ff372640890c51dda497431936a65d3bb1ddf67b1c27cd6cdf578ce883c4f5c369060ff90612efd565b6001600160a01b03811660009081527fc88390e7e62175be0932452175b6a7222b6b094ab0ef984a5153c620345d8975602052604081205460ff16156130c8575050565b80805260fb602090815260408083206001600160a01b038516600090815292529020805460ff191660011790556001600160a01b03806131066158b8565b1692169060008051602061591183398151915281604051a4565b6001600160a01b03811660009081527f452ae8ad28077a8dde36d329380df9bfd96077640c4bb696c45031c2933e8ad8602052604090207f7a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb29060ff90612efd565b600081815260fb602090815260408083206001600160a01b038616845290915290205460ff166131af575050565b600081815260fb602090815260408083206001600160a01b03861684529091529020805460ff191690556001600160a01b03806131ea6158b8565b169216907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b6000604051a4565b1561321e57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561327f57565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b604051906132e682610b1a565b60008252565b604051906132f982610b1a565b6000808352366020840137565b60405190608082018281106001600160401b03821117613332575b604052604282526060366020840137565b61333a610ac8565b613321565b9061334982610b7e565b6133566040519182610b50565b8281528092613367601f1991610b7e565b0190602036910137565b9081602091031261000e575190565b506040513d6000823e3d90fd5b1561339457565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b60809060208152602e60208201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960408201526d6f6e206973206e6f74205555505360901b60608201520190565b803b1561346f5760008051602061595183398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b6134d38161343a565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a28251158015906135da575b61351957505050565b813b1561358957506000828192602061358695519201905af461353a613638565b6040519161354783610b35565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b6040840152613f1b565b50565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b506000613510565b6135eb8161343a565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a28251158015906136305761351957505050565b506001613510565b3d15613663573d9061364982610b7e565b916136576040519384610b50565b82523d6000602084013e565b606090565b1561366f57565b60405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606490fd5b6000908152609960205260409020546001600160a01b0316610612811515613668565b90600182811c92168015613707575b60208310146136f157565b634e487b7160e01b600052602260045260246000fd5b91607f16916136e6565b6000805160206159318339815191526000527f19bfbe9c1d469104dfe3a613f5f31e0356b89c1b110180555c05774e09befab490565b6000805160206159718339815191526000527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c69790565b9060009160008051602061593183398151915290815461379c816136d7565b8083529260019180831690811561381b57506001146137bc575b50505050565b90929394506000527f19bfbe9c1d469104dfe3a613f5f31e0356b89c1b110180555c05774e09befab4916000925b84841061380357505060209250010190388080806137b6565b805460208585018101919091529093019281016137ea565b60ff1916602085015250506040909101935038915081905080806137b6565b1561384157565b60405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608490fd5b6000818152609960205260409020546138cf906001600160a01b03161515613668565b6000908152609b60205260409020546001600160a01b031690565b156138f157565b60405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b6064820152608490fd5b91610510939161397693613966610d1884610d136158b8565b613971838383613b1a565b613e6b565b6139ce565b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b156139d557565b60405162461bcd60e51b815280610a926004820161397b565b6001600160a01b0380613a00846136b4565b169281831692848414948515613a36575b50508315613a20575b50505090565b613a2c919293506138ac565b1614388080613a1a565b6000908152609c602090815260408083206001600160a01b03949094168352929052205460ff1693503880613a11565b15613a6d57565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b60018110613ae5575b6000190190565b613aed613abe565b613ade565b6001906001198111613b02570190565b612e9c613abe565b6002906002198111613b02570190565b90613b24836136b4565b6001600160a01b038381169290918216839003613bff57613b73613bd692821694613b50861515613a66565b613b5987613c52565b6001600160a01b03166000908152609a6020526040902090565b613b7d8154613ad5565b90556001600160a01b0381166000908152609a60205260409020613ba18154613af2565b9055613bb7856000526099602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608490fd5b6000818152609b6020526040812080546001600160a01b03191690556001600160a01b03613c7f836136b4565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b6000828152609b6020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b0380613ce1846136b4565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b600090815260996020526040902054610510906001600160a01b03161515613668565b9081602091031261000e5751610612816103c8565b610612939260809260018060a01b0316825260006020830152604082015281606082015201906105dc565b6001600160a01b039182168152911660208201526040810191909152608060608201819052610612929101906105dc565b909190803b15613e6357613ddc91602091613dbb6158b8565b946000604051809681958294630a85bd0160e11b9a8b855260048501613d46565b03926001600160a01b03165af160009181613e33575b50613e2557613dff613638565b80519081613e205760405162461bcd60e51b815280610a926004820161397b565b602001fd5b6001600160e01b0319161490565b613e5591925060203d8111613e5c575b613e4d8183610b50565b810190613d31565b9038613df2565b503d613e43565b505050600190565b92909190823b15613ea757613ddc926020926000613e876158b8565b9660405196879586948593630a85bd0160e11b9b8c865260048601613d71565b50505050600190565b60405190613ebd82610aff565b610191546001600160a01b038116835260a01c6020830152565b6001600160fe1b038111600116613eef575b60021b90565b613ef7613abe565b613ee9565b8060001904821181151516613f0f570290565b613f17613abe565b0290565b90919015613f27575090565b815115613f375750805190602001fd5b60405162461bcd60e51b815260206004820152908190610a929060248301906105dc565b50634e487b7160e01b600052603260045260246000fd5b602090805115613f80570190565b612e9c613f5b565b602190805160011015613f80570190565b906020918051821015613fab57010190565b613fb3613f5b565b010190565b8015613ae5576000190190565b15613fcc57565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b6040519061401d82610b35565b602a82526040366020840137603061403483613f72565b53607861404083613f88565b536029905b6001821161405857610612915015613fc5565b80600f614089921660108110156128ef576f181899199a1a9b1b9c1cb0b131b232b360811b901a6128e08486613f99565b90614045565b604051906101f582815491828252602092838301916000527f734ccdfecf0c98f1f610e13e821eeaab95dc92184ba090032ab8cf544a28f167936000905b8282106140e35750505061051092500383610b50565b8554845260019586019588955093810193909101906140cd565b9081602091031261000e5751610612816104f2565b9061411c826136b4565b9130925b614129816153de565b15614214576040805163de02a59360e01b81526001600160a01b03958616600480830191909152602482019490945260209591936141a092879291908516908383604481855afa928315614207575b6000936141e8575b508296518095819482936331a9108f60e11b845283019190602083019252565b03915afa9485156141db575b6000956141bc575b505092614120565b6141d3929550803d1061252a5761251b8183610b50565b9238806141b4565b6141e3613380565b6141ac565b614200919350843d8611611127576111188183610b50565b9138614180565b61420f613380565b614178565b925050565b6001600160a01b03908116838216818114949093918515613a365750508315613a205750505090565b9081602091031261000e5751610612816120e9565b6001600160a01b0382811685821681811497949691959294939092908815614285575b505050505050505090565b60405163e985e9c560e01b81526001600160a01b039889166004820152929097166024830152909650939492939192909160209185168288604481845afa9788156143a0575b600098614371575b508715614301575b50505050836142f5575b505050388080808080808061427a565b161490503880806142e5565b60405163020604bf60e21b8152600481019290925293965091928492908290829060249082905afa918215614364575b600092614347575b5050161492388080806142db565b61435d9250803d1061252a5761251b8183610b50565b3880614339565b61436c613380565b614331565b614392919850833d8511614399575b61438a8183610b50565b810190614242565b96386142d3565b503d614380565b6143a8613380565b6142cb565b156143b457565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b1561441757565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b96949897959392919061448288612ea0565b80516001600160401b03811161456a575b600080516020615971833981519152916144b182611b8b85546136d7565b60209081601f8411600114614500575094611bdf611bf3956105109d9e9585611bed96611c069e9d9b96611bf99d9b600092611c0c5750508160011b916000199060031b1c1916179055613120565b9190601f19841661450f613747565b936000905b828210614552575050956105109d9e95600186611c069e9d9b96611bf99d9b96611bdf96611bed9a611bf39d10611c6957505050811b019055613120565b80600186978294978701518155019601940190614514565b614572610ac8565b614493565b9061458960ff60005460081c16614410565b81516001600160401b038111614683575b6145ae816145a96097546136d7565b614778565b602080601f83116001146145f057508190610510946000926145e5575b50508160011b916000199060031b1c19161760975561485e565b0151905038806145cb565b919293601f19841661462460976000527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff990565b936000905b82821061466b57505091600193918561051097969410614652575b505050811b0160975561485e565b015160001960f88460031b161c19169055388080614644565b80600186978294978701518155019601940190614629565b61468b610ac8565b61459a565b81811061469b575050565b60008155600101614690565b90601f82116146b4575050565b610510916000805160206159318339815191526000527f19bfbe9c1d469104dfe3a613f5f31e0356b89c1b110180555c05774e09befab4906020601f840160051c8301931061470b575b601f0160051c0190614690565b90915081906146fe565b90601f8211614722575050565b610510916000805160206159718339815191526000527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c697906020601f840160051c8301931061470b57601f0160051c0190614690565b90601f8211614785575050565b6105109160976000527f354a83ed9988f79f6038d4c7a7dadbad8af32f4ad6df893e0e5807a1b1944ff9906020601f840160051c8301931061470b57601f0160051c0190614690565b90601f82116147db575050565b6105109160986000527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d814906020601f840160051c8301931061470b57601f0160051c0190614690565b9190601f811161483357505050565b610510926000526020600020906020601f840160051c8301931061470b57601f0160051c0190614690565b9081516001600160401b038111614948575b6148848161487f6098546136d7565b6147ce565b602080601f83116001146148c057508192936000926148b5575b50508160011b916000199060031b1c191617609855565b01519050388061489e565b90601f198316946148f360986000527f2237a976fa961f5921fd19f2b03c925c725d77b20ce8f790c19709c03de4d81490565b926000905b878210614930575050836001959610614917575b505050811b01609855565b015160001960f88460031b161c1916905538808061490c565b806001859682949686015181550195019301906148f8565b614950610ac8565b614870565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b6149735750565b803b1561000e5760405163a41e7d5160e01b808252306004830152632e93c56f60e11b6024830152600091828160448183885af18015614aeb575b614ad8575b50823b15614a94576040519081523060048201526380ac58cd60e01b6024820152818160448183875af18015614acb575b614ab8575b50813b156106eb576040516329965a1d60e01b80825230600483018190526001635d278adf60e01b036024840152604483015290828160648183885af18015614aab575b614a98575b50823b15614a9457604051908152306004820181905260016340562c6760e11b0360248301526044820152918290818381606481015b03925af18015614a87575b614a7a5750565b80610a4761051092610adf565b614a8f613380565b614a73565b5080fd5b80610a47614aa592610adf565b38614a32565b614ab3613380565b614a2d565b80610a47614ac592610adf565b386149e9565b614ad3613380565b6149e4565b80610a47614ae592610adf565b386149b3565b614af3613380565b6149ae565b6001906000198114613b02570190565b6020918151811015614b1d575b60051b010190565b614b25613f5b565b614b15565b90731820a4b7618bde71dce8cdc73aab6c95905fad24803b614b8a575b5060005b8251811015614b855780614b7a614b75614b68614b809487614b08565b516001600160a01b031690565b614d0c565b50614af8565b614b4b565b509050565b803b1561000e5760405163a41e7d5160e01b808252306004830152630a85bd0160e11b6024830152600091828160448183885af18015614cff575b614cec575b50823b15614a94576040519081523060048201526357d877d560e01b6024820152818160448183875af18015614cdf575b614ccc575b50813b156106eb576040516329965a1d60e01b8082523060048301819052600163150b7a0360e01b036024840152604483015290828160648183885af18015614cbf575b614cac575b50823b15614a945760405190815230600482018190526001632bec3beb60e11b0360248301526044820152918290606490829084905af18015614c9f575b15614b475780610a47614c9992610adf565b38614b47565b614ca7613380565b614c87565b80610a47614cb992610adf565b38614c49565b614cc7613380565b614c44565b80610a47614cd992610adf565b38614c00565b614ce7613380565b614bfb565b80610a47614cf992610adf565b38614bca565b614d07613380565b614bc5565b610612906001600160a01b0316806000526101f68060205260406000205415600014614da9576101f582815468010000000000000000811015614d9c575b60018101808455811015614d8f575b7f734ccdfecf0c98f1f610e13e821eeaab95dc92184ba090032ab8cf544a28f16701555491600052602052604060002055600190565b614d97613f5b565b614d59565b614da4610ac8565b614d4a565b5050600090565b90614dbd614dc292612f61565b612fc2565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b614dee575b5061051061022760018154019055565b803b1561000e5760405163a41e7d5160e01b815230600482015263db76844d60e01b6024820152600090818160448183875af18015614eaa575b614e97575b50813b156106eb576040516329965a1d60e01b815230600482018190526001636dbb422760e11b0360248301526044820152918290606490829084905af18015614e8a575b15614dde5780610a47614e8492610adf565b38614dde565b614e92613380565b614e72565b80610a47614ea492610adf565b38614e2d565b614eb2613380565b614e28565b6001600160a01b038116908115614f90576000838152609960205260409020546001600160a01b0316614f4b576001600160a01b0381166000908152609a60205260409020614f219190614f0b8154613af2565b9055613bb7846000526099602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b916139769161051093614fe78282614eb7565b613da2565b90614ff6826119ed565b6150036040519182610b50565b8281528092615014601f19916119ed565b019060005b82811061502557505050565b806060602080938501015201615019565b60208183031261000e578051906001600160401b03821161000e570181601f8201121561000e57805161506881610b7e565b926150766040519485610b50565b8184526020828401011161000e5761061291602080850191016105a7565b604081526000908254926150a7846136d7565b908160408401526001948581169081600014615170575060011461512e575b5050602092919290818185039101528351908184528084019381808460051b8301019601946000915b848310615100575050505050505090565b9091929394848061511d83999a601f198682030187528b516105dc565b9901930193019195949392906150ef565b90919250600052602080600020916000915b8582841061515a57505050606091508201019038806150c6565b8454868501606001529093019291820191615140565b60ff191660608501525050608082019250389050806150c6565b61519381613d0e565b61519b61408f565b906151a68251614fec565b9160005b815181101561527857806151c4614b686152369385614b08565b6151dd81610944876000526101f8602052604060002090565b549081156152695760405163422627c360e01b81526004810192909252600090829060249082906001600160a01b03165afa90811561525c575b60009161523b575b505b61522b8287614b08565b52614b7a8186614b08565b6151aa565b615256913d8091833e61524e8183610b50565b810190615036565b3861521f565b615264613380565b615217565b50506152736132ec565b615221565b505061529261061291600052610228602052604060002090565b61288760405193849260208401615094565b604051906152b182610b35565b604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b8051156153d5576153126152a4565b61533661533161532c6153258551613b0a565b6003900490565b613ed7565b61333f565b9160208301918182518301915b8282106153835750505060039051068060011461537057600214615365575090565b603d90600019015390565b50603d9081600019820153600119015390565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c1688010151600286015316850101519082015301939190615343565b506106126132d9565b803b15615457576040516301ffc9a760e01b81526357d877d560e01b600482015290602090829060249082906001600160a01b03165afa60009181615437575b506154295750600090565b61543257600090565b600190565b61545091925060203d81116143995761438a8183610b50565b903861541e565b50600090565b919061547882610944836000526101f8602052604060002090565b548061551557508361549983610944846000526101f8602052604060002090565b556001600160a01b03821660009081526101f7602052604090206154be9085906109a4565b556001600160a01b031691823b1561000e57604051632142170760e11b81526001600160a01b039290921660048301523060248301526044820152906000908290606490829084905af18015614a8757614a7a5750565b60405163abeb503f60e01b81526001600160a01b0384166004820152602481018690526044810191909152606490fd5b6001600160a01b03811660009081527fef93721591a8283ebcbc635d4596270f18296615bf2ad2acc05699794bf143316020526040902054610510939291907feb54e1feee3ae17add098cbf58a47457bf5f7c3a89ceab263cbdb01b3da6d98e9060ff16156155b6575b5050615673565b600081815260fb602090815260408083206001600160a01b03861684529091529020805460ff191660011790556001600160a01b03806155f46158b8565b169216906000805160206159118339815191526000604051a438806155af565b1561561b57565b60405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608490fd5b906001600160601b0381169161568d612710841115615614565b6001600160a01b03169182156156c45760206040516156ab81610aff565b848152015260a01b6001600160a01b0319161761019155565b60405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606490fd5b61571590929192613023565b81516001600160401b0381116157e4575b600080516020615931833981519152906157448161158c84546136d7565b602080601f8311600114615780575081929394600092615775575b50508160011b916000199060031b1c1916179055565b01519050388061575f565b90601f1983169561578f613711565b926000905b8882106157cc575050836001959697106157b3575b505050811b019055565b015160001960f88460031b161c191690553880806157a9565b80600185968294968601518155019501930190615794565b6157ec610ac8565b615726565b6157fa90613084565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b6158185750565b803b1561000e5760405163a41e7d5160e01b815230600482015263054fd4d560e41b6024820152600090818160448183875af180156158ab575b615898575b50813b156106eb576040516329965a1d60e01b8152306004820181905260016354fd4d5160e01b036024830152604482015291829081838160648101614a68565b80610a476158a592610adf565b38615857565b6158b3613380565b615852565b6014361015806158d8575b156158d45736601319013560601c90565b3390565b503360009081527f452ae8ad28077a8dde36d329380df9bfd96077640c4bb696c45031c2933e8ad8602052604090205460ff166158c356fe2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0da9f9158fe70cb34800ad178a5ece6c5a90de2e6ce3d18ac99a750313884ef86f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc59c86eba0f8c3c9659b86fb2776edca2ff990d1509243e9705ae43a6831558c6a2646970667358221220ec79f259eefedec820a9c071e42fcd79f967341b1cffec40e8ceff2067c1625464736f6c634300080e0033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "ERC721TopDownDNA",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "attachChild(uint256,address,uint256)": {
        "details": "Attach a child NFT, external function. Implements security checks.      In addition, address(this) must be approved to transfer childTokenId (operator or specific tokenId).",
        "params": {
          "childContract": "to attach",
          "childTokenId": "to attach",
          "tokenId": "stored in this contract"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baseURI()": {
        "details": "Returns collection-wide URI-accessible metadata"
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "canImplementInterfaceForAddress(bytes32,address)": {
        "details": "See {IERC1820Implementer-canImplementInterfaceForAddress}."
      },
      "contractURI()": {
        "details": "Returns collection-wide URI-accessible metadata"
      },
      "detachChild(uint256,address,uint256)": {
        "details": "Detach a child NFT, external function. Implements security checks.",
        "params": {
          "childContract": "to detach",
          "childTokenId": "to detach",
          "tokenId": "stored in this contract"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getChildContracts()": {
        "details": "Get child contracts that define attachment attributes"
      },
      "getDna(uint256)": {
        "details": "Getter for dna of tokenId",
        "params": {
          "tokenId": "to get"
        },
        "returns": {
          "_0": "dna of tokenId"
        }
      },
      "getImplementation()": {
        "details": "Returns the implementation address."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,string,address,string,string,string,address,uint96,address[])": {
        "details": "Initializes an ERC721MintableAutoId contract.      Protected with `initializer` modifier.",
        "params": {
          "_admin": "admin for contract",
          "_childContracts": "child ERC721TopDownDNA contracts",
          "_feeNumerator": "numerator of royalty fee percentage (numerator / 10000)",
          "_feeReceiver": "address of receiver of royalty fees",
          "_gsnForwarder": "GSN Trusted forwarder",
          "_initBaseURI": "base URI for contract",
          "_initContractURI": "uri for contract metadata description",
          "_name": "name for contract",
          "_symbol": "symbol for contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isTrustedForwarder(address)": {
        "details": "Determine is an address a GSN trusted forwarder.",
        "params": {
          "forwarder": "address to query"
        },
        "returns": {
          "_0": "OpenGSN trusted forwarder status"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Safety check, only accept child contracts & operator == address(this)"
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "proxyInitialize(address,string,address,string,string,string,address,uint96,address[])": {
        "details": "Same as initialize but designed for usage with proxies.      Protected with `onlyInitializing` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "rootOwnerOf(uint256)": {
        "details": "Get the root owner of the parent token by recursing up the ownership tree until we react a non-ERC721TopDown address (EOA or contract).",
        "params": {
          "tokenId": "tokenId"
        },
        "returns": {
          "_0": "ownerOfAddress EOA or non-ERC721TopDown contract"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "Set contract uri"
      },
      "setContractURI(string)": {
        "details": "Set contract uri"
      },
      "setDefaultRoyalty(address,uint96)": {
        "details": "Exposing `_setDefaultRoyalty`"
      },
      "setTokenRoyalty(uint256,address,uint96)": {
        "details": "exposing `_setTokenRoyalty`"
      },
      "supportsInterface(bytes4)": {
        "details": "ERC165 Support",
        "params": {
          "interfaceId": "XOR of the external functions of the interface"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "returns uri for token metadata. If no baseURI, returns Dna as string",
        "params": {
          "tokenId": "tokenId metadata to fetch"
        },
        "returns": {
          "_0": "uri at which metadata is housed"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "updateDna(uint256,bytes)": {
        "details": "Change dna of a tokenId",
        "params": {
          "dna": "for the provided tokenId",
          "tokenId": "to change"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "version()": {
        "details": "OwlProtocol contract version. Used to determine compatibility interoperable with other Owl contracts."
      },
      "versionRecipient()": {
        "details": "Returns OpenGSN contract version (used for compatibility checks)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1451,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1454,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1433,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7523,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8038,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5166,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "_name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 5168,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "_symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 5172,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "_owners",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5176,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "_balances",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5180,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5186,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6028,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 6212,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 426,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "_roles",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)421_storage)"
      },
      {
        "astId": 725,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1730,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8071,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "351",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8117,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7006,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "401",
        "type": "t_struct(RoyaltyInfo)7003_storage"
      },
      {
        "astId": 7011,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "402",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)7003_storage)"
      },
      {
        "astId": 7191,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "__gap",
        "offset": 0,
        "slot": "403",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 9976,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "__gap",
        "offset": 0,
        "slot": "451",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10754,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "childContracts",
        "offset": 0,
        "slot": "501",
        "type": "t_struct(AddressSet)8546_storage"
      },
      {
        "astId": 10760,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "parentTokenIdOf",
        "offset": 0,
        "slot": "503",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 10766,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "childTokenIdOf",
        "offset": 0,
        "slot": "504",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10770,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "__gap",
        "offset": 0,
        "slot": "505",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 11299,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "nextId",
        "offset": 0,
        "slot": "551",
        "type": "t_struct(Counter)7530_storage"
      },
      {
        "astId": 11303,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "inherentDna",
        "offset": 0,
        "slot": "552",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 11307,
        "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
        "label": "__gap",
        "offset": 0,
        "slot": "553",
        "type": "t_array(t_uint256)48_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)421_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)421_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)7003_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981Upgradeable.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)7003_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)8546_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 8545,
            "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8245_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)7530_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 7529,
            "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)421_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 418,
            "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 420,
            "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoyaltyInfo)7003_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981Upgradeable.RoyaltyInfo",
        "members": [
          {
            "astId": 7000,
            "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7002,
            "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)8245_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 8240,
            "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8244,
            "contract": "contracts/assets/ERC721/ERC721TopDownDna.sol:ERC721TopDownDna",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}