{
  "address": "0x574bdcE840FF22b5C055C34C5907251C8E694D4a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct AssetERC1155",
          "name": "asset",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredBalance",
          "type": "uint256"
        }
      ],
      "name": "InvalidERC1155BalanceOfBatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct AssetERC20",
          "name": "asset",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "currBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredBalance",
          "type": "uint256"
        }
      ],
      "name": "InvalidERC20BalanceOf",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct AssetERC721",
          "name": "asset",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "currNTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxNTime",
          "type": "uint256"
        }
      ],
      "name": "InvalidERC721NTime",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct AssetERC721",
          "name": "asset",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "currOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requiredOwner",
          "type": "address"
        }
      ],
      "name": "InvalidERC721OwnerOf",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddr",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct AssetERC721",
          "name": "asset",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "currTokenIdsLen",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredTokenIdsLen",
          "type": "uint256"
        }
      ],
      "name": "InvalidERC721TokenIds",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interfaceHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canImplementInterfaceForAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "basketIdx",
          "type": "uint256"
        }
      ],
      "name": "getBasket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "burnAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetERC20[]",
              "name": "erc20Unaffected",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetERC20[]",
              "name": "erc20Burned",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721Unaffected",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721Burned",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721NTime",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc721NTimeMax",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC1155[]",
              "name": "erc1155Unaffected",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC1155[]",
              "name": "erc1155Burned",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct AssetBasketInput",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_initContractURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_gsnForwarder",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "burnAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetERC20[]",
              "name": "erc20Unaffected",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetERC20[]",
              "name": "erc20Burned",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721Unaffected",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721Burned",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721NTime",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc721NTimeMax",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC1155[]",
              "name": "erc1155Unaffected",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC1155[]",
              "name": "erc1155Burned",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct AssetBasketInput[]",
          "name": "_inputBaskets",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "basketIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256[][]",
          "name": "erc721TokenIdsUnaffected",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "erc721TokenIdsNTime",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "erc721TokenIdsBurned",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256",
          "name": "outBasketIdx",
          "type": "uint256"
        }
      ],
      "name": "input",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_initContractURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_gsnForwarder",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "burnAddress",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetERC20[]",
              "name": "erc20Unaffected",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AssetERC20[]",
              "name": "erc20Burned",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721Unaffected",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721Burned",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC721[]",
              "name": "erc721NTime",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256[]",
              "name": "erc721NTimeMax",
              "type": "uint256[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC1155[]",
              "name": "erc1155Unaffected",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "contractAddr",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "tokenIds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct AssetERC1155[]",
              "name": "erc1155Burned",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct AssetBasketInput[]",
          "name": "_inputBaskets",
          "type": "tuple[]"
        }
      ],
      "name": "proxyInitialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "2fe98e12c0031ec2a7dec3df9237bffc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC1155\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredBalance\",\"type\":\"uint256\"}],\"name\":\"InvalidERC1155BalanceOfBatch\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetERC20\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredBalance\",\"type\":\"uint256\"}],\"name\":\"InvalidERC20BalanceOf\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currNTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxNTime\",\"type\":\"uint256\"}],\"name\":\"InvalidERC721NTime\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"currOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requiredOwner\",\"type\":\"address\"}],\"name\":\"InvalidERC721OwnerOf\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currTokenIdsLen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredTokenIdsLen\",\"type\":\"uint256\"}],\"name\":\"InvalidERC721TokenIds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canImplementInterfaceForAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"basketIdx\",\"type\":\"uint256\"}],\"name\":\"getBasket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetERC20[]\",\"name\":\"erc20Unaffected\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetERC20[]\",\"name\":\"erc20Burned\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721Unaffected\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721Burned\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721NTime\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721NTimeMax\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC1155[]\",\"name\":\"erc1155Unaffected\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC1155[]\",\"name\":\"erc1155Burned\",\"type\":\"tuple[]\"}],\"internalType\":\"struct AssetBasketInput\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_initContractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_gsnForwarder\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetERC20[]\",\"name\":\"erc20Unaffected\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetERC20[]\",\"name\":\"erc20Burned\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721Unaffected\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721Burned\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721NTime\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721NTimeMax\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC1155[]\",\"name\":\"erc1155Unaffected\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC1155[]\",\"name\":\"erc1155Burned\",\"type\":\"tuple[]\"}],\"internalType\":\"struct AssetBasketInput[]\",\"name\":\"_inputBaskets\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basketIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256[][]\",\"name\":\"erc721TokenIdsUnaffected\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"erc721TokenIdsNTime\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"erc721TokenIdsBurned\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256\",\"name\":\"outBasketIdx\",\"type\":\"uint256\"}],\"name\":\"input\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_initContractURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_gsnForwarder\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetERC20[]\",\"name\":\"erc20Unaffected\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct AssetERC20[]\",\"name\":\"erc20Burned\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721Unaffected\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721Burned\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC721[]\",\"name\":\"erc721NTime\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"erc721NTimeMax\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC1155[]\",\"name\":\"erc1155Unaffected\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AssetERC1155[]\",\"name\":\"erc1155Burned\",\"type\":\"tuple[]\"}],\"internalType\":\"struct AssetBasketInput[]\",\"name\":\"_inputBaskets\",\"type\":\"tuple[]\"}],\"name\":\"proxyInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Abstract contract with types and utilities that will be used by many (if not all) Plugins contracts\",\"kind\":\"dev\",\"methods\":{\"canImplementInterfaceForAddress(bytes32,address)\":{\"details\":\"See {IERC1820Implementer-canImplementInterfaceForAddress}.\"},\"contractURI()\":{\"details\":\"Returns collection-wide URI-accessible metadata\"},\"getBasket(uint256)\":{\"details\":\"Returns all inputs\",\"params\":{\"basketIdx\":\"Index of selected input basket\"}},\"getImplementation()\":{\"details\":\"Returns the implementation address.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,string,address,(address,(address,uint256)[],(address,uint256)[],(address,uint256[])[],(address,uint256[])[],(address,uint256[])[],uint256[],(address,uint256[],uint256[])[],(address,uint256[],uint256[])[])[])\":{\"details\":\"Initializes contract (replaces constructor in proxy pattern)\",\"params\":{\"_admin\":\"owner, can control outputs on contract\",\"_gsnForwarder\":\"trusted forwarder address for openGSN\",\"_initContractURI\":\"contract uri\",\"_inputBaskets\":\"input baskets\"}},\"input(address,uint256,uint256,uint256[][],uint256[][],uint256[][],uint256)\":{\"details\":\"Used to trigger a routed call. Amount parameter enables down-level iteration that consumes N inputs.\",\"params\":{\"amount\":\"Down-level iteration parameter\",\"basketIdx\":\"Index of selected input basket\",\"erc721TokenIdsBurned\":\"2D-Array of tokenIds to burn\",\"erc721TokenIdsNTime\":\"2D-Array of tokenIds to use\",\"erc721TokenIdsUnaffected\":\"2D-Array of tokenIds that serve as unlimited token-gating\",\"outBasketIdx\":\"Index of selected output basket ```\",\"target\":\"Target Address\"}},\"isTrustedForwarder(address)\":{\"details\":\"Determine is an address a GSN trusted forwarder.\",\"params\":{\"forwarder\":\"address to query\"},\"returns\":{\"_0\":\"OpenGSN trusted forwarder status\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"proxyInitialize(address,string,address,(address,(address,uint256)[],(address,uint256)[],(address,uint256[])[],(address,uint256[])[],(address,uint256[])[],uint256[],(address,uint256[],uint256[])[],(address,uint256[],uint256[])[])[])\":{\"details\":\"See initialize. Uses onlyInitializing modifier, enabling running while initializing.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setContractURI(string)\":{\"details\":\"Set contract uri\"},\"supportsInterface(bytes4)\":{\"details\":\"ERC165 Support\",\"params\":{\"interfaceId\":\"XOR of the external functions of the interface\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"version()\":{\"details\":\"OwlProtocol contract version. Used to determine compatibility interoperable with other Owl contracts.\"},\"versionRecipient()\":{\"details\":\"Returns OpenGSN contract version (used for compatibility checks)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"input(address,uint256,uint256,uint256[][],uint256[][],uint256[][],uint256)\":{\"notice\":\"Call `target` `amount` `data`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/plugins/AssetRouter/AssetRouterInput.sol\":\"AssetRouterInput\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC1820ImplementerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC1820Implementer.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1820ImplementerUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC1820Implementer} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\\n * declare their willingness to be implementers.\\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\\n * registration to be complete.\\n */\\ncontract ERC1820ImplementerUpgradeable is Initializable, IERC1820ImplementerUpgradeable {\\n    function __ERC1820Implementer_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1820Implementer_init_unchained() internal onlyInitializing {\\n    }\\n    bytes32 private constant _ERC1820_ACCEPT_MAGIC = keccak256(\\\"ERC1820_ACCEPT_MAGIC\\\");\\n\\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bytes32)\\n    {\\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\\n    }\\n\\n    /**\\n     * @dev Declares the contract as willing to be an implementer of\\n     * `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer} and\\n     * {IERC1820Registry-interfaceHash}.\\n     */\\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\\n        _supportedInterfaces[interfaceHash][account] = true;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2666448e505df89f06bc8b5e8ae83ed3b5411e54fb69694510ec3620269534b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820ImplementerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC1820Implementer.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for an ERC1820 implementer, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\\n * Used by contracts that will be registered as implementers in the\\n * {IERC1820Registry}.\\n */\\ninterface IERC1820ImplementerUpgradeable {\\n    /**\\n     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\\n     * implements `interfaceHash` for `account`.\\n     *\\n     * See {IERC1820Registry-setInterfaceImplementer}.\\n     */\\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xce35b9f17b74b88eb612b1ae727a25e3d91129c254beba840e9de2006b872978\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/introspection/IERC1820Registry.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820RegistryUpgradeable {\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc4b50ac2351fc9eb8e89b0a039d794db665e7e93bbc83c70da0e683bfc801971\",\"license\":\"MIT\"},\"contracts/assets/ERC1155/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC1155Mintable {\\n    /**\\n     * @notice Must have MINTER_ROLE\\n     * @dev Allows MINTER_ROLE to mint NFTs\\n     * @param to address to\\n     * @param id tokenId value\\n     * @param amount to mint\\n     * @param data for hooks\\n     */\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @notice Must have MINTER_ROLE\\n     * @dev Allows caller to mint NFTs (safeMint)\\n     * @param to address to\\n     * @param ids id values\\n     * @param amounts to mint\\n     * @param data for hooks\\n     */\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xae47ff18df270681b730a59c96aa480341165dbbd0d68bfd18b4564615c8852d\",\"license\":\"MIT\"},\"contracts/assets/ERC20/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IERC20Mintable {\\n    /***** Minting *****/\\n    function mint(address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x50b3864c18e80c3f2dcf6a63d07b63243424c55ab498cc4b30ef0431105bf181\",\"license\":\"MIT\"},\"contracts/assets/ERC721/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * Interface for nested NFT that can be minted with auto-Id.\\n */\\ninterface IERC721Mintable {\\n    /***** Minting *****/\\n    function mint(address to, uint256 tokenId) external;\\n    function safeMint(address to, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x3d08b36cf95a274e3b91543bda40e86c05eb68be23960e9facc6aafd0aafc2c2\",\"license\":\"MIT\"},\"contracts/assets/ERC721/IERC721MintableAutoId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * Interface for nested NFT that can be minted with auto-Id.\\n */\\ninterface IERC721MintableAutoId {\\n    /***** Minting *****/\\n    function mint(address to) external returns (uint256);\\n    function safeMint(address to) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x925cd324edb14711006c0c88c99cbd3333c6b283cf03ac8856f6040805161dd9\",\"license\":\"MIT\"},\"contracts/common/ContractURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {IContractURI} from './IContractURI.sol';\\nimport {StorageSlotString} from '../utils/StorageSlotString.sol';\\n\\n/**\\n * @dev Implements contract uri getter/setter\\n */\\ncontract ContractURI is AccessControlUpgradeable, IContractURI {\\n    bytes32 internal constant CONTRACT_URI_ROLE = keccak256('CONTRACT_URI_ROLE');\\n    bytes32 internal constant _CONTRACT_URI_SLOT = keccak256('CONTRACT_URI');\\n\\n    /**\\n     * @dev ContractURI chained initialization\\n     * @param _contractUriRole write role\\n     * @param _initContractURI initial contract uri\\n     */\\n    function __ContractURI_init(address _contractUriRole, string memory _initContractURI) internal {\\n        __ContractURI_init_unchained(_contractUriRole, _initContractURI);\\n    }\\n\\n    /**\\n     * @dev ContractURI unchained initialization.\\n     * @param _contractUriRole write role\\n     * @param _initContractURI initial contract uri\\n     */\\n    function __ContractURI_init_unchained(address _contractUriRole, string memory _initContractURI) internal {\\n        _grantRole(CONTRACT_URI_ROLE, _contractUriRole);\\n        StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value = _initContractURI;\\n    }\\n\\n    /**\\n     * @dev Returns collection-wide URI-accessible metadata\\n     */\\n    function contractURI() public view returns (string memory) {\\n        return StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Set contract uri\\n     */\\n    function setContractURI(string memory uri) external onlyRole(CONTRACT_URI_ROLE) {\\n        StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value = uri;\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IContractURI).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd8dc6ad13d314f7e0e42a0103200bf2e17a1f004776b2bec4ff00fd333429414\",\"license\":\"MIT\"},\"contracts/common/IContractURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @dev IContractURI defines a contract with metadata. A 1:1 relationship between contract address and metdata uri.\\n */\\ninterface IContractURI {\\n    function contractURI() external view returns (string memory);\\n    function setContractURI(string memory uri) external;\\n}\\n\",\"keccak256\":\"0xec2f10bd854049d89466c7c7a145eba628e69e6e688f5c8fdab16f7aa6adf094\",\"license\":\"MIT\"},\"contracts/common/IOwlBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { IAccessControlUpgradeable } from '@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol';\\nimport { IContractURI } from './IContractURI.sol';\\nimport { IRouterReceiver } from './IRouterReceiver.sol';\\n\\n/**\\n * IOwlBase interface\\n */\\ninterface IOwlBase is IAccessControlUpgradeable, IContractURI, IRouterReceiver {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xaac3c3501e7083b0e9385f92b16909932b10bca004c575fa30703309cc318448\",\"license\":\"MIT\"},\"contracts/common/IRouterReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * IRouterReceiver defines OpenGSN Interfaces\\n */\\ninterface IRouterReceiver {\\n    function isTrustedForwarder(address forwarder) external view returns (bool);\\n    function versionRecipient() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0x27f0c495d085cbd04415b72d86942255e7d7e4283a01da87f7bf459b6cd0ac46\",\"license\":\"MIT\"},\"contracts/common/OwlBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport {UUPSUpgradeable} from '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport {IERC1820RegistryUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol';\\nimport {ERC1820ImplementerUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/introspection/ERC1820ImplementerUpgradeable.sol';\\nimport {ContractURI} from './ContractURI.sol';\\nimport {RouterReceiver} from './RouterReceiver.sol';\\nimport {IOwlBase} from './IOwlBase.sol';\\n\\n/**\\n * @dev Base for all OwlProtocol contracts\\n *\\n * Implements several required mechanisms for all OwlProtocol contracts to\\n * utilize:\\n * - OpenGSN support (gasless transactions)\\n * - Consistent contract versioning\\n * - Consistent access control\\n * - UUPS contract upgrade support\\n */\\ncontract OwlBase is\\n    ContextUpgradeable,\\n    AccessControlUpgradeable,\\n    UUPSUpgradeable,\\n    ContractURI,\\n    RouterReceiver,\\n    ERC1820ImplementerUpgradeable,\\n    IOwlBase\\n{\\n    // Consistent version across all contracts\\n    string internal constant _version = 'v0.1';\\n    address constant ERC1820_REGISTRY = 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24;\\n    bytes32 constant ONE = 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    IERC1820RegistryUpgradeable constant registry = IERC1820RegistryUpgradeable(ERC1820_REGISTRY);\\n\\n    /**\\n        Chained / Unchained\\n        https://forum.openzeppelin.com/t/difference-between-init-and-init-unchained/25255/3\\n\\n        Chained: constructor header replacement (parent inherited contracts)\\n        Unchained: constructor replacement (self init)\\n\\n     */\\n    /**\\n     * @dev OwlBase chained initialization\\n     * @param _admin address to assign owner rights\\n     * @param _forwarder OpenGSN forwarder address (if desired).\\n     */\\n    function __OwlBase_init(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _forwarder\\n    ) internal {\\n        __ContractURI_init_unchained(_admin, _initContractURI);\\n        __RouterReceiver_init_unchained(_forwarder);\\n\\n        __OwlBase_init_unchained(_admin);\\n    }\\n\\n    /**\\n     * @dev OwlBase unchained initialization.\\n     * @param _admin address to assign owner rights\\n     */\\n    function __OwlBase_init_unchained(address _admin) internal {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        if (AddressUpgradeable.isContract(ERC1820_REGISTRY)) {\\n            registry.updateERC165Cache(address(this), type(IOwlBase).interfaceId);\\n            registry.setInterfaceImplementer(address(this), type(IOwlBase).interfaceId | ONE, address(this));\\n        }\\n    }\\n\\n    /**\\n     * @notice Only callable by admins\\n     * @dev UUPS function to authorize upgrades\\n     * @param newImplementation newImplementation\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    /**\\n     * @dev Returns the implementation address.\\n     */\\n    function getImplementation() external view returns (address) {\\n        return _getImplementation();\\n    }\\n\\n    /**\\n     * @dev OwlProtocol contract version. Used to determine compatibility\\n     * interoperable with other Owl contracts.\\n     */\\n    function version() external pure virtual returns (string memory) {\\n        return _version;\\n    }\\n\\n    /** Overrides */\\n    function _msgSender() internal view virtual override(RouterReceiver, ContextUpgradeable) returns (address) {\\n        return RouterReceiver._msgSender();\\n    }\\n\\n    function _msgData() internal view virtual override(RouterReceiver, ContextUpgradeable) returns (bytes calldata) {\\n        return RouterReceiver._msgData();\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlUpgradeable, ContractURI, RouterReceiver)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOwlBase).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf296b1eaf7add0db769e09c517d6128141568de96f3a817456f0c0ce9c5e826e\",\"license\":\"MIT\"},\"contracts/common/RouterReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {IRouterReceiver} from './IRouterReceiver.sol';\\n\\n/**\\n * @dev Implements OpenGSN Config\\n */\\ncontract RouterReceiver is AccessControlUpgradeable, IRouterReceiver {\\n    bytes32 internal constant ROUTER_ROLE = keccak256('ROUTER_ROLE');\\n\\n    /**\\n     * @dev RouterReceiver chained initialization\\n     * @param _router router role\\n     */\\n    function __RouterReceiver_init(address _router) internal {\\n        __RouterReceiver_init_unchained(_router);\\n    }\\n\\n    /**\\n     * @dev RouterReceiver unchained initialization.\\n     * @param _router router role\\n     */\\n    function __RouterReceiver_init_unchained(address _router) internal {\\n        _grantRole(ROUTER_ROLE, _router);\\n    }\\n\\n    /**\\n     * @dev Returns OpenGSN contract version (used for compatibility checks)\\n     */\\n    function versionRecipient() external pure virtual returns (string memory) {\\n        return '2.2.6';\\n    }\\n\\n    /**\\n     * @dev Determine is an address a GSN trusted forwarder.\\n     * @param forwarder address to query\\n     * @return OpenGSN trusted forwarder status\\n     */\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return hasRole(ROUTER_ROLE, forwarder);\\n    }\\n\\n    /**\\n     * @notice the following 3 functions are all required for OpenGSN integration\\n     * @dev Support for meta transactions\\n     * @return ret either msg.sender or user who called transaction through a relayer\\n     */\\n    function _msgSender() internal view virtual override returns (address ret) {\\n        if (msg.data.length >= 20 && hasRole(ROUTER_ROLE, msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * @dev Support for meta transactions\\n     * @return msgData from either msg.sender or from user who called through relayer\\n     */\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (msg.data.length >= 20 && hasRole(ROUTER_ROLE, msg.sender)) {\\n            return msg.data[0:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC165 Support\\n     * @param interfaceId XOR of the external functions of the interface\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IRouterReceiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x92ef1efa23fce0e51555009c49489e1002ae8588358876400c356070df050f3f\",\"license\":\"MIT\"},\"contracts/plugins/AssetRouter/AssetRouterInput.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport {IERC721Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\nimport {IERC1155Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol';\\n\\nimport {SafeERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\nimport {OwlBase} from '../../common/OwlBase.sol';\\n\\nimport {AssetBasketInput, AssetLib} from './IAsset.sol';\\nimport {IAssetRouterInput} from './IAssetRouterInput.sol';\\nimport {IAssetRouterOutput} from './IAssetRouterOutput.sol';\\n\\n/**\\n * @dev Abstract contract with types and utilities that will be used by many (if\\n * not all) Plugins contracts\\n *\\n *\\n */\\ncontract AssetRouterInput is OwlBase, IAssetRouterInput {\\n    // mapping from contract address to tokenId to nUsed\\n    mapping(uint256 => mapping(address => mapping(uint256 => uint256))) erc721NTime;\\n    // Array of inputs in this configurations\\n    AssetBasketInput[] private inputBaskets;\\n\\n    //https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[48] private __gap;\\n\\n    constructor() {}\\n\\n    /**\\n     * @inheritdoc IAssetRouterInput\\n     */\\n    function initialize(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        AssetBasketInput[] calldata _inputBaskets\\n    ) external override initializer {\\n        __AssetRouterInput_init(_admin, _initContractURI, _gsnForwarder, _inputBaskets);\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetRouterInput\\n     */\\n    function proxyInitialize(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        AssetBasketInput[] calldata _inputBaskets\\n    ) external override onlyInitializing {\\n        __AssetRouterInput_init(_admin, _initContractURI, _gsnForwarder, _inputBaskets);\\n    }\\n\\n    /**\\n     * @dev performs validations that `_inputs` and `_outputs` are valid and\\n     * creates the configuration\\n     */\\n    function __AssetRouterInput_init(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        AssetBasketInput[] memory _inputBaskets\\n    ) internal {\\n        __ContractURI_init_unchained(_admin, _initContractURI);\\n        __RouterReceiver_init_unchained(_gsnForwarder);\\n        __OwlBase_init_unchained(_admin);\\n\\n        __AssetRouterInput_init_unchained(_inputBaskets);\\n    }\\n\\n    function __AssetRouterInput_init_unchained(AssetBasketInput[] memory _inputBaskets) internal {\\n        inputBaskets = _inputBaskets;\\n    }\\n\\n    /**\\n     *\\n     * Getters\\n     *\\n     */\\n\\n    /**\\n     * @inheritdoc IAssetRouterInput\\n     */\\n    function getBasket(uint256 basketIdx) public view returns (AssetBasketInput memory) {\\n        return inputBaskets[basketIdx];\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetRouterInput\\n     */\\n    function input(\\n        address target,\\n        uint256 amount,\\n        uint256 basketIdx,\\n        uint256[][] calldata erc721TokenIdsUnaffected,\\n        uint256[][] calldata erc721TokenIdsNTime,\\n        uint256[][] calldata erc721TokenIdsBurned,\\n        uint256 outBasketIdx\\n    ) external override {\\n        address msgSender = _msgSender();\\n\\n        //Consume inputs\\n        AssetLib.input(\\n            inputBaskets[basketIdx],\\n            amount,\\n            msgSender,\\n            erc721TokenIdsUnaffected,\\n            erc721TokenIdsNTime,\\n            erc721TokenIdsBurned,\\n            erc721NTime[basketIdx]\\n        );\\n\\n        //Route call\\n        IAssetRouterOutput(target).output(msgSender, amount, outBasketIdx);\\n    }\\n}\\n\",\"keccak256\":\"0x733486078256860736bc603ff43161ada99a759afa54f52bdf5ffd15ee68f0b5\",\"license\":\"MIT\"},\"contracts/plugins/AssetRouter/IAsset.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC1155Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport {IERC20Mintable} from \\\"../../assets/ERC20/IERC20Mintable.sol\\\";\\nimport {IERC721Mintable} from \\\"../../assets/ERC721/IERC721Mintable.sol\\\";\\nimport {IERC721MintableAutoId} from \\\"../../assets/ERC721/IERC721MintableAutoId.sol\\\";\\nimport {IERC1155Mintable} from \\\"../../assets/ERC1155/IERC1155Mintable.sol\\\";\\n\\nimport {IERC20Mintable} from \\\"../../assets/ERC20/IERC20Mintable.sol\\\";\\n\\n// Unaffected inputs of this type are unaffected by the crafting process.\\n// DOES NOT APPLY TO ERC 721 INPUTS, USE NTime INSTEAD.\\n// Burned inputs of this type are burned during the crafting process/\\n// NTime inputs of this type are not burned, but can only be used N times in\\n// the same recipe; Only available for ERC721 TokenType\\nenum ConsumableType {\\n    unaffected,\\n    burned,\\n    NTime\\n}\\n\\n// Current set of support token types as assets\\nenum TokenType {\\n    erc20,\\n    erc721,\\n    erc1155\\n}\\n\\nstruct AssetERC20 {\\n    address contractAddr;\\n    uint256 amount;\\n}\\n\\nstruct AssetERC721 {\\n    address contractAddr;\\n    uint256[] tokenIds;\\n}\\n\\nstruct AssetERC1155 {\\n    address contractAddr;\\n    uint256[] amounts;\\n    uint256[] tokenIds;\\n}\\n\\nstruct AssetBasket {\\n    AssetERC20[] erc20;\\n    AssetERC721[] erc721;\\n    AssetERC1155[] erc1155;\\n}\\n\\nstruct AssetBasketInput {\\n    address burnAddress;\\n    AssetERC20[] erc20Unaffected;\\n    AssetERC20[] erc20Burned;\\n    AssetERC721[] erc721Unaffected;\\n    AssetERC721[] erc721Burned;\\n    AssetERC721[] erc721NTime;\\n    uint256[] erc721NTimeMax;\\n    AssetERC1155[] erc1155Unaffected;\\n    AssetERC1155[] erc1155Burned;\\n}\\n\\nstruct AssetBasketOutput {\\n    uint256 outputableAmount;\\n    AssetERC20[] erc20Transfer;\\n    AssetERC20[] erc20Mint;\\n    AssetERC721[] erc721Transfer;\\n    AssetERC721[] erc721Mint;\\n    AssetERC721[] erc721MintAutoId;\\n    AssetERC1155[] erc1155Transfer;\\n    AssetERC1155[] erc1155Mint;\\n}\\n\\nerror InvalidERC20BalanceOf(AssetERC20 asset, uint256 currBalance, uint256 requiredBalance);\\nerror InvalidERC721OwnerOf(AssetERC721 asset, address currOwner, address requiredOwner);\\nerror InvalidERC721TokenIds(AssetERC721 asset, uint256 currTokenIdsLen, uint256 requiredTokenIdsLen);\\nerror InvalidERC721NTime(AssetERC721 asset, uint256 currNTime, uint256 maxNTime);\\nerror InvalidERC1155BalanceOfBatch(\\n    AssetERC1155 asset, uint256 tokenId, uint256 currBalance, uint256 requiredBalance\\n);\\nerror InvalidOutputableAmount(uint256 currAmount, uint256 requiredAmount);\\n\\n//Library\\nlibrary AssetLib {\\n    function deposit(\\n        AssetBasketOutput storage basket,\\n        uint256 amount,\\n        address from,\\n        uint256[][] memory erc721TokenIdsTransfer,\\n        uint256[][] memory erc721TokenIdsMint\\n    )\\n        internal\\n    {\\n        basket.outputableAmount += amount;\\n        pushTokenIds(basket.erc721Transfer, erc721TokenIdsTransfer);\\n        pushTokenIds(basket.erc721Mint, erc721TokenIdsMint);\\n\\n        safeTransferFromERC20(basket.erc20Transfer, amount, from, address(this));\\n        safeTransferFromERC721(basket.erc721Transfer, amount, erc721TokenIdsTransfer, from, address(this));\\n        safeBatchTransferFromERC1155(basket.erc1155Transfer, amount, from, address(this));\\n    }\\n\\n    /**\\n     * @dev AssetBasketOutput that transfers assets.\\n     */\\n    function withdraw(\\n        AssetBasketOutput storage basket,\\n        uint256 amount,\\n        address to\\n    )\\n        internal\\n    {\\n        if (basket.outputableAmount < amount)\\n            revert InvalidOutputableAmount(basket.outputableAmount, amount);\\n\\n        basket.outputableAmount -= amount;\\n        uint256[][] memory erc721TokenIdsTransfer = popTokenIds(basket.erc721Transfer, amount);\\n        popTokenIds(basket.erc721Mint, amount);\\n\\n        safeTransferERC20(basket.erc20Transfer, amount, to);\\n        safeTransferFromERC721(basket.erc721Transfer, amount, erc721TokenIdsTransfer, address(this), to);\\n        safeBatchTransferFromERC1155(basket.erc1155Transfer, amount, address(this), to);\\n    }\\n\\n    /**\\n     * @dev AssetBasketOutput that transfers assets.\\n     */\\n    function output(\\n        AssetBasketOutput storage basket,\\n        uint256 amount,\\n        address to\\n    )\\n        internal\\n    {\\n         if (basket.outputableAmount < amount)\\n            revert InvalidOutputableAmount(basket.outputableAmount, amount);\\n\\n        basket.outputableAmount -= amount;\\n        uint256[][] memory erc721TokenIdsTransfer = popTokenIds(basket.erc721Transfer, amount);\\n        uint256[][] memory erc721TokenIdsMint =  popTokenIds(basket.erc721Mint, amount);\\n\\n        safeTransferERC20(basket.erc20Transfer, amount, to);\\n        mintERC20(basket.erc20Mint, amount, to);\\n\\n        safeTransferFromERC721(basket.erc721Transfer, amount, erc721TokenIdsTransfer, address(this), to);\\n        mintERC721(basket.erc721Mint, amount, erc721TokenIdsMint, to);\\n        mintAutoIdERC721(basket.erc721MintAutoId, amount, to);\\n\\n        safeBatchTransferFromERC1155(basket.erc1155Transfer, amount, address(this), to);\\n        mintERC1155(basket.erc1155Mint, amount, to);\\n    }\\n    /**\\n     * @dev AssetBasketInput that checks token guards.\\n     */\\n    function input(\\n        AssetBasketInput storage basket,\\n        uint256 amount,\\n        address from,\\n        uint256[][] memory erc721TokenIdsUnaffected,\\n        uint256[][] memory erc721TokenIdsNTime,\\n        uint256[][] memory erc721TokenIdsBurned,\\n        mapping(address => mapping(uint256 => uint256)) storage erc721NTime\\n    )\\n        internal\\n    {\\n        balanceOfERC20(basket.erc20Unaffected, amount, from);\\n        safeTransferFromERC20(basket.erc20Burned, amount, from, basket.burnAddress);\\n\\n        ownerOfERC721(basket.erc721Unaffected, amount, erc721TokenIdsUnaffected, from);\\n        ownerOfERC721(basket.erc721NTime, amount, erc721TokenIdsNTime, from);\\n        useERC721(basket.erc721NTime, basket.erc721NTimeMax, erc721TokenIdsNTime, erc721NTime);\\n        safeTransferFromERC721(basket.erc721Burned, amount, erc721TokenIdsBurned, from, basket.burnAddress);\\n\\n        balanceOfBatchERC1155(basket.erc1155Unaffected, amount, from);\\n        safeBatchTransferFromERC1155(basket.erc1155Burned, amount, from, basket.burnAddress);\\n    }\\n\\n\\n    function pushTokenIds(\\n        AssetERC721[] storage assets,\\n        uint256[][] memory tokenIds\\n    )\\n        internal\\n    {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            for (uint256 j = 0; j < tokenIds[i].length; j++) {\\n                assets[i].tokenIds.push(tokenIds[i][j]);\\n            }\\n        }\\n    }\\n\\n    function popTokenIds(\\n        AssetERC721[] storage assets,\\n        uint256 amount\\n    )\\n        internal\\n        returns (uint256[][] memory)\\n    {\\n\\n        uint256[][] memory tokenIds = new uint256[][](assets.length);\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            tokenIds[i] = new uint256[](amount);\\n            uint256 tokenIdsLen = assets[i].tokenIds.length;\\n\\n            for (uint256 j = 0; j < amount; j++) {\\n                tokenIds[i][j] = assets[i].tokenIds[tokenIdsLen - 1 - j];\\n                assets[i].tokenIds.pop();\\n            }\\n        }\\n\\n        return tokenIds;\\n    }\\n\\n    /**\\n     * @dev Checks if balance of ERC20 is below minimum required for each AssetERC20\\n     */\\n    function balanceOfERC20(AssetERC20[] memory assets, uint256 amount, address from) internal view {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            uint256 currBalance = IERC20Upgradeable(assets[i].contractAddr).balanceOf(from);\\n            uint256 requiredBalance = assets[i].amount * amount;\\n            if (currBalance < requiredBalance) {\\n                revert InvalidERC20BalanceOf(assets[i], currBalance, requiredBalance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks ownership of ERC721 tokenIds for each AssetERC721\\n     */\\n    function useERC721(\\n        AssetERC721[] memory assets,\\n        uint256[] memory erc721NTimeMax,\\n        uint256[][] memory tokenIds,\\n        mapping(address => mapping(uint256 => uint256)) storage erc721NTime\\n    )\\n        internal\\n    {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            for (uint256 j = 0; j < tokenIds[i].length; j++) {\\n                uint256 currNTime = erc721NTime[assets[i].contractAddr][tokenIds[i][j]];\\n                uint256 maxNTime = erc721NTimeMax[i];\\n                if (currNTime >= maxNTime) {\\n                    revert InvalidERC721NTime(assets[i], currNTime, maxNTime);\\n                }\\n\\n                erc721NTime[assets[i].contractAddr][tokenIds[i][j]] = currNTime + 1;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks ownership of ERC721 tokenIds for each AssetERC721\\n     */\\n    function ownerOfERC721(AssetERC721[] memory assets, uint256 amount, uint256[][] memory tokenIds, address from) internal view {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            if (tokenIds[i].length != amount)\\n                revert InvalidERC721TokenIds(assets[i], tokenIds[i].length, amount);\\n\\n            for (uint256 j = 0; j < tokenIds[i].length; j++) {\\n                address currOwner = IERC721Upgradeable(assets[i].contractAddr).ownerOf(tokenIds[i][j]);\\n                if (currOwner != from) {\\n                    revert InvalidERC721OwnerOf(assets[i], currOwner, from);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if batch balance of ERC1155 is below minimum required for each AssetERC1155\\n     */\\n    function balanceOfBatchERC1155(AssetERC1155[] memory assets, uint256 amount, address from) internal view {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            //this is unaffected consumable type, as ensured by input validations\\n            uint256[] memory amounts = new uint256[](assets[i].amounts.length);\\n            address[] memory accounts = new address[](assets[i].amounts.length);\\n            for (uint256 j = 0; j < assets[i].amounts.length; j++) {\\n                amounts[j] = assets[i].amounts[j] * amount;\\n                accounts[j] = from;\\n            }\\n\\n            uint256[] memory balances =\\n                IERC1155Upgradeable(assets[i].contractAddr).balanceOfBatch(accounts, assets[i].tokenIds);\\n            for (uint256 j = 0; j < balances.length; j++) {\\n                if (balances[j] < amounts[j]) {\\n                    revert InvalidERC1155BalanceOfBatch(assets[i], assets[i].tokenIds[j], balances[j], amounts[j]);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer AssetERC20 scaled up by amount\\n     */\\n    function safeTransferFromERC20(AssetERC20[] memory assets, uint256 amount, address from, address to) internal {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            SafeERC20Upgradeable.safeTransferFrom(\\n                IERC20Upgradeable(assets[i].contractAddr), from, to, assets[i].amount * amount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfer AssetERC20 scaled up by amount\\n     */\\n    function safeTransferERC20(AssetERC20[] memory assets, uint256 amount, address to) internal {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            SafeERC20Upgradeable.safeTransfer(\\n                IERC20Upgradeable(assets[i].contractAddr), to, assets[i].amount * amount\\n            );\\n        }\\n    }\\n\\n    function safeTransferFromERC721(AssetERC721[] memory assets, uint256 amount, uint256[][] memory tokenIds, address from, address to)\\n        internal\\n    {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            if (tokenIds[i].length != amount)\\n                revert InvalidERC721TokenIds(assets[i], tokenIds[i].length, amount);\\n\\n            for (uint256 j = 0; j < amount; j++) {\\n                IERC721Upgradeable(assets[i].contractAddr).safeTransferFrom(\\n                    from, to, tokenIds[i][j]\\n                );\\n            }\\n        }\\n    }\\n\\n    function safeBatchTransferFromERC1155(AssetERC1155[] memory assets, uint256 amount, address from, address to)\\n        internal\\n    {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            uint256[] memory amounts = new uint256[](assets[i].amounts.length);\\n            for (uint256 j = 0; j < assets[i].amounts.length; j++) {\\n                amounts[j] = assets[i].amounts[j] * amount;\\n            }\\n\\n            IERC1155Upgradeable(assets[i].contractAddr).safeBatchTransferFrom(\\n                from, to, assets[i].tokenIds, amounts, new bytes(0)\\n            );\\n        }\\n    }\\n\\n    function mintERC20(AssetERC20[] memory assets, uint256 amount, address to) internal {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            IERC20Mintable(assets[i].contractAddr).mint(to, assets[i].amount * amount);\\n        }\\n    }\\n\\n    function mintERC721(AssetERC721[] memory assets, uint256 amount, uint256[][] memory tokenIds, address to) internal {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            if (tokenIds[i].length != amount)\\n                revert InvalidERC721TokenIds(assets[i], tokenIds[i].length, amount);\\n\\n            for (uint256 j = 0; j < tokenIds[i].length; j++) {\\n                IERC721Mintable(assets[i].contractAddr).mint(to, tokenIds[i][j]);\\n            }\\n        }\\n    }\\n\\n    function mintAutoIdERC721(AssetERC721[] memory assets, uint256 amount, address to) internal {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            for (uint256 j = 0; j < amount; j++) {\\n                IERC721MintableAutoId(assets[i].contractAddr).mint(to);\\n            }\\n        }\\n    }\\n\\n    function mintERC1155(AssetERC1155[] memory assets, uint256 amount, address to) internal {\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            uint256[] memory amounts = new uint256[](assets[i].amounts.length);\\n            for (uint256 j = 0; j < assets[i].amounts.length; j++) {\\n                amounts[j] = assets[i].amounts[j] * amount;\\n            }\\n\\n            IERC1155Mintable(assets[i].contractAddr).mintBatch(to, assets[i].tokenIds, amounts, new bytes(0));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3378d66aec33d7657309bb5bc84f98792d6b08e85138b5b5ed623675dfd03ae\",\"license\":\"MIT\"},\"contracts/plugins/AssetRouter/IAssetRouterInput.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AssetBasketInput} from \\\"./IAsset.sol\\\";\\n\\n/**\\n * @dev IAssetRouterInput defines a contract that guards calls requiring users to deposit or\\n * prove ownership of assets to then call an underlying contract.\\n * It can then be paired with any contract to trigger minting or other mechanics.\\n */\\ninterface IAssetRouterInput {\\n    /**\\n     * @dev Initializes contract (replaces constructor in proxy pattern)\\n     * @param _admin owner, can control outputs on contract\\n     * @param _initContractURI contract uri\\n     * @param _gsnForwarder trusted forwarder address for openGSN\\n     * @param _inputBaskets input baskets\\n     */\\n    function initialize(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        AssetBasketInput[] calldata _inputBaskets\\n    )\\n        external;\\n\\n    /**\\n     * @dev See initialize. Uses onlyInitializing modifier, enabling running while initializing.\\n     */\\n    function proxyInitialize(\\n        address _admin,\\n        string memory _initContractURI,\\n        address _gsnForwarder,\\n        AssetBasketInput[] calldata _inputBaskets\\n    )\\n        external;\\n\\n    /**\\n     * @dev Returns all inputs\\n     * @param basketIdx Index of selected input basket\\n     */\\n    function getBasket(uint256 basketIdx) external view returns (AssetBasketInput memory);\\n\\n    /**\\n     * @notice Call `target` `amount` `data`\\n     * @dev Used to trigger a routed call. Amount parameter enables down-level iteration that consumes N inputs.\\n     * @param target Target Address\\n     * @param amount Down-level iteration parameter\\n     * @param basketIdx Index of selected input basket\\n     * @param erc721TokenIdsUnaffected 2D-Array of tokenIds that serve as unlimited token-gating\\n     * @param erc721TokenIdsNTime 2D-Array of tokenIds to use\\n     * @param erc721TokenIdsBurned 2D-Array of tokenIds to burn\\n     * @param outBasketIdx Index of selected output basket\\n     * ```\\n     */\\n    function input(\\n        address target,\\n        uint256 amount,\\n        uint256 basketIdx,\\n        uint256[][] calldata erc721TokenIdsUnaffected,\\n        uint256[][] calldata erc721TokenIdsNTime,\\n        uint256[][] calldata erc721TokenIdsBurned,\\n        uint256 outBasketIdx\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0x8c1b56bf0d04d4d24f62800b2604efd444f009188333c178c2931741b9afc568\",\"license\":\"MIT\"},\"contracts/plugins/AssetRouter/IAssetRouterOutput.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AssetBasketOutput} from './IAsset.sol';\\n\\n/**\\n * @dev IAssetRouterOutput defines a contract that outputs assets. All calls come from a\\n * trusted IAssetRouterInput.\\n */\\ninterface IAssetRouterOutput {\\n    /**\\n     * @dev Initializes contract (replaces constructor in proxy pattern)\\n     * @param _admin owner, can control outputs on contract\\n     * @param _initContractURI contract uri\\n     * @param _outputBaskets outputs for configuration\\n     * @param _routers trusted routers that can call the output function\\n     */\\n    function initialize(\\n        address _admin,\\n        string calldata _initContractURI,\\n        AssetBasketOutput[] calldata _outputBaskets,\\n        address[] calldata _routers\\n    ) external;\\n\\n    /**\\n     * @dev See initialize. Uses onlyInitializing modifier, enabling running while initializing.\\n     */\\n    function proxyInitialize(\\n        address _admin,\\n        string calldata _initContractURI,\\n        AssetBasketOutput[] calldata _outputBaskets,\\n        address[] calldata _routers\\n    ) external;\\n\\n    /**\\n     * @dev Returns all inputs\\n     * @param basketIdx Index of selected input basket\\n     */\\n    function getBasket(uint256 basketIdx) external view returns (AssetBasketOutput memory);\\n\\n    /**\\n     * @notice Must be `DEFAULT_ADMIN_ROLE`. Automatically sends from\\n     * `_msgSender()`\\n     * @dev Used to deposit configuration outputs.\\n     * @param amount How many more times the configuration should be\\n     * craftable\\n     * @param erc721TokenIdsTransfer 2D-array transfers ERC721s\\n     * @param erc721TokenIdsMint 2D-array mint ERC721s\\n     * ```\\n     */\\n    function deposit(uint256 amount, uint256 basketIdx, uint256[][] calldata erc721TokenIdsTransfer, uint256[][] calldata erc721TokenIdsMint) external;\\n\\n    /**\\n     * @notice Must be `DEFAULT_ADMIN_ROLE`\\n     * @dev Used to withdraw configuration outputs out of contract to the\\n     * caller. Will also decrease `craftableAmount`\\n     * @param amount How many sets of outputs should be withdrawn\\n     * @param basketIdx Index of selected output basket\\n     */\\n    function withdraw(uint256 amount, uint256 basketIdx) external;\\n\\n    /**\\n     * @notice Output `amount`\\n     * @dev Outputs assets.\\n     * @param to Receiver\\n     * @param amount How many times to craft\\n     * @param basketIdx Index of selected output basket\\n     */\\n    function output(address to, uint256 amount, uint256 basketIdx) external;\\n}\\n\",\"keccak256\":\"0xb0ad88bfe008882f87759ba59db06eba7e151ed0a43c8d96b93fcb8afecb0c54\",\"license\":\"MIT\"},\"contracts/utils/StorageSlotString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing strings to specific storage slots.\\n* Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *   bytes32 internal constant _CONTRACT_URI_SLOT = keccak256('CONTRACT_URI');\\n *\\n *   function contractURI() public view returns (string memory) {\\n *       return StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value;\\n *   }\\n *\\n *   function setContractURI(string memory uri) external onlyRole(CONTRACT_URI_ROLE) {\\n *       StorageSlotString.getStringSlot(_CONTRACT_URI_SLOT).value = uri;\\n *   }\\n * }\\n * ```\\n */\\nlibrary StorageSlotString {\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd63ecf1ae3fdcb6c6cb7202602feb6df5c44179aa013535fa9a27d1114e6f43a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a080604052346100315730608052613f29908161003782396080518181816104a1015281816108d4015261093a0152f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a7146101b7578063248a9ca3146101ae578063249cb3fa146101a55780632f2ff15d1461019c57806336568abe146101935780633659cfe61461018a578063486ff0cd1461018157806348925ec6146101785780634f1ef2861461016f57806352d1902d1461016657806354fd4d501461015d578063572b6c051461015457806377977d501461014b57806391d1485414610142578063938e3d7b14610139578063a217fddf14610130578063aaf10f4214610127578063d27630f91461011e578063d547741f14610115578063df329f2a1461010c5763e8a3d4851461010457600080fd5b61000e611202565b5061000e61117f565b5061000e61113c565b5061000e611056565b5061000e610fbd565b5061000e610fa0565b5061000e610e8d565b5061000e610e27565b5061000e610d1b565b5061000e610a32565b5061000e6109ec565b5061000e610926565b5061000e610879565b5061000e6106b9565b5061000e61063e565b5061000e610479565b5061000e6103d6565b5061000e6102ff565b5061000e610276565b5061000e610228565b503461000e57602036600319011261000e5760043563ffffffff60e01b811680910361000e5760209063054fd4d560e41b81149081156101fd575b506040519015158152f35b6303e8939960e31b811491508115610217575b50386101f2565b633d96f4ff60e11b14905038610210565b503461000e57602036600319011261000e5760043560005260976020526020600160406000200154604051908152f35b6001600160a01b0381160361000e57565b359061027482610258565b565b503461000e57604036600319011261000e5760ff6102c060243561029981610258565b60043560005260fb60205260406000209060018060a01b0316600052602052604060002090565b5460009116156102f7575060207fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b604051908152f35b6020906102ef565b503461000e5760408060031936011261000e576004359060243561032281610258565b600092808452609760205261033c60018486200154611569565b808452609760209081528385206001600160a01b03841660009081529152604090205460ff161561036c57505051f35b808452609760209081528385206001600160a01b0384166000908152915260409020805460ff191660011790556001600160a01b03806103aa61206e565b169216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d858551a451f35b503461000e57604036600319011261000e576024356103f481610258565b6001600160a01b038061040561206e565b169082160361041c5761041a90600435611826565b005b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b503461000e57602036600319011261000e5760043561049781610258565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691906104d0308414156118bc565b6104ed600080516020613eb483398151915293828554161461191d565b6104f56112ed565b6104fd61197e565b906105297f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1690565b1561053a57505061041a9150611b7b565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610595575b506105825760405162461bcd60e51b81528061057e60048201611a69565b0390fd5b61041a936105909114611a0b565b611c0b565b6105b791925060203d81116105be575b6105af81836107ca565b8101906119ef565b9038610560565b503d6105a5565b600091031261000e57565b918091926000905b8282106105f05750116105e9575050565b6000910152565b915080602091830151818601520182916105d8565b9060209161061e815180928185528580860191016105d0565b601f01601f1916010190565b90602061063b928181520190610605565b90565b503461000e57600036600319011261000e5761068560405161065f81610781565b6005815264191719171b60d91b6020820152604051918291602083526020830190610605565b0390f35b9181601f8401121561000e578235916001600160401b03831161000e576020808501948460051b01011161000e57565b503461000e5760e036600319011261000e576004356106d781610258565b6001600160401b039060643582811161000e576106f8903690600401610689565b9060843584811161000e57610711903690600401610689565b9060a43595861161000e5761072d61041a963690600401610689565b94909360c4359660443590602435906131b8565b50634e487b7160e01b600052604160045260246000fd5b61012081019081106001600160401b0382111761077457604052565b61077c610741565b604052565b604081019081106001600160401b0382111761077457604052565b606081019081106001600160401b0382111761077457604052565b6001600160401b03811161077457604052565b90601f801991011681019081106001600160401b0382111761077457604052565b6040519061027482610758565b6040519061012082018281106001600160401b0382111761077457604052565b6020906001600160401b038111610835575b601f01601f19160190565b61083d610741565b61082a565b92919261084e82610818565b9161085c60405193846107ca565b82948184528183011161000e578281602093846000960137010152565b50604036600319011261000e5760043561089281610258565b602435906001600160401b03821161000e573660238301121561000e576108c661041a923690602481600401359101610842565b906109196001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690610902308314156118bc565b600080516020613eb483398151915254161461191d565b6109216112ed565b611ab8565b503461000e57600036600319011261000e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316300361098157604051600080516020613eb48339815191528152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e57600036600319011261000e57610685604051610a0d81610781565b600481526376302e3160e01b6020820152604051918291602083526020830190610605565b503461000e57602036600319011261000e57602060ff610a9b600435610a5781610258565b7f7a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb26000526097845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b90815180825260208080930193019160005b828110610ac7575050505090565b9091929382604082610aee60019489516020809160018060a01b0381511684520151910152565b01950193929101610ab9565b90815180825260208080930193019160005b828110610b1a575050505090565b835185529381019392810192600101610b0c565b906040602061063b9360018060a01b0381511684520151918160208201520190610afa565b908082519081815260208091019281808460051b8301019501936000915b848310610b815750505050505090565b9091929394958480610b9f600193601f198682030187528a51610b2e565b9801930193019194939290610b71565b61063b9160018060a01b0382511681526040610bda6020840151606060208501526060840190610afa565b920151906040818403910152610afa565b90815180825260208092019182818360051b82019501936000915b848310610c165750505050505090565b9091929394958480610c3083856001950387528a51610baf565b9801930193019194939290610c06565b602080825282516001600160a01b03169082015261063b9190602082015190610c7761012092836040840152610140830190610aa7565b91610cf0610cdc610cc8610cb4610ca0604089015197601f1998898983030160608a0152610aa7565b606089015188888303016080890152610b53565b6080880151878783030160a0880152610b53565b60a0870151868683030160c0870152610b53565b60c0860151858583030160e0860152610afa565b610d0b60e08601519161010092868683030184870152610beb565b9401519282850301910152610beb565b503461000e57602036600319011261000e57610685604051610d3c81610758565b6000815260609081602082015281604082015281808201528160808201528160a08201528160c08201528160e08201528161010080920152610e176008610d84600435612f1a565b50610d8d6107eb565b81546001600160a01b0316815294610da760018301612f63565b6020870152610db860028301612f63565b6040870152610dc960038301613026565b90860152610dd960048201613026565b6080860152610dea60058201613026565b60a0860152610dfb60068201612fd7565b60c0860152610e0c600782016130a1565b60e0860152016130a1565b9082015260405191829182610c40565b503461000e57604036600319011261000e57602060ff610a9b602435610e4c81610258565b6004356000526097845260406000209060018060a01b0316600052602052604060002090565b9080601f8301121561000e5781602061063b93359101610842565b503461000e5760208060031936011261000e576001600160401b039060043582811161000e57610ec1903690600401610e72565b91610eca61146d565b8251908111610f93575b600080516020613ed483398151915291610ef782610ef28554611f79565b612000565b80601f8311600114610f305750819293600092610f25575b50508160011b916000199060031b1c1916179055005b015190503880610f0f565b90601f19831694610f3f611fb3565b926000905b878210610f7b575050836001959610610f62575b505050811b019055005b015160001960f88460031b161c19169055388080610f58565b80600185968294968601518155019501930190610f44565b610f9b610741565b610ed4565b503461000e57600036600319011261000e57602060405160008152f35b503461000e57600036600319011261000e57600080516020613eb4833981519152546040516001600160a01b039091168152602090f35b90608060031983011261000e5760043561100d81610258565b916001600160401b039160243583811161000e578261102e91600401610e72565b9260443561103b81610258565b9260643591821161000e5761105291600401610689565b9091565b503461000e576110b061106836610ff4565b926000959495929192549561109460ff8860081c16158098819961112e575b811561110e575b506120c6565b866110a7600160ff196000541617600055565b6110f5576123cf565b6110b657005b6110c661ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b61110961010061ff00196000541617600055565b6123cf565b303b15915081611120575b503861108e565b6001915060ff161438611119565b600160ff8216109150611087565b503461000e57604036600319011261000e5761041a60243560043561116082610258565b80600052609760205261117a600160406000200154611569565b611826565b503461000e5761118e36610ff4565b9260ff60009392935460081c16156111a95761041a946123cf565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b503461000e576000806003193601126112ea576040519080600080516020613ed48339815191529081549061123682611f79565b808652926001928084169081156112c6575060011461126c575b61068586611260818803826107ca565b6040519182918261062a565b815292507feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c6975b8284106112ae5750505081016020016112608261068538611250565b80546020858701810191909152909301928101611292565b60ff1916602088015250506040850193506112609250849150610685905038611250565b80fd5b6112f561206e565b6001600160a01b03811660009081527f683723e34a772b6e4f2c919bba7fa32ed8ea11a8325f54da7db716e9d9dd98c7602052604090205460ff16156113385750565b61134a906001600160a01b0316611efa565b60006113546119b6565b90603061136083611e4e565b53607861136c83611e64565b5360415b6001811161141e5761057e6037611406866113f88761138f8815611eaf565b6113f26040519586947f416363657373436f6e74726f6c3a206163636f756e742000000000000000000060208701526113d1815180926020858a0191016105d0565b8501016011907001034b99036b4b9b9b4b733903937b6329607d1b81520190565b9061162d565b03601f1981018352826107ca565b60405162461bcd60e51b81529182916004830161062a565b9080600f61145b92166010811015611460575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a6114518486611e75565b5360041c91611e94565b611370565b611468611e37565b611431565b61147561206e565b6001600160a01b03811660009081527f62e46077c3875a2051fa0dcdd1c4cd18bfdd60fe03018733710dc9e484f089a360205260409020547f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c15919060ff16156114dc575050565b6114ee906001600160a01b0316611efa565b906114f76119b6565b90603061150383611e4e565b53607861150f83611e64565b5360415b600181116115325761057e6037611406866113f88761138f8815611eaf565b9080600f61156492166010811015611460576f181899199a1a9b1b9c1cb0b131b232b360811b901a6114518486611e75565b611513565b61157161206e565b60008281526097602090815260408083206001600160a01b038516845290915290205460ff16156115a0575050565b6115b2906001600160a01b0316611efa565b906115bb6119b6565b9060306115c783611e4e565b5360786115d383611e64565b5360415b600181116115f65761057e6037611406866113f88761138f8815611eaf565b9080600f61162892166010811015611460576f181899199a1a9b1b9c1cb0b131b232b360811b901a6114518486611e75565b6115d7565b90611640602092828151948592016105d0565b0190565b6001600160a01b03811660009081527f62e46077c3875a2051fa0dcdd1c4cd18bfdd60fe03018733710dc9e484f089a3602052604090207f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c159060ff905b5416156116ac575050565b60008181526097602090815260408083206001600160a01b03861684529091529020805460ff191660011790556001600160a01b03806116ea61206e565b169216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d6000604051a4565b6001600160a01b03811660009081527f683723e34a772b6e4f2c919bba7fa32ed8ea11a8325f54da7db716e9d9dd98c7602052604081205460ff161561175b575050565b8080526097602090815260408083206001600160a01b038516600090815292529020805460ff191660011790556001600160a01b038061179961206e565b169216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d81604051a4565b6001600160a01b03811660009081527fae33a31436ab9cea8f54189966a681a9746f10deb641aef438e7df3ef1426c59602052604090207f7a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb29060ff906116a1565b60008181526097602090815260408083206001600160a01b038616845290915290205460ff16611854575050565b60008181526097602090815260408083206001600160a01b03861684529091529020805460ff191690556001600160a01b038061188f61206e565b169216907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b6000604051a4565b156118c357565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561192457565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b60405190600060208301928084106001600160401b038511176119a9575b8360405281815292369037565b6119b1610741565b61199c565b60405190608082018281106001600160401b038211176119e2575b604052604282526060366020840137565b6119ea610741565b6119d1565b9081602091031261000e575190565b506040513d6000823e3d90fd5b15611a1257565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b60809060208152602e60208201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960408201526d6f6e206973206e6f74205555505360901b60608201520190565b90611ae47f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1690565b15611af3575061027490611b7b565b6040516352d1902d60e01b8152916020836004816001600160a01b0385165afa60009381611b5b575b50611b3a5760405162461bcd60e51b81528061057e60048201611a69565b611b56600080516020613eb48339815191526102749414611a0b565b611d23565b611b7491945060203d81116105be576105af81836107ca565b9238611b1c565b803b15611bb057600080516020613eb483398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b611c1481611b7b565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590611d1b575b611c5a57505050565b813b15611cca575060008281926020611cc795519201905af4611c7b611d79565b60405191611c888361079c565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b6040840152611da9565b50565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b506000611c51565b611d2c81611b7b565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590611d7157611c5a57505050565b506001611c51565b3d15611da4573d90611d8a82610818565b91611d9860405193846107ca565b82523d6000602084013e565b606090565b90919015611db5575090565b815115611dc55750805190602001fd5b60405162461bcd60e51b81526020600482015290819061057e906024830190610605565b50634e487b7160e01b600052601160045260246000fd5b8060001904821181151516611e13570290565b611e1b611de9565b0290565b6001906001198111611e2f570190565b611640611de9565b50634e487b7160e01b600052603260045260246000fd5b602090805115611e5c570190565b611640611e37565b602190805160011015611e5c570190565b906020918051821015611e8757010190565b611e8f611e37565b010190565b8015611ea2575b6000190190565b611eaa611de9565b611e9b565b15611eb657565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b60405190611f078261079c565b602a825260403660208401376030611f1e83611e4e565b536078611f2a83611e64565b536029905b60018211611f425761063b915015611eaf565b80600f611f7392166010811015611460576f181899199a1a9b1b9c1cb0b131b232b360811b901a6114518486611e75565b90611f2f565b90600182811c92168015611fa9575b6020831014611f9357565b634e487b7160e01b600052602260045260246000fd5b91607f1691611f88565b600080516020613ed48339815191526000527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c69790565b818110611ff4575050565b60008155600101611fe9565b90601f821161200d575050565b61027491600080516020613ed48339815191526000527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c697906020601f840160051c83019310612064575b601f0160051c0190611fe9565b9091508190612057565b60143610158061208e575b1561208a5736601319013560601c90565b3390565b503360009081527fae33a31436ab9cea8f54189966a681a9746f10deb641aef438e7df3ef1426c59602052604090205460ff16612079565b156120cd57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b6020906001600160401b038111612142575b60051b0190565b61214a610741565b61213b565b81601f8201121561000e5780359061216682612129565b92604092612176845195866107ca565b808552602091828087019260061b8501019381851161000e578301915b8483106121a35750505050505090565b858383031261000e5783869182516121ba81610781565b85356121c581610258565b81528286013583820152815201920191612193565b81601f8201121561000e578035916121f183612129565b926121ff60405194856107ca565b808452602092838086019260051b82010192831161000e578301905b828210612229575050505090565b8135815290830190830161221b565b81601f8201121561000e5780359061224f82612129565b9260409261225f845195866107ca565b808552602093848087019260051b8501019383851161000e57858101925b85841061228e575050505050505090565b6001600160401b03843581811161000e5783019184601f19848903011261000e5784516122ba81610781565b898401356122c781610258565b81528584013592831161000e576122e5888b809695819601016121da565b8382015281520193019261227d565b9080601f8301121561000e57813561230b81612129565b9260409161231b835195866107ca565b808552602093848087019260051b8401019381851161000e57858401925b85841061234a575050505050505090565b6001600160401b03843581811161000e57860191606080601f19858803011261000e578451906123798261079c565b8a85013561238681610258565b82528585013584811161000e57878c6123a1928801016121da565b8b83015284013592831161000e576123c0868b809695819601016121da565b85820152815201930192612339565b9493946123db86612129565b936040906123eb825196876107ca565b8786526020978887019060051b82019236841161000e5782915b84831061241c57505050505061027494955061254b565b6001600160401b0390833582811161000e578501906101208236031261000e576124446107f8565b61244d83610269565b81528d83013584811161000e576124688f913690860161214f565b908201528483013584811161000e57612484903690850161214f565b8582015260608084013585811161000e576124a29036908601612238565b9082015260808084013585811161000e576124c09036908601612238565b9082015260a08084013585811161000e576124de9036908601612238565b9082015260c08084013585811161000e576124fc90369086016121da565b9082015260e08084013585811161000e5761251a90369086016122f4565b908201526101008084013594851161000e5761253c8f959486953691016122f4565b90820152815201920191612405565b919061255683611644565b80516001600160401b038111612652575b600080516020613ed48339815191529161258582610ef28554611f79565b60209081601f84116001146125dc575092826125c7936125cc96936102749998966000926125d1575b50508160011b916000199060031b1c19161790556117c5565b61265f565b612d93565b0151905038806125ae565b9190601f1984166125eb611fb3565b936000905b82821061263a575050936125cc969361027499989693600193836125c79810612621575b505050811b0190556117c5565b015160001960f88460031b161c19169055388080612614565b806001869782949787015181550196019401906125f0565b61265a610741565b612567565b61266890611717565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b6126865750565b803b1561000e5760405163a41e7d5160e01b815230600482015263054fd4d560e41b6024820152600090818160448183875af18015612744575b612731575b50813b156112ea576040516329965a1d60e01b8152306004820181905260016354fd4d5160e01b0360248301526044820152918290606490829084905af18015612724575b6127115750565b8061271e610274926107b7565b806105c5565b61272c6119fe565b61270a565b8061271e61273e926107b7565b386126c5565b61274c6119fe565b6126c0565b8054906000908181558261276457505050565b6001906001600160ff1b03841182166127a3575b82526020822092811b8301925b8381106127925750505050565b808360029255838382015501612785565b6127ab611de9565b612778565b805460008255806127bf575050565b61027491600052602060002090810190611fe9565b90600160401b8111612809575b8154908083558181106127f357505050565b6102749260005260206000209182019101611fe9565b612811610741565b6127e1565b80549060008082558261282857505050565b6001916001600160ff1b038411831661286d575b81526020812092821b8301925b8381106128565750505050565b8082600292556128678482016127b0565b01612849565b612875611de9565b61283c565b600160401b8211612907575b80549082815581831061289857505050565b6001916001600160ff1b0380821184166128fa575b841183166128ed575b60009182526020822090831b810193831b015b8381106128d65750505050565b8082600292556128e78482016127b0565b016128c9565b6128f5611de9565b6128b6565b612902611de9565b6128ad565b61290f610741565b612886565b8054906000908181558261292757505050565b6001907f555555555555555555555555555555555555555555555555555555555555555584118216612994575b8252602082209160039384028301925b838110612972575050505050565b80828692556129828482016127b0565b61298e600282016127b0565b01612964565b61299c611de9565b612954565b90600160401b8111612a56575b8154918181558282106129c057505050565b6001907f55555555555555555555555555555555555555555555555555555555555555558085118316612a49575b83118216612a3c575b60009081526020812060039485028101938502015b838110612a1a575050505050565b8082869255612a2a8482016127b0565b612a36600282016127b0565b01612a0c565b612a44611de9565b6129f7565b612a51611de9565b6129ee565b612a5e610741565b6129ae565b815191600160401b8311612b46575b8154838355808410612ada575b50602080910191600052806000206000925b848410612a9f575050505050565b8051805183546001600160a01b0319166001600160a01b03919091161783556001916002918591908201518486015501920193019290612a91565b60016001600160ff1b038083118216612b39575b85118116612b2c575b6000908482526020822092811b83019286821b015b838110612b1b57505050612a7f565b808360029255838382015501612b0c565b612b34611de9565b612af7565b612b41611de9565b612aee565b612b4e610741565b612a72565b815191612b6083836127d4565b602080910191600052806000206000925b848410612b7f575050505050565b60018382829351855501920193019290612b71565b815190612ba1828261287a565b600090815260208082209093829085015b848410612bc157505050505050565b8051805184546001600160a01b0319166001600160a01b039190911617845586908101518051600191868301908490612bfa84846127d4565b019086528386209086905b838210612c2357505050505060029060019201930193019291612bb2565b805183558b95928501929185019101612c05565b90805190612c4582846129a1565b600092835260208084209091849083015b848610612c6557505050505050565b8051805184546001600160a01b0319166001600160a01b039190911617845584906001808601838301519084825192612c9e84846127d4565b019087528487209087905b838210612cd857505050505090600192612ccc6040600394015160028801612b53565b01930195019491612c56565b805183558a96928501929185019101612ca9565b815181546001600160a01b0319166001600160a01b039091161781556102749160089061010090612d24602082015160018601612a63565b612d35604082015160028601612a63565b612d46606082015160038601612b94565b612d57608082015160048601612b94565b612d6860a082015160058601612b94565b612d7960c082015160068601612b53565b612d8a60e082015160078601612c37565b01519101612c37565b805190600160401b8211612f0d575b61012e8054838255808410612e10575b505061012e6000526020908101907fbdaadd9f750d0166045bf387a364eadd28ba243e04512a47282aa5147a68e37f6000925b848410612df3575050505050565b60098382612e046001945186612cec565b01920193019290612de5565b60017f1c71c71c71c71c71c71c71c71c71c71c71c71c71c71c71c71c71c71c71c71c718083118216612f00575b85118116612ef3575b60009283526009927fbdaadd9f750d0166045bf387a364eadd28ba243e04512a47282aa5147a68e37f928402830192868502015b838110612e8957505050612db2565b8082869255612e99848201612751565b612ea560028201612751565b612eb160038201612816565b612ebd60048201612816565b612ec960058201612816565b612ed5600682016127b0565b612ee160078201612914565b612eed60088201612914565b01612e7a565b612efb611de9565b612e46565b612f08611de9565b612e3d565b612f15610741565b612da2565b60099061012e8054821015612f56575b600052027fbdaadd9f750d0166045bf387a364eadd28ba243e04512a47282aa5147a68e37f0190600090565b612f5e611e37565b612f2a565b908154612f6f81612129565b92604093612f7f855191826107ca565b828152809460208092019260005281600020906000935b858510612fa557505050505050565b6002846001928451612fb681610781565b848060a01b0387541681528487015483820152815201930194019391612f96565b9060405191828154918282526020928383019160005283600020936000905b82821061300c57505050610274925003836107ca565b855484526001958601958895509381019390910190612ff6565b90815461303281612129565b92604093613042855191826107ca565b828152809460208092019260005281600020906000935b85851061306857505050505050565b600284600192845161307981610781565b848060a01b03875416815261308f858801612fd7565b83820152815201930194019391613059565b9081546130ad81612129565b926040936130bd855191826107ca565b828152809460208092019260005281600020906000935b8585106130e357505050505050565b6003846001928451606081018181106001600160401b0382111761313c575b8652848060a01b03875416815261311a858801612fd7565b8382015261312a60028801612fd7565b868201528152019301940193916130d4565b613144610741565b613102565b9291909261315684612129565b9161316460405193846107ca565b829480845260208094019060051b83019282841161000e5780915b84831061318e57505050505050565b82356001600160401b03811161000e5786916131ad86849386016121da565b81520192019161317f565b93909497999896929195996131cb61206e565b809b876131d78a612f1a565b509660009c8d9b8c5260209761012d89526040809d209736906131f992613149565b93369061320592613149565b94369061321192613149565b958c60019182808b0161322390612f63565b9280915b61335b575b50505050509261329983613281816132cb989561326f8c6132ab99819d9b6133029f600261326361326a925460018060a01b031690565b9401612f63565b613ab7565b8d61327c60038d01613026565b61364c565b6132946005890191848d61327c85613026565b613026565b6132a560068801612fd7565b906134e8565b82548b906001600160a01b031691876132c660048701613026565b613c97565b6132e189856132dc600785016130a1565b6138dd565b80546001600160a01b031690899085906132fd906008016130a1565b613dd8565b6001600160a01b031691823b15613357575163a16f3c0d60e01b81526001600160a01b03969096166004870152602486015260448501919091529192918290606490829084905af18015612724576127115750565b8480fd5b9092948597929496975184101561348857508d8461339c613390613390613382888b6134a4565b51516001600160a01b031690565b6001600160a01b031690565b91516370a0823160e01b81526001600160a01b03949094166004808601919091529391829060249082905afa91821561347b575b9161345e575b506133ee8d856133e686896134a4565b510151611e00565b908181106134105750505061340290613494565b918f9493918b938f84613227565b8e945061342161057e9394876134a4565b51945163251a663760e21b815285516001600160a01b03169481019485526020958601519585019590955260408401526060830152829160800190565b6134759150843d86116105be576105af81836107ca565b386133d6565b6134836119fe565b6133d0565b9450819695508061322c565b6001906000198114611e2f570190565b60209181518110156134b9575b60051b010190565b6134c1611e37565b6134b1565b6134de60409295949395606083526060830190610b2e565b9460208201520152565b919093600080915b84518310156135ff57815b61350584866134a4565b51518110156135ee5761355e61353b613521613382878a6134a4565b6001600160a01b0316600090815260208a90526040902090565b61354f83613549888a6134a4565b516134a4565b51600052602052604060002090565b54613569858a6134a4565b51808210156135c65750906135806135c192611e1f565b6135bb6135ad613593613382898c6134a4565b6001600160a01b0316600090815260208c90526040902090565b61354f846135498a8c6134a4565b55613494565b6134fb565b61057e6135d3878a6134a4565b516040516329fa40fb60e11b815293849391600485016134c6565b50916135f990613494565b916134f0565b95505050505050565b9081602091031261000e575161063b81610258565b91613635604092959495606085526060850190610b2e565b6001600160a01b0391821660208501529416910152565b939192906000925b85518410156137ac578161366885876134a4565b5151036137765760005b61367c85876134a4565b515181101561376557613698613390613390613382888b6134a4565b6136a682613549888a6134a4565b51604080516331a9108f60e11b81526004808201939093529092602091908290829060249082905afa918215613758575b60009261372b575b50506001600160a01b03878116908216036137055750505061370090613494565b613672565b8661057e916137148a8d6134a4565b519451639965936160e01b8152948594850161361d565b61374a9250803d10613751575b61374281836107ca565b810190613608565b38806136df565b503d613738565b6137606119fe565b6136d7565b509261377090613494565b92613654565b508361057e61379085613789818a6134a4565b51936134a4565b515192604051938493639096f90560e01b8552600485016134c6565b945050505050565b906137be82612129565b6137cb60405191826107ca565b82815280926137dc601f1991612129565b0190602036910137565b602090818184031261000e578051906001600160401b03821161000e57019180601f8401121561000e57825161381b81612129565b9361382960405195866107ca565b818552838086019260051b82010192831161000e578301905b828210613850575050505090565b81518152908301908301613842565b9092916040820191604081528451809352606081019260208096019060005b8181106138985750505061063b9394818403910152610afa565b82516001600160a01b03168652948701949187019160010161387e565b90926138ce606093969594608084526080840190610baf565b95602083015260408201520152565b9192906000905b8351821015613ab0576020613906816138fd85886134a4565b510151516137b4565b92613915826138fd83896134a4565b9460005b83613924848a6134a4565b5101515181101561398657806139548661394e6139819488613946898f6134a4565b5101516134a4565b51611e00565b61395e82896134a4565b5261397c8a61396d838b6134a4565b6001600160a01b039091169052565b613494565b613919565b50939290966139d492506139a36133906133906133828b8b6134a4565b946000604096876139b48c8c6134a4565b51015190885180809881946313849cfd60e21b835260049d8e840161385f565b03915afa938415613aa3575b600094613a80575b5060005b8451811015613a68576139ff81866134a4565b51613a0a82886134a4565b5111613a1e57613a1990613494565b6139ec565b613a5193508092506137899150613a4a81886139468d613a438e9f61057e9e9f6134a4565b519e6134a4565b51946134a4565b519251636d04a90160e01b815295869586016138b5565b5095509691509250613a7a9150613494565b906138e4565b613a9c91943d8091833e613a9481836107ca565b8101906137e6565b92386139e8565b613aab6119fe565b6139e0565b5050915050565b9091939293600092835b8351811015613bcb57613ba69080613b95898880898982613aff8b6001600160a01b03613aee8b876134a4565b515116946133e660209b8c926134a4565b604080516323b872dd60e01b8b82019081526001600160a01b039586166024830152989094166044850152606480850192909252908352919591613b446084886107ca565b5195613b4f87610781565b8887527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656489880152613b83843b1515613c4b565b51925af1613b8f611d79565b90611da9565b80519081613bab575b505050613494565b613ac1565b82613bc393613bbe938301019101613bd4565b613bec565b388080613b9e565b50505050509050565b9081602091031261000e5751801515810361000e5790565b15613bf357565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b15613c5257565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9493919492909260005b8151811015613bcb5784613cb582896134a4565b515103613d775760005b858110613cd55750613cd090613494565b613ca1565b613ce861339061339061338285876134a4565b90613cf781613549858c6134a4565b51823b1561000e57604051632142170760e11b81526001600160a01b038088166004830152881660248201526044810191909152613d52926000908290818381606481015b03925af18015613d6a575b613d57575b50613494565b613cbf565b8061271e613d64926107b7565b38613d4c565b613d726119fe565b613d47565b61057e613790826137898a9489966134a4565b939061063b9593613dbc91613dca9460018060a01b03809216885216602087015260a0604087015260a0860190610afa565b908482036060860152610afa565b916080818403910152610605565b939190936000905b8051821015613eab57602092613dfa846138fd85856134a4565b9460005b85613e0986866134a4565b51015151811015613e405780613e2b8a61394e613e3b948a6139468b8b6134a4565b613e35828a6134a4565b52613494565b613dfe565b50929094919350613e5a61339061339061338284886134a4565b91604080613e6884886134a4565b510151613e7361197e565b94803b1561000e578960008a613d3c613ea39983975198899788968795631759616b60e11b875260048701613d8a565b909291613de0565b50505091505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc59c86eba0f8c3c9659b86fb2776edca2ff990d1509243e9705ae43a6831558c6a2646970667358221220c7a299f15c20d7e42197eb7b13449d729b1772b5dfe7b2c827d0b4a507a2875664736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a7146101b7578063248a9ca3146101ae578063249cb3fa146101a55780632f2ff15d1461019c57806336568abe146101935780633659cfe61461018a578063486ff0cd1461018157806348925ec6146101785780634f1ef2861461016f57806352d1902d1461016657806354fd4d501461015d578063572b6c051461015457806377977d501461014b57806391d1485414610142578063938e3d7b14610139578063a217fddf14610130578063aaf10f4214610127578063d27630f91461011e578063d547741f14610115578063df329f2a1461010c5763e8a3d4851461010457600080fd5b61000e611202565b5061000e61117f565b5061000e61113c565b5061000e611056565b5061000e610fbd565b5061000e610fa0565b5061000e610e8d565b5061000e610e27565b5061000e610d1b565b5061000e610a32565b5061000e6109ec565b5061000e610926565b5061000e610879565b5061000e6106b9565b5061000e61063e565b5061000e610479565b5061000e6103d6565b5061000e6102ff565b5061000e610276565b5061000e610228565b503461000e57602036600319011261000e5760043563ffffffff60e01b811680910361000e5760209063054fd4d560e41b81149081156101fd575b506040519015158152f35b6303e8939960e31b811491508115610217575b50386101f2565b633d96f4ff60e11b14905038610210565b503461000e57602036600319011261000e5760043560005260976020526020600160406000200154604051908152f35b6001600160a01b0381160361000e57565b359061027482610258565b565b503461000e57604036600319011261000e5760ff6102c060243561029981610258565b60043560005260fb60205260406000209060018060a01b0316600052602052604060002090565b5460009116156102f7575060207fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b604051908152f35b6020906102ef565b503461000e5760408060031936011261000e576004359060243561032281610258565b600092808452609760205261033c60018486200154611569565b808452609760209081528385206001600160a01b03841660009081529152604090205460ff161561036c57505051f35b808452609760209081528385206001600160a01b0384166000908152915260409020805460ff191660011790556001600160a01b03806103aa61206e565b169216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d858551a451f35b503461000e57604036600319011261000e576024356103f481610258565b6001600160a01b038061040561206e565b169082160361041c5761041a90600435611826565b005b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b503461000e57602036600319011261000e5760043561049781610258565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691906104d0308414156118bc565b6104ed600080516020613eb483398151915293828554161461191d565b6104f56112ed565b6104fd61197e565b906105297f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1690565b1561053a57505061041a9150611b7b565b6020600491604094939451928380926352d1902d60e01b825286165afa60009181610595575b506105825760405162461bcd60e51b81528061057e60048201611a69565b0390fd5b61041a936105909114611a0b565b611c0b565b6105b791925060203d81116105be575b6105af81836107ca565b8101906119ef565b9038610560565b503d6105a5565b600091031261000e57565b918091926000905b8282106105f05750116105e9575050565b6000910152565b915080602091830151818601520182916105d8565b9060209161061e815180928185528580860191016105d0565b601f01601f1916010190565b90602061063b928181520190610605565b90565b503461000e57600036600319011261000e5761068560405161065f81610781565b6005815264191719171b60d91b6020820152604051918291602083526020830190610605565b0390f35b9181601f8401121561000e578235916001600160401b03831161000e576020808501948460051b01011161000e57565b503461000e5760e036600319011261000e576004356106d781610258565b6001600160401b039060643582811161000e576106f8903690600401610689565b9060843584811161000e57610711903690600401610689565b9060a43595861161000e5761072d61041a963690600401610689565b94909360c4359660443590602435906131b8565b50634e487b7160e01b600052604160045260246000fd5b61012081019081106001600160401b0382111761077457604052565b61077c610741565b604052565b604081019081106001600160401b0382111761077457604052565b606081019081106001600160401b0382111761077457604052565b6001600160401b03811161077457604052565b90601f801991011681019081106001600160401b0382111761077457604052565b6040519061027482610758565b6040519061012082018281106001600160401b0382111761077457604052565b6020906001600160401b038111610835575b601f01601f19160190565b61083d610741565b61082a565b92919261084e82610818565b9161085c60405193846107ca565b82948184528183011161000e578281602093846000960137010152565b50604036600319011261000e5760043561089281610258565b602435906001600160401b03821161000e573660238301121561000e576108c661041a923690602481600401359101610842565b906109196001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690610902308314156118bc565b600080516020613eb483398151915254161461191d565b6109216112ed565b611ab8565b503461000e57600036600319011261000e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316300361098157604051600080516020613eb48339815191528152602090f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b503461000e57600036600319011261000e57610685604051610a0d81610781565b600481526376302e3160e01b6020820152604051918291602083526020830190610605565b503461000e57602036600319011261000e57602060ff610a9b600435610a5781610258565b7f7a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb26000526097845260406000209060018060a01b0316600052602052604060002090565b54166040519015158152f35b90815180825260208080930193019160005b828110610ac7575050505090565b9091929382604082610aee60019489516020809160018060a01b0381511684520151910152565b01950193929101610ab9565b90815180825260208080930193019160005b828110610b1a575050505090565b835185529381019392810192600101610b0c565b906040602061063b9360018060a01b0381511684520151918160208201520190610afa565b908082519081815260208091019281808460051b8301019501936000915b848310610b815750505050505090565b9091929394958480610b9f600193601f198682030187528a51610b2e565b9801930193019194939290610b71565b61063b9160018060a01b0382511681526040610bda6020840151606060208501526060840190610afa565b920151906040818403910152610afa565b90815180825260208092019182818360051b82019501936000915b848310610c165750505050505090565b9091929394958480610c3083856001950387528a51610baf565b9801930193019194939290610c06565b602080825282516001600160a01b03169082015261063b9190602082015190610c7761012092836040840152610140830190610aa7565b91610cf0610cdc610cc8610cb4610ca0604089015197601f1998898983030160608a0152610aa7565b606089015188888303016080890152610b53565b6080880151878783030160a0880152610b53565b60a0870151868683030160c0870152610b53565b60c0860151858583030160e0860152610afa565b610d0b60e08601519161010092868683030184870152610beb565b9401519282850301910152610beb565b503461000e57602036600319011261000e57610685604051610d3c81610758565b6000815260609081602082015281604082015281808201528160808201528160a08201528160c08201528160e08201528161010080920152610e176008610d84600435612f1a565b50610d8d6107eb565b81546001600160a01b0316815294610da760018301612f63565b6020870152610db860028301612f63565b6040870152610dc960038301613026565b90860152610dd960048201613026565b6080860152610dea60058201613026565b60a0860152610dfb60068201612fd7565b60c0860152610e0c600782016130a1565b60e0860152016130a1565b9082015260405191829182610c40565b503461000e57604036600319011261000e57602060ff610a9b602435610e4c81610258565b6004356000526097845260406000209060018060a01b0316600052602052604060002090565b9080601f8301121561000e5781602061063b93359101610842565b503461000e5760208060031936011261000e576001600160401b039060043582811161000e57610ec1903690600401610e72565b91610eca61146d565b8251908111610f93575b600080516020613ed483398151915291610ef782610ef28554611f79565b612000565b80601f8311600114610f305750819293600092610f25575b50508160011b916000199060031b1c1916179055005b015190503880610f0f565b90601f19831694610f3f611fb3565b926000905b878210610f7b575050836001959610610f62575b505050811b019055005b015160001960f88460031b161c19169055388080610f58565b80600185968294968601518155019501930190610f44565b610f9b610741565b610ed4565b503461000e57600036600319011261000e57602060405160008152f35b503461000e57600036600319011261000e57600080516020613eb4833981519152546040516001600160a01b039091168152602090f35b90608060031983011261000e5760043561100d81610258565b916001600160401b039160243583811161000e578261102e91600401610e72565b9260443561103b81610258565b9260643591821161000e5761105291600401610689565b9091565b503461000e576110b061106836610ff4565b926000959495929192549561109460ff8860081c16158098819961112e575b811561110e575b506120c6565b866110a7600160ff196000541617600055565b6110f5576123cf565b6110b657005b6110c661ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b61110961010061ff00196000541617600055565b6123cf565b303b15915081611120575b503861108e565b6001915060ff161438611119565b600160ff8216109150611087565b503461000e57604036600319011261000e5761041a60243560043561116082610258565b80600052609760205261117a600160406000200154611569565b611826565b503461000e5761118e36610ff4565b9260ff60009392935460081c16156111a95761041a946123cf565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b503461000e576000806003193601126112ea576040519080600080516020613ed48339815191529081549061123682611f79565b808652926001928084169081156112c6575060011461126c575b61068586611260818803826107ca565b6040519182918261062a565b815292507feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c6975b8284106112ae5750505081016020016112608261068538611250565b80546020858701810191909152909301928101611292565b60ff1916602088015250506040850193506112609250849150610685905038611250565b80fd5b6112f561206e565b6001600160a01b03811660009081527f683723e34a772b6e4f2c919bba7fa32ed8ea11a8325f54da7db716e9d9dd98c7602052604090205460ff16156113385750565b61134a906001600160a01b0316611efa565b60006113546119b6565b90603061136083611e4e565b53607861136c83611e64565b5360415b6001811161141e5761057e6037611406866113f88761138f8815611eaf565b6113f26040519586947f416363657373436f6e74726f6c3a206163636f756e742000000000000000000060208701526113d1815180926020858a0191016105d0565b8501016011907001034b99036b4b9b9b4b733903937b6329607d1b81520190565b9061162d565b03601f1981018352826107ca565b60405162461bcd60e51b81529182916004830161062a565b9080600f61145b92166010811015611460575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a6114518486611e75565b5360041c91611e94565b611370565b611468611e37565b611431565b61147561206e565b6001600160a01b03811660009081527f62e46077c3875a2051fa0dcdd1c4cd18bfdd60fe03018733710dc9e484f089a360205260409020547f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c15919060ff16156114dc575050565b6114ee906001600160a01b0316611efa565b906114f76119b6565b90603061150383611e4e565b53607861150f83611e64565b5360415b600181116115325761057e6037611406866113f88761138f8815611eaf565b9080600f61156492166010811015611460576f181899199a1a9b1b9c1cb0b131b232b360811b901a6114518486611e75565b611513565b61157161206e565b60008281526097602090815260408083206001600160a01b038516845290915290205460ff16156115a0575050565b6115b2906001600160a01b0316611efa565b906115bb6119b6565b9060306115c783611e4e565b5360786115d383611e64565b5360415b600181116115f65761057e6037611406866113f88761138f8815611eaf565b9080600f61162892166010811015611460576f181899199a1a9b1b9c1cb0b131b232b360811b901a6114518486611e75565b6115d7565b90611640602092828151948592016105d0565b0190565b6001600160a01b03811660009081527f62e46077c3875a2051fa0dcdd1c4cd18bfdd60fe03018733710dc9e484f089a3602052604090207f0ab9ec9ba2423318b97c58cb919c22b4da14401c539342f710b4932382bc2c159060ff905b5416156116ac575050565b60008181526097602090815260408083206001600160a01b03861684529091529020805460ff191660011790556001600160a01b03806116ea61206e565b169216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d6000604051a4565b6001600160a01b03811660009081527f683723e34a772b6e4f2c919bba7fa32ed8ea11a8325f54da7db716e9d9dd98c7602052604081205460ff161561175b575050565b8080526097602090815260408083206001600160a01b038516600090815292529020805460ff191660011790556001600160a01b038061179961206e565b169216907f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d81604051a4565b6001600160a01b03811660009081527fae33a31436ab9cea8f54189966a681a9746f10deb641aef438e7df3ef1426c59602052604090207f7a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb29060ff906116a1565b60008181526097602090815260408083206001600160a01b038616845290915290205460ff16611854575050565b60008181526097602090815260408083206001600160a01b03861684529091529020805460ff191690556001600160a01b038061188f61206e565b169216907ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b6000604051a4565b156118c357565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b1561192457565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b60405190600060208301928084106001600160401b038511176119a9575b8360405281815292369037565b6119b1610741565b61199c565b60405190608082018281106001600160401b038211176119e2575b604052604282526060366020840137565b6119ea610741565b6119d1565b9081602091031261000e575190565b506040513d6000823e3d90fd5b15611a1257565b60405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b60809060208152602e60208201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960408201526d6f6e206973206e6f74205555505360901b60608201520190565b90611ae47f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1690565b15611af3575061027490611b7b565b6040516352d1902d60e01b8152916020836004816001600160a01b0385165afa60009381611b5b575b50611b3a5760405162461bcd60e51b81528061057e60048201611a69565b611b56600080516020613eb48339815191526102749414611a0b565b611d23565b611b7491945060203d81116105be576105af81836107ca565b9238611b1c565b803b15611bb057600080516020613eb483398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b611c1481611b7b565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590611d1b575b611c5a57505050565b813b15611cca575060008281926020611cc795519201905af4611c7b611d79565b60405191611c888361079c565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c6020840152660819985a5b195960ca1b6040840152611da9565b50565b62461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b506000611c51565b611d2c81611b7b565b6040516001600160a01b0382167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600083a2825115801590611d7157611c5a57505050565b506001611c51565b3d15611da4573d90611d8a82610818565b91611d9860405193846107ca565b82523d6000602084013e565b606090565b90919015611db5575090565b815115611dc55750805190602001fd5b60405162461bcd60e51b81526020600482015290819061057e906024830190610605565b50634e487b7160e01b600052601160045260246000fd5b8060001904821181151516611e13570290565b611e1b611de9565b0290565b6001906001198111611e2f570190565b611640611de9565b50634e487b7160e01b600052603260045260246000fd5b602090805115611e5c570190565b611640611e37565b602190805160011015611e5c570190565b906020918051821015611e8757010190565b611e8f611e37565b010190565b8015611ea2575b6000190190565b611eaa611de9565b611e9b565b15611eb657565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b60405190611f078261079c565b602a825260403660208401376030611f1e83611e4e565b536078611f2a83611e64565b536029905b60018211611f425761063b915015611eaf565b80600f611f7392166010811015611460576f181899199a1a9b1b9c1cb0b131b232b360811b901a6114518486611e75565b90611f2f565b90600182811c92168015611fa9575b6020831014611f9357565b634e487b7160e01b600052602260045260246000fd5b91607f1691611f88565b600080516020613ed48339815191526000527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c69790565b818110611ff4575050565b60008155600101611fe9565b90601f821161200d575050565b61027491600080516020613ed48339815191526000527feea97fdf38e36104b6e79f51a620e17443f803bd4254b3af64efdf6a8301c697906020601f840160051c83019310612064575b601f0160051c0190611fe9565b9091508190612057565b60143610158061208e575b1561208a5736601319013560601c90565b3390565b503360009081527fae33a31436ab9cea8f54189966a681a9746f10deb641aef438e7df3ef1426c59602052604090205460ff16612079565b156120cd57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b6020906001600160401b038111612142575b60051b0190565b61214a610741565b61213b565b81601f8201121561000e5780359061216682612129565b92604092612176845195866107ca565b808552602091828087019260061b8501019381851161000e578301915b8483106121a35750505050505090565b858383031261000e5783869182516121ba81610781565b85356121c581610258565b81528286013583820152815201920191612193565b81601f8201121561000e578035916121f183612129565b926121ff60405194856107ca565b808452602092838086019260051b82010192831161000e578301905b828210612229575050505090565b8135815290830190830161221b565b81601f8201121561000e5780359061224f82612129565b9260409261225f845195866107ca565b808552602093848087019260051b8501019383851161000e57858101925b85841061228e575050505050505090565b6001600160401b03843581811161000e5783019184601f19848903011261000e5784516122ba81610781565b898401356122c781610258565b81528584013592831161000e576122e5888b809695819601016121da565b8382015281520193019261227d565b9080601f8301121561000e57813561230b81612129565b9260409161231b835195866107ca565b808552602093848087019260051b8401019381851161000e57858401925b85841061234a575050505050505090565b6001600160401b03843581811161000e57860191606080601f19858803011261000e578451906123798261079c565b8a85013561238681610258565b82528585013584811161000e57878c6123a1928801016121da565b8b83015284013592831161000e576123c0868b809695819601016121da565b85820152815201930192612339565b9493946123db86612129565b936040906123eb825196876107ca565b8786526020978887019060051b82019236841161000e5782915b84831061241c57505050505061027494955061254b565b6001600160401b0390833582811161000e578501906101208236031261000e576124446107f8565b61244d83610269565b81528d83013584811161000e576124688f913690860161214f565b908201528483013584811161000e57612484903690850161214f565b8582015260608084013585811161000e576124a29036908601612238565b9082015260808084013585811161000e576124c09036908601612238565b9082015260a08084013585811161000e576124de9036908601612238565b9082015260c08084013585811161000e576124fc90369086016121da565b9082015260e08084013585811161000e5761251a90369086016122f4565b908201526101008084013594851161000e5761253c8f959486953691016122f4565b90820152815201920191612405565b919061255683611644565b80516001600160401b038111612652575b600080516020613ed48339815191529161258582610ef28554611f79565b60209081601f84116001146125dc575092826125c7936125cc96936102749998966000926125d1575b50508160011b916000199060031b1c19161790556117c5565b61265f565b612d93565b0151905038806125ae565b9190601f1984166125eb611fb3565b936000905b82821061263a575050936125cc969361027499989693600193836125c79810612621575b505050811b0190556117c5565b015160001960f88460031b161c19169055388080612614565b806001869782949787015181550196019401906125f0565b61265a610741565b612567565b61266890611717565b731820a4b7618bde71dce8cdc73aab6c95905fad24803b6126865750565b803b1561000e5760405163a41e7d5160e01b815230600482015263054fd4d560e41b6024820152600090818160448183875af18015612744575b612731575b50813b156112ea576040516329965a1d60e01b8152306004820181905260016354fd4d5160e01b0360248301526044820152918290606490829084905af18015612724575b6127115750565b8061271e610274926107b7565b806105c5565b61272c6119fe565b61270a565b8061271e61273e926107b7565b386126c5565b61274c6119fe565b6126c0565b8054906000908181558261276457505050565b6001906001600160ff1b03841182166127a3575b82526020822092811b8301925b8381106127925750505050565b808360029255838382015501612785565b6127ab611de9565b612778565b805460008255806127bf575050565b61027491600052602060002090810190611fe9565b90600160401b8111612809575b8154908083558181106127f357505050565b6102749260005260206000209182019101611fe9565b612811610741565b6127e1565b80549060008082558261282857505050565b6001916001600160ff1b038411831661286d575b81526020812092821b8301925b8381106128565750505050565b8082600292556128678482016127b0565b01612849565b612875611de9565b61283c565b600160401b8211612907575b80549082815581831061289857505050565b6001916001600160ff1b0380821184166128fa575b841183166128ed575b60009182526020822090831b810193831b015b8381106128d65750505050565b8082600292556128e78482016127b0565b016128c9565b6128f5611de9565b6128b6565b612902611de9565b6128ad565b61290f610741565b612886565b8054906000908181558261292757505050565b6001907f555555555555555555555555555555555555555555555555555555555555555584118216612994575b8252602082209160039384028301925b838110612972575050505050565b80828692556129828482016127b0565b61298e600282016127b0565b01612964565b61299c611de9565b612954565b90600160401b8111612a56575b8154918181558282106129c057505050565b6001907f55555555555555555555555555555555555555555555555555555555555555558085118316612a49575b83118216612a3c575b60009081526020812060039485028101938502015b838110612a1a575050505050565b8082869255612a2a8482016127b0565b612a36600282016127b0565b01612a0c565b612a44611de9565b6129f7565b612a51611de9565b6129ee565b612a5e610741565b6129ae565b815191600160401b8311612b46575b8154838355808410612ada575b50602080910191600052806000206000925b848410612a9f575050505050565b8051805183546001600160a01b0319166001600160a01b03919091161783556001916002918591908201518486015501920193019290612a91565b60016001600160ff1b038083118216612b39575b85118116612b2c575b6000908482526020822092811b83019286821b015b838110612b1b57505050612a7f565b808360029255838382015501612b0c565b612b34611de9565b612af7565b612b41611de9565b612aee565b612b4e610741565b612a72565b815191612b6083836127d4565b602080910191600052806000206000925b848410612b7f575050505050565b60018382829351855501920193019290612b71565b815190612ba1828261287a565b600090815260208082209093829085015b848410612bc157505050505050565b8051805184546001600160a01b0319166001600160a01b039190911617845586908101518051600191868301908490612bfa84846127d4565b019086528386209086905b838210612c2357505050505060029060019201930193019291612bb2565b805183558b95928501929185019101612c05565b90805190612c4582846129a1565b600092835260208084209091849083015b848610612c6557505050505050565b8051805184546001600160a01b0319166001600160a01b039190911617845584906001808601838301519084825192612c9e84846127d4565b019087528487209087905b838210612cd857505050505090600192612ccc6040600394015160028801612b53565b01930195019491612c56565b805183558a96928501929185019101612ca9565b815181546001600160a01b0319166001600160a01b039091161781556102749160089061010090612d24602082015160018601612a63565b612d35604082015160028601612a63565b612d46606082015160038601612b94565b612d57608082015160048601612b94565b612d6860a082015160058601612b94565b612d7960c082015160068601612b53565b612d8a60e082015160078601612c37565b01519101612c37565b805190600160401b8211612f0d575b61012e8054838255808410612e10575b505061012e6000526020908101907fbdaadd9f750d0166045bf387a364eadd28ba243e04512a47282aa5147a68e37f6000925b848410612df3575050505050565b60098382612e046001945186612cec565b01920193019290612de5565b60017f1c71c71c71c71c71c71c71c71c71c71c71c71c71c71c71c71c71c71c71c71c718083118216612f00575b85118116612ef3575b60009283526009927fbdaadd9f750d0166045bf387a364eadd28ba243e04512a47282aa5147a68e37f928402830192868502015b838110612e8957505050612db2565b8082869255612e99848201612751565b612ea560028201612751565b612eb160038201612816565b612ebd60048201612816565b612ec960058201612816565b612ed5600682016127b0565b612ee160078201612914565b612eed60088201612914565b01612e7a565b612efb611de9565b612e46565b612f08611de9565b612e3d565b612f15610741565b612da2565b60099061012e8054821015612f56575b600052027fbdaadd9f750d0166045bf387a364eadd28ba243e04512a47282aa5147a68e37f0190600090565b612f5e611e37565b612f2a565b908154612f6f81612129565b92604093612f7f855191826107ca565b828152809460208092019260005281600020906000935b858510612fa557505050505050565b6002846001928451612fb681610781565b848060a01b0387541681528487015483820152815201930194019391612f96565b9060405191828154918282526020928383019160005283600020936000905b82821061300c57505050610274925003836107ca565b855484526001958601958895509381019390910190612ff6565b90815461303281612129565b92604093613042855191826107ca565b828152809460208092019260005281600020906000935b85851061306857505050505050565b600284600192845161307981610781565b848060a01b03875416815261308f858801612fd7565b83820152815201930194019391613059565b9081546130ad81612129565b926040936130bd855191826107ca565b828152809460208092019260005281600020906000935b8585106130e357505050505050565b6003846001928451606081018181106001600160401b0382111761313c575b8652848060a01b03875416815261311a858801612fd7565b8382015261312a60028801612fd7565b868201528152019301940193916130d4565b613144610741565b613102565b9291909261315684612129565b9161316460405193846107ca565b829480845260208094019060051b83019282841161000e5780915b84831061318e57505050505050565b82356001600160401b03811161000e5786916131ad86849386016121da565b81520192019161317f565b93909497999896929195996131cb61206e565b809b876131d78a612f1a565b509660009c8d9b8c5260209761012d89526040809d209736906131f992613149565b93369061320592613149565b94369061321192613149565b958c60019182808b0161322390612f63565b9280915b61335b575b50505050509261329983613281816132cb989561326f8c6132ab99819d9b6133029f600261326361326a925460018060a01b031690565b9401612f63565b613ab7565b8d61327c60038d01613026565b61364c565b6132946005890191848d61327c85613026565b613026565b6132a560068801612fd7565b906134e8565b82548b906001600160a01b031691876132c660048701613026565b613c97565b6132e189856132dc600785016130a1565b6138dd565b80546001600160a01b031690899085906132fd906008016130a1565b613dd8565b6001600160a01b031691823b15613357575163a16f3c0d60e01b81526001600160a01b03969096166004870152602486015260448501919091529192918290606490829084905af18015612724576127115750565b8480fd5b9092948597929496975184101561348857508d8461339c613390613390613382888b6134a4565b51516001600160a01b031690565b6001600160a01b031690565b91516370a0823160e01b81526001600160a01b03949094166004808601919091529391829060249082905afa91821561347b575b9161345e575b506133ee8d856133e686896134a4565b510151611e00565b908181106134105750505061340290613494565b918f9493918b938f84613227565b8e945061342161057e9394876134a4565b51945163251a663760e21b815285516001600160a01b03169481019485526020958601519585019590955260408401526060830152829160800190565b6134759150843d86116105be576105af81836107ca565b386133d6565b6134836119fe565b6133d0565b9450819695508061322c565b6001906000198114611e2f570190565b60209181518110156134b9575b60051b010190565b6134c1611e37565b6134b1565b6134de60409295949395606083526060830190610b2e565b9460208201520152565b919093600080915b84518310156135ff57815b61350584866134a4565b51518110156135ee5761355e61353b613521613382878a6134a4565b6001600160a01b0316600090815260208a90526040902090565b61354f83613549888a6134a4565b516134a4565b51600052602052604060002090565b54613569858a6134a4565b51808210156135c65750906135806135c192611e1f565b6135bb6135ad613593613382898c6134a4565b6001600160a01b0316600090815260208c90526040902090565b61354f846135498a8c6134a4565b55613494565b6134fb565b61057e6135d3878a6134a4565b516040516329fa40fb60e11b815293849391600485016134c6565b50916135f990613494565b916134f0565b95505050505050565b9081602091031261000e575161063b81610258565b91613635604092959495606085526060850190610b2e565b6001600160a01b0391821660208501529416910152565b939192906000925b85518410156137ac578161366885876134a4565b5151036137765760005b61367c85876134a4565b515181101561376557613698613390613390613382888b6134a4565b6136a682613549888a6134a4565b51604080516331a9108f60e11b81526004808201939093529092602091908290829060249082905afa918215613758575b60009261372b575b50506001600160a01b03878116908216036137055750505061370090613494565b613672565b8661057e916137148a8d6134a4565b519451639965936160e01b8152948594850161361d565b61374a9250803d10613751575b61374281836107ca565b810190613608565b38806136df565b503d613738565b6137606119fe565b6136d7565b509261377090613494565b92613654565b508361057e61379085613789818a6134a4565b51936134a4565b515192604051938493639096f90560e01b8552600485016134c6565b945050505050565b906137be82612129565b6137cb60405191826107ca565b82815280926137dc601f1991612129565b0190602036910137565b602090818184031261000e578051906001600160401b03821161000e57019180601f8401121561000e57825161381b81612129565b9361382960405195866107ca565b818552838086019260051b82010192831161000e578301905b828210613850575050505090565b81518152908301908301613842565b9092916040820191604081528451809352606081019260208096019060005b8181106138985750505061063b9394818403910152610afa565b82516001600160a01b03168652948701949187019160010161387e565b90926138ce606093969594608084526080840190610baf565b95602083015260408201520152565b9192906000905b8351821015613ab0576020613906816138fd85886134a4565b510151516137b4565b92613915826138fd83896134a4565b9460005b83613924848a6134a4565b5101515181101561398657806139548661394e6139819488613946898f6134a4565b5101516134a4565b51611e00565b61395e82896134a4565b5261397c8a61396d838b6134a4565b6001600160a01b039091169052565b613494565b613919565b50939290966139d492506139a36133906133906133828b8b6134a4565b946000604096876139b48c8c6134a4565b51015190885180809881946313849cfd60e21b835260049d8e840161385f565b03915afa938415613aa3575b600094613a80575b5060005b8451811015613a68576139ff81866134a4565b51613a0a82886134a4565b5111613a1e57613a1990613494565b6139ec565b613a5193508092506137899150613a4a81886139468d613a438e9f61057e9e9f6134a4565b519e6134a4565b51946134a4565b519251636d04a90160e01b815295869586016138b5565b5095509691509250613a7a9150613494565b906138e4565b613a9c91943d8091833e613a9481836107ca565b8101906137e6565b92386139e8565b613aab6119fe565b6139e0565b5050915050565b9091939293600092835b8351811015613bcb57613ba69080613b95898880898982613aff8b6001600160a01b03613aee8b876134a4565b515116946133e660209b8c926134a4565b604080516323b872dd60e01b8b82019081526001600160a01b039586166024830152989094166044850152606480850192909252908352919591613b446084886107ca565b5195613b4f87610781565b8887527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656489880152613b83843b1515613c4b565b51925af1613b8f611d79565b90611da9565b80519081613bab575b505050613494565b613ac1565b82613bc393613bbe938301019101613bd4565b613bec565b388080613b9e565b50505050509050565b9081602091031261000e5751801515810361000e5790565b15613bf357565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b15613c5257565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b9493919492909260005b8151811015613bcb5784613cb582896134a4565b515103613d775760005b858110613cd55750613cd090613494565b613ca1565b613ce861339061339061338285876134a4565b90613cf781613549858c6134a4565b51823b1561000e57604051632142170760e11b81526001600160a01b038088166004830152881660248201526044810191909152613d52926000908290818381606481015b03925af18015613d6a575b613d57575b50613494565b613cbf565b8061271e613d64926107b7565b38613d4c565b613d726119fe565b613d47565b61057e613790826137898a9489966134a4565b939061063b9593613dbc91613dca9460018060a01b03809216885216602087015260a0604087015260a0860190610afa565b908482036060860152610afa565b916080818403910152610605565b939190936000905b8051821015613eab57602092613dfa846138fd85856134a4565b9460005b85613e0986866134a4565b51015151811015613e405780613e2b8a61394e613e3b948a6139468b8b6134a4565b613e35828a6134a4565b52613494565b613dfe565b50929094919350613e5a61339061339061338284886134a4565b91604080613e6884886134a4565b510151613e7361197e565b94803b1561000e578960008a613d3c613ea39983975198899788968795631759616b60e11b875260048701613d8a565b909291613de0565b50505091505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc59c86eba0f8c3c9659b86fb2776edca2ff990d1509243e9705ae43a6831558c6a2646970667358221220c7a299f15c20d7e42197eb7b13449d729b1772b5dfe7b2c827d0b4a507a2875664736f6c634300080e0033",
  "devdoc": {
    "details": "Abstract contract with types and utilities that will be used by many (if not all) Plugins contracts",
    "kind": "dev",
    "methods": {
      "canImplementInterfaceForAddress(bytes32,address)": {
        "details": "See {IERC1820Implementer-canImplementInterfaceForAddress}."
      },
      "contractURI()": {
        "details": "Returns collection-wide URI-accessible metadata"
      },
      "getBasket(uint256)": {
        "details": "Returns all inputs",
        "params": {
          "basketIdx": "Index of selected input basket"
        }
      },
      "getImplementation()": {
        "details": "Returns the implementation address."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,string,address,(address,(address,uint256)[],(address,uint256)[],(address,uint256[])[],(address,uint256[])[],(address,uint256[])[],uint256[],(address,uint256[],uint256[])[],(address,uint256[],uint256[])[])[])": {
        "details": "Initializes contract (replaces constructor in proxy pattern)",
        "params": {
          "_admin": "owner, can control outputs on contract",
          "_gsnForwarder": "trusted forwarder address for openGSN",
          "_initContractURI": "contract uri",
          "_inputBaskets": "input baskets"
        }
      },
      "input(address,uint256,uint256,uint256[][],uint256[][],uint256[][],uint256)": {
        "details": "Used to trigger a routed call. Amount parameter enables down-level iteration that consumes N inputs.",
        "params": {
          "amount": "Down-level iteration parameter",
          "basketIdx": "Index of selected input basket",
          "erc721TokenIdsBurned": "2D-Array of tokenIds to burn",
          "erc721TokenIdsNTime": "2D-Array of tokenIds to use",
          "erc721TokenIdsUnaffected": "2D-Array of tokenIds that serve as unlimited token-gating",
          "outBasketIdx": "Index of selected output basket ```",
          "target": "Target Address"
        }
      },
      "isTrustedForwarder(address)": {
        "details": "Determine is an address a GSN trusted forwarder.",
        "params": {
          "forwarder": "address to query"
        },
        "returns": {
          "_0": "OpenGSN trusted forwarder status"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "proxyInitialize(address,string,address,(address,(address,uint256)[],(address,uint256)[],(address,uint256[])[],(address,uint256[])[],(address,uint256[])[],uint256[],(address,uint256[],uint256[])[],(address,uint256[],uint256[])[])[])": {
        "details": "See initialize. Uses onlyInitializing modifier, enabling running while initializing."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setContractURI(string)": {
        "details": "Set contract uri"
      },
      "supportsInterface(bytes4)": {
        "details": "ERC165 Support",
        "params": {
          "interfaceId": "XOR of the external functions of the interface"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "version()": {
        "details": "OwlProtocol contract version. Used to determine compatibility interoperable with other Owl contracts."
      },
      "versionRecipient()": {
        "details": "Returns OpenGSN contract version (used for compatibility checks)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1451,
        "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1454,
        "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1433,
        "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7523,
        "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8038,
        "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 426,
        "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)421_storage)"
      },
      {
        "astId": 725,
        "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1730,
        "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8071,
        "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8117,
        "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13116,
        "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
        "label": "erc721NTime",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 13120,
        "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
        "label": "inputBaskets",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_struct(AssetBasketInput)13676_storage)dyn_storage"
      },
      {
        "astId": 13124,
        "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
        "label": "__gap",
        "offset": 0,
        "slot": "303",
        "type": "t_array(t_uint256)48_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(AssetBasketInput)13676_storage)dyn_storage": {
        "base": "t_struct(AssetBasketInput)13676_storage",
        "encoding": "dynamic_array",
        "label": "struct AssetBasketInput[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AssetERC1155)13629_storage)dyn_storage": {
        "base": "t_struct(AssetERC1155)13629_storage",
        "encoding": "dynamic_array",
        "label": "struct AssetERC1155[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AssetERC20)13614_storage)dyn_storage": {
        "base": "t_struct(AssetERC20)13614_storage",
        "encoding": "dynamic_array",
        "label": "struct AssetERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(AssetERC721)13620_storage)dyn_storage": {
        "base": "t_struct(AssetERC721)13620_storage",
        "encoding": "dynamic_array",
        "label": "struct AssetERC721[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)421_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)421_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AssetBasketInput)13676_storage": {
        "encoding": "inplace",
        "label": "struct AssetBasketInput",
        "members": [
          {
            "astId": 13644,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "burnAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13648,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "erc20Unaffected",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(AssetERC20)13614_storage)dyn_storage"
          },
          {
            "astId": 13652,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "erc20Burned",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(AssetERC20)13614_storage)dyn_storage"
          },
          {
            "astId": 13656,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "erc721Unaffected",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(AssetERC721)13620_storage)dyn_storage"
          },
          {
            "astId": 13660,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "erc721Burned",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_struct(AssetERC721)13620_storage)dyn_storage"
          },
          {
            "astId": 13664,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "erc721NTime",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_struct(AssetERC721)13620_storage)dyn_storage"
          },
          {
            "astId": 13667,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "erc721NTimeMax",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 13671,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "erc1155Unaffected",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(AssetERC1155)13629_storage)dyn_storage"
          },
          {
            "astId": 13675,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "erc1155Burned",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(AssetERC1155)13629_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(AssetERC1155)13629_storage": {
        "encoding": "inplace",
        "label": "struct AssetERC1155",
        "members": [
          {
            "astId": 13622,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "contractAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13625,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "amounts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 13628,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "tokenIds",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(AssetERC20)13614_storage": {
        "encoding": "inplace",
        "label": "struct AssetERC20",
        "members": [
          {
            "astId": 13611,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "contractAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13613,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AssetERC721)13620_storage": {
        "encoding": "inplace",
        "label": "struct AssetERC721",
        "members": [
          {
            "astId": 13616,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "contractAddr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13619,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "tokenIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)421_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 418,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 420,
            "contract": "contracts/plugins/AssetRouter/AssetRouterInput.sol:AssetRouterInput",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}