{
  "address": "0xDDFF50af0db5D793Ae79aFf6704C1fa9419fDc40",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "InvalidSender",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "cloneDeterministic",
      "outputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "cloneDeterministicAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "codeData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "deployDeterministic",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "codeData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "deployDeterministicAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 18,
  "solcInputHash": "2fe98e12c0031ec2a7dec3df9237bffc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"cloneDeterministic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"cloneDeterministicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"codeData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"deployDeterministic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"codeData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"deployDeterministicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1167 Minimal Proxy Factory\",\"kind\":\"dev\",\"methods\":{\"cloneDeterministic(address,bytes32,bytes,address)\":{\"details\":\"Clone implementation contract\",\"params\":{\"implementation\":\"implementation contract to DELEGATECALL to,, used to compute salt\",\"initData\":\"initialization data, used to compute salt\",\"msgSender\":\"added to salt if != address(0) to avoid other users to deploy clones on other chains\",\"salt\":\"CREATE2 salt\"}},\"cloneDeterministicAddress(address,bytes32,bytes,address)\":{\"details\":\"Get deployed clone contract address\",\"params\":{\"implementation\":\"implementation contract to DELEGATECALL to,, used to compute salt\",\"initData\":\"initialization data, used to compute salt\",\"msgSender\":\"added to salt if != address(0) to avoid other users to deploy clones on other chains\",\"salt\":\"CREATE2 salt\"}},\"deployDeterministic(bytes32,bytes,bytes,address)\":{\"details\":\"Deploy implementation contract, with optional initialization\",\"params\":{\"codeData\":\"CREATE2 contract bytecode\",\"initData\":\"initialization data, used to re-compute salt if specified\",\"msgSender\":\"added to salt if != address(0) to avoid other users to deploy clones on other chains\",\"salt\":\"CREATE2 salt\"}},\"deployDeterministicAddress(bytes32,bytes,bytes,address)\":{\"details\":\"Get deployed implementation contract address, with optional initialization\",\"params\":{\"codeData\":\"CREATE2 contract bytecode\",\"initData\":\"initialization data, used to re-compute salt if specified\",\"msgSender\":\"added to salt if != address(0) to avoid other users to deploy clones on other chains\",\"salt\":\"CREATE2 salt\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/proxy/ERC1167/ERC1167Factory.sol\":\"ERC1167Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x3734e36dc4de32780bfd344a94b85b6aab985fd6e42672983ed251ba7754a2e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2Upgradeable {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\",\"keccak256\":\"0x07847abb8f373a49b9155649d6e924f0c7840e465d9bd81fd33a9a7a6e41d25a\",\"license\":\"MIT\"},\"contracts/proxy/ERC1167/ERC1167Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ClonesUpgradeable} from '@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol';\\nimport {Create2Upgradeable} from '@openzeppelin/contracts-upgradeable/utils/Create2Upgradeable.sol';\\nimport {ContextUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport {AddressUpgradeable} from '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\n\\nimport {IERC1167Factory} from './IERC1167Factory.sol';\\n\\nerror InvalidSender(address expected, address actual);\\n\\n/**\\n * @dev ERC1167 Minimal Proxy Factory\\n */\\ncontract ERC1167Factory is ContextUpgradeable, IERC1167Factory {\\n    using AddressUpgradeable for address;\\n\\n    //https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private __gap;\\n\\n    /**\\n     * @dev Compute salt based on optional initData & msgSender\\n     */\\n    function _salt(\\n        bytes32 salt,\\n        bytes memory initData,\\n        address msgSender\\n    ) internal pure returns (bytes32) {\\n        if (msgSender != address(0)) {\\n            if (initData.length > 0) {\\n                // salt recomputed based on msgSender & initData\\n                return keccak256(abi.encodePacked(salt, msgSender, initData));\\n            } else {\\n                // salt recomputed based on msgSender\\n                return keccak256(abi.encodePacked(salt, msgSender));\\n            }\\n        } else if (initData.length > 0) {\\n            // salt recomputed based on initData\\n            return keccak256(abi.encodePacked(salt, initData));\\n        }\\n        return salt;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1167Factory\\n     */\\n    function deployDeterministic(\\n        bytes32 salt,\\n        bytes memory codeData,\\n        bytes memory initData,\\n        address msgSender\\n    ) external returns (address) {\\n        if (msgSender != address(0) && msgSender != _msgSender()) revert InvalidSender(msgSender, _msgSender());\\n\\n        salt = _salt(salt, initData, msgSender);\\n\\n        if (initData.length > 0) {\\n            //Deploy and initialize\\n            address contractAddress = Create2Upgradeable.deploy(0, salt, codeData);\\n            contractAddress.functionCall(initData, 'ERC1167Factory: Failed to call the contract');\\n            return contractAddress;\\n        } else {\\n            //Deploy\\n            return Create2Upgradeable.deploy(0, salt, codeData);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1167Factory\\n     */\\n    function deployDeterministicAddress(\\n        bytes32 salt,\\n        bytes memory codeData,\\n        bytes memory initData,\\n        address msgSender\\n    ) external view returns (address) {\\n        salt = _salt(salt, initData, msgSender);\\n        return Create2Upgradeable.computeAddress(salt, keccak256(codeData));\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1167Factory\\n     */\\n    function cloneDeterministic(\\n        address implementation,\\n        bytes32 salt,\\n        bytes memory initData,\\n        address msgSender\\n    ) external returns (address instance) {\\n        if (msgSender != address(0) && msgSender != _msgSender()) revert InvalidSender(msgSender, _msgSender());\\n\\n        salt = _salt(salt, initData, msgSender);\\n        instance = ClonesUpgradeable.cloneDeterministic(implementation, salt);\\n\\n        //data is optional\\n        if (initData.length > 0) instance.functionCall(initData, 'ERC1167Factory: Failed to call the proxy');\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1167Factory\\n     */\\n    function cloneDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        bytes memory initData,\\n        address msgSender\\n    ) external view returns (address) {\\n        salt = _salt(salt, initData, msgSender);\\n        return ClonesUpgradeable.predictDeterministicAddress(implementation, salt);\\n    }\\n}\\n\",\"keccak256\":\"0x0a43afc052f7977168406f8ef73ffbc4089350c8d5fb24f51840d188da9fff5a\",\"license\":\"MIT\"},\"contracts/proxy/ERC1167/IERC1167Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev IERC1167 Minimal Proxy Factory\\n */\\ninterface IERC1167Factory {\\n    /**\\n     * @dev Deploy implementation contract, with optional initialization\\n     * @param salt CREATE2 salt\\n     * @param codeData CREATE2 contract bytecode\\n     * @param initData initialization data, used to re-compute salt if specified\\n     * @param msgSender added to salt if != address(0) to avoid other users to deploy clones on other chains\\n     */\\n    function deployDeterministic(\\n        bytes32 salt,\\n        bytes memory codeData,\\n        bytes memory initData,\\n        address msgSender\\n    ) external returns (address);\\n\\n    /**\\n     * @dev Get deployed implementation contract address, with optional initialization\\n     * @param salt CREATE2 salt\\n     * @param codeData CREATE2 contract bytecode\\n     * @param initData initialization data, used to re-compute salt if specified\\n     * @param msgSender added to salt if != address(0) to avoid other users to deploy clones on other chains\\n     */\\n    function deployDeterministicAddress(\\n        bytes32 salt,\\n        bytes memory codeData,\\n        bytes memory initData,\\n        address msgSender\\n    ) external view returns (address);\\n\\n    /**\\n     * @dev Clone implementation contract\\n     * @param implementation implementation contract to DELEGATECALL to,, used to compute salt\\n     * @param salt CREATE2 salt\\n     * @param initData initialization data, used to compute salt\\n     * @param msgSender added to salt if != address(0) to avoid other users to deploy clones on other chains\\n     */\\n    function cloneDeterministic(\\n        address implementation,\\n        bytes32 salt,\\n        bytes memory initData,\\n        address msgSender\\n    ) external returns (address instance);\\n\\n    /**\\n     * @dev Get deployed clone contract address\\n     * @param implementation implementation contract to DELEGATECALL to,, used to compute salt\\n     * @param salt CREATE2 salt\\n     * @param initData initialization data, used to compute salt\\n     * @param msgSender added to salt if != address(0) to avoid other users to deploy clones on other chains\\n     */\\n    function cloneDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        bytes memory initData,\\n        address msgSender\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x48e03e8bc92d445319eaa173561884345627327df774d5f76cb03a31cf71f43a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610883908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c9182635b09f8b31461019f5782637116d4e5146100605750508063d0881939146100575763eada0a961461004f575b600080fd5b61004a6103e0565b5061004a610358565b3461019c5761006e36610304565b6001600160a01b0394919391928186168015159081610191575b5061016b57603792918561009b9261076a565b8651733d602d80600a3d3981f3363d3d373d3d3d363d7360601b815260609290921b60148301526e5af43d82803e903d91602b57fd5bf360881b602883015292f591821615610127579182610109935161010d575b50516001600160a01b0390911681529081906020820190565b0390f35b61012090610119610803565b90846105b2565b50836100f0565b825162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606490fd5b865163708986dd60e11b81526001600160a01b0383166004820152336024820152604490fd5b905033141588610088565b80fd5b90346101ce576020906101bd6101b4366102a6565b92919091610465565b90516001600160a01b039091168152f35b5080fd5b50634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761020557604052565b61020d6101d2565b604052565b90601f8019910116810190811067ffffffffffffffff82111761020557604052565b60209067ffffffffffffffff8111610252575b601f01601f19160190565b61025a6101d2565b610247565b81601f8201121561004a5780359061027682610234565b926102846040519485610212565b8284526020838301011161004a57816000926020809301838601378301015290565b608060031982011261004a576004359167ffffffffffffffff60243581811161004a57836102d69160040161025f565b9260443591821161004a576102ed9160040161025f565b906064356001600160a01b038116810361004a5790565b608060031982011261004a576001600160a01b03600435818116810361004a5792602435926044359067ffffffffffffffff821161004a576103489160040161025f565b91606435908116810361004a5790565b503461004a5760206055603761037961037036610304565b9193929361076a565b60405191733d602d80600a3d3981f3363d3d373d3d3d363d7360601b835260601b60148301526f5af43d82803e903d91602b57fd5bf3ff60801b60288301523060601b6038830152604c820152818120606c82015201206040519060018060a01b03168152f35b503461004a5760206103fc6103f4366102a6565b91939261076a565b90828151910120604051908382019260ff60f81b84523060601b60218401526035830152605582015260558152608081019181831067ffffffffffffffff841117610458575b6040839052905190206001600160a01b03168152f35b6104606101d2565b610442565b919290916001600160a01b038216801515908161052b575b5061050457908361048d9261076a565b8251156104f7576104f3916104a19161066e565b91604051906104af826101e9565b602b82527f45524331313637466163746f72793a204661696c656420746f2063616c6c207460208301526a1a194818dbdb9d1c9858dd60aa1b6040830152836105b2565b5090565b610501925061066e565b90565b60405163708986dd60e11b81526001600160a01b0383166004820152336024820152604490fd5b90503314153861047d565b1561053d57565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d156105ad573d9061059382610234565b916105a16040519384610212565b82523d6000602084013e565b606090565b6000610501939281926105c7813b1515610536565b82602083519301915af16105d9610582565b90610614565b918091926000905b8282106105ff5750116105f8575050565b6000910152565b915080602091830151818601520182916105e7565b90919015610620575090565b8151156106305750805190602001fd5b6044604051809262461bcd60e51b82526020600483015261066081518092816024860152602086860191016105df565b601f01601f19168101030190fd5b908051156106d6576020815191016000f56001600160a01b038116156106915790565b60405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152fd5b602092918152610732825180938580850191016105df565b010190565b90916034939282526bffffffffffffffffffffffff199060601b16602082015261073282518093602086850191016105df565b916001600160a01b038116156107e0578151156107ad576107a790610799604051938492602084019687610737565b03601f198101835282610212565b51902090565b604080516020810194855260609290921b6bffffffffffffffffffffffff19169082015290506107a78160548101610799565b5080516107eb575090565b6107a76107999160405192839160208301958661071a565b60405190610810826101e9565b602882526768652070726f787960c01b6040837f45524331313637466163746f72793a204661696c656420746f2063616c6c20746020820152015256fea26469706673582212209031e24231f69252357648a012d7ea2304c93a219e604bd6d4674cbc73ce96c764736f6c634300080e0033",
  "deployedBytecode": "0x604060808152600436101561001357600080fd5b600090813560e01c9182635b09f8b31461019f5782637116d4e5146100605750508063d0881939146100575763eada0a961461004f575b600080fd5b61004a6103e0565b5061004a610358565b3461019c5761006e36610304565b6001600160a01b0394919391928186168015159081610191575b5061016b57603792918561009b9261076a565b8651733d602d80600a3d3981f3363d3d373d3d3d363d7360601b815260609290921b60148301526e5af43d82803e903d91602b57fd5bf360881b602883015292f591821615610127579182610109935161010d575b50516001600160a01b0390911681529081906020820190565b0390f35b61012090610119610803565b90846105b2565b50836100f0565b825162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606490fd5b865163708986dd60e11b81526001600160a01b0383166004820152336024820152604490fd5b905033141588610088565b80fd5b90346101ce576020906101bd6101b4366102a6565b92919091610465565b90516001600160a01b039091168152f35b5080fd5b50634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761020557604052565b61020d6101d2565b604052565b90601f8019910116810190811067ffffffffffffffff82111761020557604052565b60209067ffffffffffffffff8111610252575b601f01601f19160190565b61025a6101d2565b610247565b81601f8201121561004a5780359061027682610234565b926102846040519485610212565b8284526020838301011161004a57816000926020809301838601378301015290565b608060031982011261004a576004359167ffffffffffffffff60243581811161004a57836102d69160040161025f565b9260443591821161004a576102ed9160040161025f565b906064356001600160a01b038116810361004a5790565b608060031982011261004a576001600160a01b03600435818116810361004a5792602435926044359067ffffffffffffffff821161004a576103489160040161025f565b91606435908116810361004a5790565b503461004a5760206055603761037961037036610304565b9193929361076a565b60405191733d602d80600a3d3981f3363d3d373d3d3d363d7360601b835260601b60148301526f5af43d82803e903d91602b57fd5bf3ff60801b60288301523060601b6038830152604c820152818120606c82015201206040519060018060a01b03168152f35b503461004a5760206103fc6103f4366102a6565b91939261076a565b90828151910120604051908382019260ff60f81b84523060601b60218401526035830152605582015260558152608081019181831067ffffffffffffffff841117610458575b6040839052905190206001600160a01b03168152f35b6104606101d2565b610442565b919290916001600160a01b038216801515908161052b575b5061050457908361048d9261076a565b8251156104f7576104f3916104a19161066e565b91604051906104af826101e9565b602b82527f45524331313637466163746f72793a204661696c656420746f2063616c6c207460208301526a1a194818dbdb9d1c9858dd60aa1b6040830152836105b2565b5090565b610501925061066e565b90565b60405163708986dd60e11b81526001600160a01b0383166004820152336024820152604490fd5b90503314153861047d565b1561053d57565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d156105ad573d9061059382610234565b916105a16040519384610212565b82523d6000602084013e565b606090565b6000610501939281926105c7813b1515610536565b82602083519301915af16105d9610582565b90610614565b918091926000905b8282106105ff5750116105f8575050565b6000910152565b915080602091830151818601520182916105e7565b90919015610620575090565b8151156106305750805190602001fd5b6044604051809262461bcd60e51b82526020600483015261066081518092816024860152602086860191016105df565b601f01601f19168101030190fd5b908051156106d6576020815191016000f56001600160a01b038116156106915790565b60405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152fd5b602092918152610732825180938580850191016105df565b010190565b90916034939282526bffffffffffffffffffffffff199060601b16602082015261073282518093602086850191016105df565b916001600160a01b038116156107e0578151156107ad576107a790610799604051938492602084019687610737565b03601f198101835282610212565b51902090565b604080516020810194855260609290921b6bffffffffffffffffffffffff19169082015290506107a78160548101610799565b5080516107eb575090565b6107a76107999160405192839160208301958661071a565b60405190610810826101e9565b602882526768652070726f787960c01b6040837f45524331313637466163746f72793a204661696c656420746f2063616c6c20746020820152015256fea26469706673582212209031e24231f69252357648a012d7ea2304c93a219e604bd6d4674cbc73ce96c764736f6c634300080e0033",
  "devdoc": {
    "details": "ERC1167 Minimal Proxy Factory",
    "kind": "dev",
    "methods": {
      "cloneDeterministic(address,bytes32,bytes,address)": {
        "details": "Clone implementation contract",
        "params": {
          "implementation": "implementation contract to DELEGATECALL to,, used to compute salt",
          "initData": "initialization data, used to compute salt",
          "msgSender": "added to salt if != address(0) to avoid other users to deploy clones on other chains",
          "salt": "CREATE2 salt"
        }
      },
      "cloneDeterministicAddress(address,bytes32,bytes,address)": {
        "details": "Get deployed clone contract address",
        "params": {
          "implementation": "implementation contract to DELEGATECALL to,, used to compute salt",
          "initData": "initialization data, used to compute salt",
          "msgSender": "added to salt if != address(0) to avoid other users to deploy clones on other chains",
          "salt": "CREATE2 salt"
        }
      },
      "deployDeterministic(bytes32,bytes,bytes,address)": {
        "details": "Deploy implementation contract, with optional initialization",
        "params": {
          "codeData": "CREATE2 contract bytecode",
          "initData": "initialization data, used to re-compute salt if specified",
          "msgSender": "added to salt if != address(0) to avoid other users to deploy clones on other chains",
          "salt": "CREATE2 salt"
        }
      },
      "deployDeterministicAddress(bytes32,bytes,bytes,address)": {
        "details": "Get deployed implementation contract address, with optional initialization",
        "params": {
          "codeData": "CREATE2 contract bytecode",
          "initData": "initialization data, used to re-compute salt if specified",
          "msgSender": "added to salt if != address(0) to avoid other users to deploy clones on other chains",
          "salt": "CREATE2 salt"
        }
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1451,
        "contract": "contracts/proxy/ERC1167/ERC1167Factory.sol:ERC1167Factory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1454,
        "contract": "contracts/proxy/ERC1167/ERC1167Factory.sol:ERC1167Factory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7523,
        "contract": "contracts/proxy/ERC1167/ERC1167Factory.sol:ERC1167Factory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15605,
        "contract": "contracts/proxy/ERC1167/ERC1167Factory.sol:ERC1167Factory",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}